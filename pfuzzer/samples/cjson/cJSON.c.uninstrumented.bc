; ModuleID = '/home/klee/dockermount/checksum-repair/samples/cjson/cJSON.c'
source_filename = "/home/klee/dockermount/checksum-repair/samples/cjson/cJSON.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.error = type { i8*, i64 }
%struct.internal_hooks = type { i8* (i64)*, void (i8*)*, i8* (i8*, i64)* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.cJSON = type { %struct.cJSON*, %struct.cJSON*, %struct.cJSON*, i32, i8*, i32, double, i8* }
%struct.cJSON_Hooks = type { i8* (i64)*, void (i8*)* }
%struct.parse_buffer = type { i8*, i64, i64, i64, %struct.internal_hooks }
%struct.printbuffer = type { i8*, i64, i64, i64, i32, i32, %struct.internal_hooks }

@global_error = internal global %struct.error zeroinitializer, align 8, !dbg !0
@cJSON_Version.version = internal global [15 x i8] zeroinitializer, align 1, !dbg !38
@.str = private unnamed_addr constant [9 x i8] c"%i.%i.%i\00", align 1
@global_hooks = internal global %struct.internal_hooks { i8* (i64)* @malloc, void (i8*)* @free, i8* (i8*, i64)* @realloc }, align 8, !dbg !46
@stdin = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Invalid json.\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\EF\BB\BF\00", align 1
@print.default_buffer_size = internal constant i64 256, align 8, !dbg !63
@.str.3 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"%1.15g\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%lg\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"%1.17g\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\22\22\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"u%04x\00", align 1

; Function Attrs: noinline nounwind uwtable
define i8* @cJSON_GetErrorPtr() #0 !dbg !83 {
  %1 = load i8*, i8** getelementptr inbounds (%struct.error, %struct.error* @global_error, i32 0, i32 0), align 8, !dbg !84
  %2 = load i64, i64* getelementptr inbounds (%struct.error, %struct.error* @global_error, i32 0, i32 1), align 8, !dbg !85
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2, !dbg !86
  ret i8* %add.ptr, !dbg !87
}

; Function Attrs: noinline nounwind uwtable
define i8* @cJSON_GetStringValue(%struct.cJSON* %item) #0 !dbg !88 {
  %retval = alloca i8*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !91, metadata !92), !dbg !93
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !94
  %call = call i32 @cJSON_IsString(%struct.cJSON* %1), !dbg !96
  %tobool = icmp ne i32 %call, 0, !dbg !96
  br i1 %tobool, label %3, label %2, !dbg !97

; <label>:2:                                      ; preds = %0
  store i8* null, i8** %retval, align 8, !dbg !98
  br label %6, !dbg !98

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !100
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 4, !dbg !101
  %5 = load i8*, i8** %valuestring, align 8, !dbg !101
  store i8* %5, i8** %retval, align 8, !dbg !102
  br label %6, !dbg !102

; <label>:6:                                      ; preds = %3, %2
  %7 = load i8*, i8** %retval, align 8, !dbg !103
  ret i8* %7, !dbg !103
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsString(%struct.cJSON* %item) #0 !dbg !104 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !107, metadata !92), !dbg !108
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !109
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !111
  br i1 %cmp, label %2, label %3, !dbg !112

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !113
  br label %6, !dbg !113

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !115
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !116
  %5 = load i32, i32* %type, align 8, !dbg !116
  %and = and i32 %5, 255, !dbg !117
  %cmp1 = icmp eq i32 %and, 16, !dbg !118
  %conv = zext i1 %cmp1 to i32, !dbg !118
  store i32 %conv, i32* %retval, align 4, !dbg !119
  br label %6, !dbg !119

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !120
  ret i32 %7, !dbg !120
}

; Function Attrs: noinline nounwind uwtable
define i8* @cJSON_Version() #0 !dbg !40 {
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @cJSON_Version.version, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 1, i32 7, i32 8) #7, !dbg !121
  ret i8* getelementptr inbounds ([15 x i8], [15 x i8]* @cJSON_Version.version, i32 0, i32 0), !dbg !122
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define void @cJSON_InitHooks(%struct.cJSON_Hooks* %hooks) #0 !dbg !123 {
  %hooks.addr = alloca %struct.cJSON_Hooks*, align 8
  store %struct.cJSON_Hooks* %hooks, %struct.cJSON_Hooks** %hooks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON_Hooks** %hooks.addr, metadata !132, metadata !92), !dbg !133
  %1 = load %struct.cJSON_Hooks*, %struct.cJSON_Hooks** %hooks.addr, align 8, !dbg !134
  %cmp = icmp eq %struct.cJSON_Hooks* %1, null, !dbg !136
  br i1 %cmp, label %2, label %3, !dbg !137

; <label>:2:                                      ; preds = %0
  store i8* (i64)* @malloc, i8* (i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 0), align 8, !dbg !138
  store void (i8*)* @free, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !140
  store i8* (i8*, i64)* @realloc, i8* (i8*, i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 2), align 8, !dbg !141
  br label %20, !dbg !142

; <label>:3:                                      ; preds = %0
  store i8* (i64)* @malloc, i8* (i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 0), align 8, !dbg !143
  %4 = load %struct.cJSON_Hooks*, %struct.cJSON_Hooks** %hooks.addr, align 8, !dbg !144
  %malloc_fn = getelementptr inbounds %struct.cJSON_Hooks, %struct.cJSON_Hooks* %4, i32 0, i32 0, !dbg !146
  %5 = load i8* (i64)*, i8* (i64)** %malloc_fn, align 8, !dbg !146
  %cmp1 = icmp ne i8* (i64)* %5, null, !dbg !147
  br i1 %cmp1, label %6, label %9, !dbg !148

; <label>:6:                                      ; preds = %3
  %7 = load %struct.cJSON_Hooks*, %struct.cJSON_Hooks** %hooks.addr, align 8, !dbg !149
  %malloc_fn2 = getelementptr inbounds %struct.cJSON_Hooks, %struct.cJSON_Hooks* %7, i32 0, i32 0, !dbg !151
  %8 = load i8* (i64)*, i8* (i64)** %malloc_fn2, align 8, !dbg !151
  store i8* (i64)* %8, i8* (i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 0), align 8, !dbg !152
  br label %9, !dbg !153

; <label>:9:                                      ; preds = %6, %3
  store void (i8*)* @free, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !154
  %10 = load %struct.cJSON_Hooks*, %struct.cJSON_Hooks** %hooks.addr, align 8, !dbg !155
  %free_fn = getelementptr inbounds %struct.cJSON_Hooks, %struct.cJSON_Hooks* %10, i32 0, i32 1, !dbg !157
  %11 = load void (i8*)*, void (i8*)** %free_fn, align 8, !dbg !157
  %cmp3 = icmp ne void (i8*)* %11, null, !dbg !158
  br i1 %cmp3, label %12, label %15, !dbg !159

; <label>:12:                                     ; preds = %9
  %13 = load %struct.cJSON_Hooks*, %struct.cJSON_Hooks** %hooks.addr, align 8, !dbg !160
  %free_fn4 = getelementptr inbounds %struct.cJSON_Hooks, %struct.cJSON_Hooks* %13, i32 0, i32 1, !dbg !162
  %14 = load void (i8*)*, void (i8*)** %free_fn4, align 8, !dbg !162
  store void (i8*)* %14, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !163
  br label %15, !dbg !164

; <label>:15:                                     ; preds = %12, %9
  store i8* (i8*, i64)* null, i8* (i8*, i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 2), align 8, !dbg !165
  %16 = load i8* (i64)*, i8* (i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 0), align 8, !dbg !166
  %cmp5 = icmp eq i8* (i64)* %16, @malloc, !dbg !168
  br i1 %cmp5, label %17, label %20, !dbg !169

; <label>:17:                                     ; preds = %15
  %18 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !170
  %cmp6 = icmp eq void (i8*)* %18, @free, !dbg !172
  br i1 %cmp6, label %19, label %20, !dbg !173

; <label>:19:                                     ; preds = %17
  store i8* (i8*, i64)* @realloc, i8* (i8*, i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 2), align 8, !dbg !175
  br label %20, !dbg !177

; <label>:20:                                     ; preds = %2, %19, %17, %15
  ret void, !dbg !178
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define void @cJSON_Delete(%struct.cJSON* %item) #0 !dbg !179 {
  %item.addr = alloca %struct.cJSON*, align 8
  %next = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !182, metadata !92), !dbg !183
  call void @llvm.dbg.declare(metadata %struct.cJSON** %next, metadata !184, metadata !92), !dbg !185
  store %struct.cJSON* null, %struct.cJSON** %next, align 8, !dbg !185
  br label %1, !dbg !186

; <label>:1:                                      ; preds = %34, %0
  %2 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !187
  %cmp = icmp ne %struct.cJSON* %2, null, !dbg !189
  br i1 %cmp, label %3, label %39, !dbg !190

; <label>:3:                                      ; preds = %1
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !191
  %next1 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 0, !dbg !193
  %5 = load %struct.cJSON*, %struct.cJSON** %next1, align 8, !dbg !193
  store %struct.cJSON* %5, %struct.cJSON** %next, align 8, !dbg !194
  %6 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !195
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i32 0, i32 3, !dbg !197
  %7 = load i32, i32* %type, align 8, !dbg !197
  %and = and i32 %7, 256, !dbg !198
  %tobool = icmp ne i32 %and, 0, !dbg !198
  br i1 %tobool, label %14, label %8, !dbg !199

; <label>:8:                                      ; preds = %3
  %9 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !200
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i32 0, i32 2, !dbg !202
  %10 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !202
  %cmp2 = icmp ne %struct.cJSON* %10, null, !dbg !203
  br i1 %cmp2, label %11, label %14, !dbg !204

; <label>:11:                                     ; preds = %8
  %12 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !206
  %child3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %12, i32 0, i32 2, !dbg !208
  %13 = load %struct.cJSON*, %struct.cJSON** %child3, align 8, !dbg !208
  call void @cJSON_Delete(%struct.cJSON* %13), !dbg !209
  br label %14, !dbg !210

; <label>:14:                                     ; preds = %11, %8, %3
  %15 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !211
  %type4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %15, i32 0, i32 3, !dbg !213
  %16 = load i32, i32* %type4, align 8, !dbg !213
  %and5 = and i32 %16, 256, !dbg !214
  %tobool6 = icmp ne i32 %and5, 0, !dbg !214
  br i1 %tobool6, label %24, label %17, !dbg !215

; <label>:17:                                     ; preds = %14
  %18 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !216
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %18, i32 0, i32 4, !dbg !218
  %19 = load i8*, i8** %valuestring, align 8, !dbg !218
  %cmp7 = icmp ne i8* %19, null, !dbg !219
  br i1 %cmp7, label %20, label %24, !dbg !220

; <label>:20:                                     ; preds = %17
  %21 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !221
  %22 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !223
  %valuestring8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %22, i32 0, i32 4, !dbg !224
  %23 = load i8*, i8** %valuestring8, align 8, !dbg !224
  call void %21(i8* %23), !dbg !225
  br label %24, !dbg !226

; <label>:24:                                     ; preds = %20, %17, %14
  %25 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !227
  %type9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %25, i32 0, i32 3, !dbg !229
  %26 = load i32, i32* %type9, align 8, !dbg !229
  %and10 = and i32 %26, 512, !dbg !230
  %tobool11 = icmp ne i32 %and10, 0, !dbg !230
  br i1 %tobool11, label %34, label %27, !dbg !231

; <label>:27:                                     ; preds = %24
  %28 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !232
  %string = getelementptr inbounds %struct.cJSON, %struct.cJSON* %28, i32 0, i32 7, !dbg !234
  %29 = load i8*, i8** %string, align 8, !dbg !234
  %cmp12 = icmp ne i8* %29, null, !dbg !235
  br i1 %cmp12, label %30, label %34, !dbg !236

; <label>:30:                                     ; preds = %27
  %31 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !237
  %32 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !239
  %string13 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %32, i32 0, i32 7, !dbg !240
  %33 = load i8*, i8** %string13, align 8, !dbg !240
  call void %31(i8* %33), !dbg !241
  br label %34, !dbg !242

; <label>:34:                                     ; preds = %30, %27, %24
  %35 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !243
  %36 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !244
  %37 = bitcast %struct.cJSON* %36 to i8*, !dbg !244
  call void %35(i8* %37), !dbg !245
  %38 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !246
  store %struct.cJSON* %38, %struct.cJSON** %item.addr, align 8, !dbg !247
  br label %1, !dbg !248, !llvm.loop !250

; <label>:39:                                     ; preds = %1
  ret void, !dbg !252
}

; Function Attrs: noinline nounwind uwtable
define double @cJSON_SetNumberHelper(%struct.cJSON* %object, double %number) #0 !dbg !253 {
  %object.addr = alloca %struct.cJSON*, align 8
  %number.addr = alloca double, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !256, metadata !92), !dbg !257
  store double %number, double* %number.addr, align 8
  call void @llvm.dbg.declare(metadata double* %number.addr, metadata !258, metadata !92), !dbg !259
  %1 = load double, double* %number.addr, align 8, !dbg !260
  %cmp = fcmp oge double %1, 0x41DFFFFFFFC00000, !dbg !262
  br i1 %cmp, label %2, label %4, !dbg !263

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !264
  %valueint = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 5, !dbg !266
  store i32 2147483647, i32* %valueint, align 8, !dbg !267
  br label %12, !dbg !268

; <label>:4:                                      ; preds = %0
  %5 = load double, double* %number.addr, align 8, !dbg !269
  %cmp1 = fcmp ole double %5, 0xC1E0000000000000, !dbg !271
  br i1 %cmp1, label %6, label %8, !dbg !272

; <label>:6:                                      ; preds = %4
  %7 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !273
  %valueint2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i32 0, i32 5, !dbg !275
  store i32 -2147483648, i32* %valueint2, align 8, !dbg !276
  br label %11, !dbg !277

; <label>:8:                                      ; preds = %4
  %9 = load double, double* %number.addr, align 8, !dbg !278
  %conv = fptosi double %9 to i32, !dbg !280
  %10 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !281
  %valueint3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %10, i32 0, i32 5, !dbg !282
  store i32 %conv, i32* %valueint3, align 8, !dbg !283
  br label %11

; <label>:11:                                     ; preds = %8, %6
  br label %12

; <label>:12:                                     ; preds = %11, %2
  %13 = load double, double* %number.addr, align 8, !dbg !284
  %14 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !285
  %valuedouble = getelementptr inbounds %struct.cJSON, %struct.cJSON* %14, i32 0, i32 6, !dbg !286
  store double %13, double* %valuedouble, align 8, !dbg !287
  ret double %13, !dbg !288
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_ParseWithOpts(i8* %value, i8** %return_parse_end, i32 %require_null_terminated) #0 !dbg !289 {
  %retval = alloca %struct.cJSON*, align 8
  %value.addr = alloca i8*, align 8
  %return_parse_end.addr = alloca i8**, align 8
  %require_null_terminated.addr = alloca i32, align 4
  %buffer = alloca %struct.parse_buffer, align 8
  %item = alloca %struct.cJSON*, align 8
  %local_error = alloca %struct.error, align 8
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !293, metadata !92), !dbg !294
  store i8** %return_parse_end, i8*** %return_parse_end.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %return_parse_end.addr, metadata !295, metadata !92), !dbg !296
  store i32 %require_null_terminated, i32* %require_null_terminated.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %require_null_terminated.addr, metadata !297, metadata !92), !dbg !298
  call void @llvm.dbg.declare(metadata %struct.parse_buffer* %buffer, metadata !299, metadata !92), !dbg !308
  %1 = bitcast %struct.parse_buffer* %buffer to i8*, !dbg !308
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 56, i32 8, i1 false), !dbg !308
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !309, metadata !92), !dbg !310
  store %struct.cJSON* null, %struct.cJSON** %item, align 8, !dbg !310
  store i8* null, i8** getelementptr inbounds (%struct.error, %struct.error* @global_error, i32 0, i32 0), align 8, !dbg !311
  store i64 0, i64* getelementptr inbounds (%struct.error, %struct.error* @global_error, i32 0, i32 1), align 8, !dbg !312
  %2 = load i8*, i8** %value.addr, align 8, !dbg !313
  %cmp = icmp eq i8* %2, null, !dbg !315
  br i1 %cmp, label %3, label %4, !dbg !316

; <label>:3:                                      ; preds = %0
  br label %32, !dbg !317

; <label>:4:                                      ; preds = %0
  %5 = load i8*, i8** %value.addr, align 8, !dbg !319
  %content = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 0, !dbg !320
  store i8* %5, i8** %content, align 8, !dbg !321
  %6 = load i8*, i8** %value.addr, align 8, !dbg !322
  %call = call i64 @strlen(i8* %6) #8, !dbg !323
  %add = add i64 %call, 1, !dbg !324
  %length = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 1, !dbg !325
  store i64 %add, i64* %length, align 8, !dbg !326
  %offset = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 2, !dbg !327
  store i64 0, i64* %offset, align 8, !dbg !328
  %hooks = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 4, !dbg !329
  %7 = bitcast %struct.internal_hooks* %hooks to i8*, !dbg !330
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.internal_hooks* @global_hooks to i8*), i64 24, i32 8, i1 false), !dbg !330
  %call1 = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !331
  store %struct.cJSON* %call1, %struct.cJSON** %item, align 8, !dbg !332
  %8 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !333
  %cmp2 = icmp eq %struct.cJSON* %8, null, !dbg !335
  br i1 %cmp2, label %9, label %10, !dbg !336

; <label>:9:                                      ; preds = %4
  br label %32, !dbg !337

; <label>:10:                                     ; preds = %4
  %11 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !339
  %call3 = call %struct.parse_buffer* @skip_utf8_bom(%struct.parse_buffer* %buffer), !dbg !341
  %call4 = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %call3), !dbg !342
  %call5 = call i32 @parse_value(%struct.cJSON* %11, %struct.parse_buffer* %call4), !dbg !344
  %tobool = icmp ne i32 %call5, 0, !dbg !346
  br i1 %tobool, label %13, label %12, !dbg !347

; <label>:12:                                     ; preds = %10
  br label %32, !dbg !348

; <label>:13:                                     ; preds = %10
  %14 = load i32, i32* %require_null_terminated.addr, align 4, !dbg !350
  %tobool6 = icmp ne i32 %14, 0, !dbg !350
  br i1 %tobool6, label %15, label %24, !dbg !352

; <label>:15:                                     ; preds = %13
  %call7 = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %buffer), !dbg !353
  %offset8 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 2, !dbg !355
  %16 = load i64, i64* %offset8, align 8, !dbg !355
  %length9 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 1, !dbg !357
  %17 = load i64, i64* %length9, align 8, !dbg !357
  %cmp10 = icmp uge i64 %16, %17, !dbg !358
  br i1 %cmp10, label %22, label %18, !dbg !359

; <label>:18:                                     ; preds = %15
  %content11 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 0, !dbg !360
  %19 = load i8*, i8** %content11, align 8, !dbg !360
  %offset12 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 2, !dbg !360
  %20 = load i64, i64* %offset12, align 8, !dbg !360
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 %20, !dbg !360
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 0, !dbg !360
  %21 = load i8, i8* %arrayidx, align 1, !dbg !360
  %conv = zext i8 %21 to i32, !dbg !360
  %cmp13 = icmp ne i32 %conv, 0, !dbg !362
  br i1 %cmp13, label %22, label %23, !dbg !363

; <label>:22:                                     ; preds = %18, %15
  br label %32, !dbg !365

; <label>:23:                                     ; preds = %18
  br label %24, !dbg !367

; <label>:24:                                     ; preds = %23, %13
  %25 = load i8**, i8*** %return_parse_end.addr, align 8, !dbg !368
  %tobool15 = icmp ne i8** %25, null, !dbg !368
  br i1 %tobool15, label %26, label %30, !dbg !370

; <label>:26:                                     ; preds = %24
  %content16 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 0, !dbg !371
  %27 = load i8*, i8** %content16, align 8, !dbg !371
  %offset17 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 2, !dbg !371
  %28 = load i64, i64* %offset17, align 8, !dbg !371
  %add.ptr18 = getelementptr inbounds i8, i8* %27, i64 %28, !dbg !371
  %29 = load i8**, i8*** %return_parse_end.addr, align 8, !dbg !373
  store i8* %add.ptr18, i8** %29, align 8, !dbg !374
  br label %30, !dbg !375

; <label>:30:                                     ; preds = %26, %24
  %31 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !376
  store %struct.cJSON* %31, %struct.cJSON** %retval, align 8, !dbg !377
  br label %58, !dbg !377

; <label>:32:                                     ; preds = %22, %12, %9, %3
  %33 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !378
  %cmp19 = icmp ne %struct.cJSON* %33, null, !dbg !380
  br i1 %cmp19, label %34, label %36, !dbg !381

; <label>:34:                                     ; preds = %32
  %35 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !382
  call void @cJSON_Delete(%struct.cJSON* %35), !dbg !384
  br label %36, !dbg !385

; <label>:36:                                     ; preds = %34, %32
  %37 = load i8*, i8** %value.addr, align 8, !dbg !386
  %cmp21 = icmp ne i8* %37, null, !dbg !388
  br i1 %cmp21, label %38, label %57, !dbg !389

; <label>:38:                                     ; preds = %36
  call void @llvm.dbg.declare(metadata %struct.error* %local_error, metadata !390, metadata !92), !dbg !392
  %39 = load i8*, i8** %value.addr, align 8, !dbg !393
  %json = getelementptr inbounds %struct.error, %struct.error* %local_error, i32 0, i32 0, !dbg !394
  store i8* %39, i8** %json, align 8, !dbg !395
  %position = getelementptr inbounds %struct.error, %struct.error* %local_error, i32 0, i32 1, !dbg !396
  store i64 0, i64* %position, align 8, !dbg !397
  %offset23 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 2, !dbg !398
  %40 = load i64, i64* %offset23, align 8, !dbg !398
  %length24 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 1, !dbg !400
  %41 = load i64, i64* %length24, align 8, !dbg !400
  %cmp25 = icmp ult i64 %40, %41, !dbg !401
  br i1 %cmp25, label %42, label %44, !dbg !402

; <label>:42:                                     ; preds = %38
  %offset27 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 2, !dbg !403
  %43 = load i64, i64* %offset27, align 8, !dbg !403
  %position28 = getelementptr inbounds %struct.error, %struct.error* %local_error, i32 0, i32 1, !dbg !405
  store i64 %43, i64* %position28, align 8, !dbg !406
  br label %49, !dbg !407

; <label>:44:                                     ; preds = %38
  %length29 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 1, !dbg !408
  %45 = load i64, i64* %length29, align 8, !dbg !408
  %cmp30 = icmp ugt i64 %45, 0, !dbg !410
  br i1 %cmp30, label %46, label %48, !dbg !411

; <label>:46:                                     ; preds = %44
  %length32 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %buffer, i32 0, i32 1, !dbg !412
  %47 = load i64, i64* %length32, align 8, !dbg !412
  %sub = sub i64 %47, 1, !dbg !414
  %position33 = getelementptr inbounds %struct.error, %struct.error* %local_error, i32 0, i32 1, !dbg !415
  store i64 %sub, i64* %position33, align 8, !dbg !416
  br label %48, !dbg !417

; <label>:48:                                     ; preds = %46, %44
  br label %49

; <label>:49:                                     ; preds = %48, %42
  %50 = load i8**, i8*** %return_parse_end.addr, align 8, !dbg !418
  %cmp34 = icmp ne i8** %50, null, !dbg !420
  br i1 %cmp34, label %51, label %55, !dbg !421

; <label>:51:                                     ; preds = %49
  %json36 = getelementptr inbounds %struct.error, %struct.error* %local_error, i32 0, i32 0, !dbg !422
  %52 = load i8*, i8** %json36, align 8, !dbg !422
  %position37 = getelementptr inbounds %struct.error, %struct.error* %local_error, i32 0, i32 1, !dbg !424
  %53 = load i64, i64* %position37, align 8, !dbg !424
  %add.ptr38 = getelementptr inbounds i8, i8* %52, i64 %53, !dbg !425
  %54 = load i8**, i8*** %return_parse_end.addr, align 8, !dbg !426
  store i8* %add.ptr38, i8** %54, align 8, !dbg !427
  br label %55, !dbg !428

; <label>:55:                                     ; preds = %51, %49
  %56 = bitcast %struct.error* %local_error to i8*, !dbg !429
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.error* @global_error to i8*), i8* %56, i64 16, i32 8, i1 false), !dbg !429
  br label %57, !dbg !430

; <label>:57:                                     ; preds = %55, %36
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !431
  br label %58, !dbg !431

; <label>:58:                                     ; preds = %57, %30
  %59 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !432
  ret %struct.cJSON* %59, !dbg !432
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #3

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* %hooks) #0 !dbg !433 {
  %hooks.addr = alloca %struct.internal_hooks*, align 8
  %node = alloca %struct.cJSON*, align 8
  store %struct.internal_hooks* %hooks, %struct.internal_hooks** %hooks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.internal_hooks** %hooks.addr, metadata !436, metadata !92), !dbg !437
  call void @llvm.dbg.declare(metadata %struct.cJSON** %node, metadata !438, metadata !92), !dbg !439
  %1 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !440
  %allocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %1, i32 0, i32 0, !dbg !441
  %2 = load i8* (i64)*, i8* (i64)** %allocate, align 8, !dbg !441
  %call = call i8* %2(i64 64), !dbg !440
  %3 = bitcast i8* %call to %struct.cJSON*, !dbg !442
  store %struct.cJSON* %3, %struct.cJSON** %node, align 8, !dbg !439
  %4 = load %struct.cJSON*, %struct.cJSON** %node, align 8, !dbg !443
  %tobool = icmp ne %struct.cJSON* %4, null, !dbg !443
  br i1 %tobool, label %5, label %8, !dbg !445

; <label>:5:                                      ; preds = %0
  %6 = load %struct.cJSON*, %struct.cJSON** %node, align 8, !dbg !446
  %7 = bitcast %struct.cJSON* %6 to i8*, !dbg !448
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 64, i32 8, i1 false), !dbg !448
  br label %8, !dbg !449

; <label>:8:                                      ; preds = %5, %0
  %9 = load %struct.cJSON*, %struct.cJSON** %node, align 8, !dbg !450
  ret %struct.cJSON* %9, !dbg !451
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @parse_value(%struct.cJSON* %item, %struct.parse_buffer* %input_buffer) #0 !dbg !452 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %input_buffer.addr = alloca %struct.parse_buffer*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !458, metadata !92), !dbg !459
  store %struct.parse_buffer* %input_buffer, %struct.parse_buffer** %input_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.parse_buffer** %input_buffer.addr, metadata !460, metadata !92), !dbg !461
  %1 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !462
  %cmp = icmp eq %struct.parse_buffer* %1, null, !dbg !464
  br i1 %cmp, label %5, label %2, !dbg !465

; <label>:2:                                      ; preds = %0
  %3 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !466
  %content = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %3, i32 0, i32 0, !dbg !468
  %4 = load i8*, i8** %content, align 8, !dbg !468
  %cmp1 = icmp eq i8* %4, null, !dbg !469
  br i1 %cmp1, label %5, label %6, !dbg !470

; <label>:5:                                      ; preds = %2, %0
  store i32 0, i32* %retval, align 4, !dbg !472
  br label %132, !dbg !472

; <label>:6:                                      ; preds = %2
  %7 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !474
  %cmp2 = icmp ne %struct.parse_buffer* %7, null, !dbg !474
  br i1 %cmp2, label %8, label %22, !dbg !474

; <label>:8:                                      ; preds = %6
  %9 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !476
  %offset = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %9, i32 0, i32 2, !dbg !476
  %10 = load i64, i64* %offset, align 8, !dbg !476
  %add = add i64 %10, 4, !dbg !476
  %11 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !476
  %length = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %11, i32 0, i32 1, !dbg !476
  %12 = load i64, i64* %length, align 8, !dbg !476
  %cmp3 = icmp ule i64 %add, %12, !dbg !476
  br i1 %cmp3, label %13, label %22, !dbg !478

; <label>:13:                                     ; preds = %8
  %14 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !479
  %content4 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %14, i32 0, i32 0, !dbg !479
  %15 = load i8*, i8** %content4, align 8, !dbg !479
  %16 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !479
  %offset5 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %16, i32 0, i32 2, !dbg !479
  %17 = load i64, i64* %offset5, align 8, !dbg !479
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %17, !dbg !479
  %call = call i32 @strncmp(i8* %add.ptr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i64 4) #8, !dbg !481
  %cmp6 = icmp eq i32 %call, 0, !dbg !482
  br i1 %cmp6, label %18, label %22, !dbg !483

; <label>:18:                                     ; preds = %13
  %19 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !485
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %19, i32 0, i32 3, !dbg !487
  store i32 4, i32* %type, align 8, !dbg !488
  %20 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !489
  %offset7 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %20, i32 0, i32 2, !dbg !490
  %21 = load i64, i64* %offset7, align 8, !dbg !491
  %add8 = add i64 %21, 4, !dbg !491
  store i64 %add8, i64* %offset7, align 8, !dbg !491
  store i32 1, i32* %retval, align 4, !dbg !492
  br label %132, !dbg !492

; <label>:22:                                     ; preds = %13, %8, %6
  %23 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !493
  %cmp9 = icmp ne %struct.parse_buffer* %23, null, !dbg !493
  br i1 %cmp9, label %24, label %38, !dbg !493

; <label>:24:                                     ; preds = %22
  %25 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !495
  %offset10 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %25, i32 0, i32 2, !dbg !495
  %26 = load i64, i64* %offset10, align 8, !dbg !495
  %add11 = add i64 %26, 5, !dbg !495
  %27 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !495
  %length12 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %27, i32 0, i32 1, !dbg !495
  %28 = load i64, i64* %length12, align 8, !dbg !495
  %cmp13 = icmp ule i64 %add11, %28, !dbg !495
  br i1 %cmp13, label %29, label %38, !dbg !497

; <label>:29:                                     ; preds = %24
  %30 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !498
  %content14 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %30, i32 0, i32 0, !dbg !498
  %31 = load i8*, i8** %content14, align 8, !dbg !498
  %32 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !498
  %offset15 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %32, i32 0, i32 2, !dbg !498
  %33 = load i64, i64* %offset15, align 8, !dbg !498
  %add.ptr16 = getelementptr inbounds i8, i8* %31, i64 %33, !dbg !498
  %call17 = call i32 @strncmp(i8* %add.ptr16, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i64 5) #8, !dbg !500
  %cmp18 = icmp eq i32 %call17, 0, !dbg !501
  br i1 %cmp18, label %34, label %38, !dbg !502

; <label>:34:                                     ; preds = %29
  %35 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !503
  %type19 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %35, i32 0, i32 3, !dbg !505
  store i32 1, i32* %type19, align 8, !dbg !506
  %36 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !507
  %offset20 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %36, i32 0, i32 2, !dbg !508
  %37 = load i64, i64* %offset20, align 8, !dbg !509
  %add21 = add i64 %37, 5, !dbg !509
  store i64 %add21, i64* %offset20, align 8, !dbg !509
  store i32 1, i32* %retval, align 4, !dbg !510
  br label %132, !dbg !510

; <label>:38:                                     ; preds = %29, %24, %22
  %39 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !511
  %cmp22 = icmp ne %struct.parse_buffer* %39, null, !dbg !511
  br i1 %cmp22, label %40, label %55, !dbg !511

; <label>:40:                                     ; preds = %38
  %41 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !513
  %offset23 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %41, i32 0, i32 2, !dbg !513
  %42 = load i64, i64* %offset23, align 8, !dbg !513
  %add24 = add i64 %42, 4, !dbg !513
  %43 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !513
  %length25 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %43, i32 0, i32 1, !dbg !513
  %44 = load i64, i64* %length25, align 8, !dbg !513
  %cmp26 = icmp ule i64 %add24, %44, !dbg !513
  br i1 %cmp26, label %45, label %55, !dbg !515

; <label>:45:                                     ; preds = %40
  %46 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !516
  %content27 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %46, i32 0, i32 0, !dbg !516
  %47 = load i8*, i8** %content27, align 8, !dbg !516
  %48 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !516
  %offset28 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %48, i32 0, i32 2, !dbg !516
  %49 = load i64, i64* %offset28, align 8, !dbg !516
  %add.ptr29 = getelementptr inbounds i8, i8* %47, i64 %49, !dbg !516
  %call30 = call i32 @strncmp(i8* %add.ptr29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 4) #8, !dbg !518
  %cmp31 = icmp eq i32 %call30, 0, !dbg !519
  br i1 %cmp31, label %50, label %55, !dbg !520

; <label>:50:                                     ; preds = %45
  %51 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !521
  %type32 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %51, i32 0, i32 3, !dbg !523
  store i32 2, i32* %type32, align 8, !dbg !524
  %52 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !525
  %valueint = getelementptr inbounds %struct.cJSON, %struct.cJSON* %52, i32 0, i32 5, !dbg !526
  store i32 1, i32* %valueint, align 8, !dbg !527
  %53 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !528
  %offset33 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %53, i32 0, i32 2, !dbg !529
  %54 = load i64, i64* %offset33, align 8, !dbg !530
  %add34 = add i64 %54, 4, !dbg !530
  store i64 %add34, i64* %offset33, align 8, !dbg !530
  store i32 1, i32* %retval, align 4, !dbg !531
  br label %132, !dbg !531

; <label>:55:                                     ; preds = %45, %40, %38
  %56 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !532
  %cmp35 = icmp ne %struct.parse_buffer* %56, null, !dbg !532
  br i1 %cmp35, label %57, label %71, !dbg !532

; <label>:57:                                     ; preds = %55
  %58 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !534
  %offset36 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %58, i32 0, i32 2, !dbg !534
  %59 = load i64, i64* %offset36, align 8, !dbg !534
  %add37 = add i64 %59, 0, !dbg !534
  %60 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !534
  %length38 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %60, i32 0, i32 1, !dbg !534
  %61 = load i64, i64* %length38, align 8, !dbg !534
  %cmp39 = icmp ult i64 %add37, %61, !dbg !534
  br i1 %cmp39, label %62, label %71, !dbg !536

; <label>:62:                                     ; preds = %57
  %63 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !537
  %content40 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %63, i32 0, i32 0, !dbg !537
  %64 = load i8*, i8** %content40, align 8, !dbg !537
  %65 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !537
  %offset41 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %65, i32 0, i32 2, !dbg !537
  %66 = load i64, i64* %offset41, align 8, !dbg !537
  %add.ptr42 = getelementptr inbounds i8, i8* %64, i64 %66, !dbg !537
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr42, i64 0, !dbg !537
  %67 = load i8, i8* %arrayidx, align 1, !dbg !537
  %conv = zext i8 %67 to i32, !dbg !537
  %cmp43 = icmp eq i32 %conv, 34, !dbg !539
  br i1 %cmp43, label %68, label %71, !dbg !540

; <label>:68:                                     ; preds = %62
  %69 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !541
  %70 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !543
  %call45 = call i32 @parse_string(%struct.cJSON* %69, %struct.parse_buffer* %70), !dbg !544
  store i32 %call45, i32* %retval, align 4, !dbg !545
  br label %132, !dbg !545

; <label>:71:                                     ; preds = %62, %57, %55
  %72 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !546
  %cmp46 = icmp ne %struct.parse_buffer* %72, null, !dbg !546
  br i1 %cmp46, label %73, label %99, !dbg !546

; <label>:73:                                     ; preds = %71
  %74 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !548
  %offset48 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %74, i32 0, i32 2, !dbg !548
  %75 = load i64, i64* %offset48, align 8, !dbg !548
  %add49 = add i64 %75, 0, !dbg !548
  %76 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !548
  %length50 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %76, i32 0, i32 1, !dbg !548
  %77 = load i64, i64* %length50, align 8, !dbg !548
  %cmp51 = icmp ult i64 %add49, %77, !dbg !548
  br i1 %cmp51, label %78, label %99, !dbg !550

; <label>:78:                                     ; preds = %73
  %79 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !551
  %content53 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %79, i32 0, i32 0, !dbg !551
  %80 = load i8*, i8** %content53, align 8, !dbg !551
  %81 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !551
  %offset54 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %81, i32 0, i32 2, !dbg !551
  %82 = load i64, i64* %offset54, align 8, !dbg !551
  %add.ptr55 = getelementptr inbounds i8, i8* %80, i64 %82, !dbg !551
  %arrayidx56 = getelementptr inbounds i8, i8* %add.ptr55, i64 0, !dbg !551
  %83 = load i8, i8* %arrayidx56, align 1, !dbg !551
  %conv57 = zext i8 %83 to i32, !dbg !551
  %cmp58 = icmp eq i32 %conv57, 45, !dbg !553
  br i1 %cmp58, label %96, label %84, !dbg !554

; <label>:84:                                     ; preds = %78
  %85 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !555
  %content60 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %85, i32 0, i32 0, !dbg !555
  %86 = load i8*, i8** %content60, align 8, !dbg !555
  %87 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !555
  %offset61 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %87, i32 0, i32 2, !dbg !555
  %88 = load i64, i64* %offset61, align 8, !dbg !555
  %add.ptr62 = getelementptr inbounds i8, i8* %86, i64 %88, !dbg !555
  %arrayidx63 = getelementptr inbounds i8, i8* %add.ptr62, i64 0, !dbg !555
  %89 = load i8, i8* %arrayidx63, align 1, !dbg !555
  %conv64 = zext i8 %89 to i32, !dbg !555
  %cmp65 = icmp sge i32 %conv64, 48, !dbg !557
  br i1 %cmp65, label %90, label %99, !dbg !558

; <label>:90:                                     ; preds = %84
  %91 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !559
  %content67 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %91, i32 0, i32 0, !dbg !559
  %92 = load i8*, i8** %content67, align 8, !dbg !559
  %93 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !559
  %offset68 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %93, i32 0, i32 2, !dbg !559
  %94 = load i64, i64* %offset68, align 8, !dbg !559
  %add.ptr69 = getelementptr inbounds i8, i8* %92, i64 %94, !dbg !559
  %arrayidx70 = getelementptr inbounds i8, i8* %add.ptr69, i64 0, !dbg !559
  %95 = load i8, i8* %arrayidx70, align 1, !dbg !559
  %conv71 = zext i8 %95 to i32, !dbg !559
  %cmp72 = icmp sle i32 %conv71, 57, !dbg !561
  br i1 %cmp72, label %96, label %99, !dbg !562

; <label>:96:                                     ; preds = %90, %78
  %97 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !564
  %98 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !566
  %call74 = call i32 @parse_number(%struct.cJSON* %97, %struct.parse_buffer* %98), !dbg !567
  store i32 %call74, i32* %retval, align 4, !dbg !568
  br label %132, !dbg !568

; <label>:99:                                     ; preds = %90, %84, %73, %71
  %100 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !569
  %cmp75 = icmp ne %struct.parse_buffer* %100, null, !dbg !569
  br i1 %cmp75, label %101, label %115, !dbg !569

; <label>:101:                                    ; preds = %99
  %102 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !571
  %offset77 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %102, i32 0, i32 2, !dbg !571
  %103 = load i64, i64* %offset77, align 8, !dbg !571
  %add78 = add i64 %103, 0, !dbg !571
  %104 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !571
  %length79 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %104, i32 0, i32 1, !dbg !571
  %105 = load i64, i64* %length79, align 8, !dbg !571
  %cmp80 = icmp ult i64 %add78, %105, !dbg !571
  br i1 %cmp80, label %106, label %115, !dbg !573

; <label>:106:                                    ; preds = %101
  %107 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !574
  %content82 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %107, i32 0, i32 0, !dbg !574
  %108 = load i8*, i8** %content82, align 8, !dbg !574
  %109 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !574
  %offset83 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %109, i32 0, i32 2, !dbg !574
  %110 = load i64, i64* %offset83, align 8, !dbg !574
  %add.ptr84 = getelementptr inbounds i8, i8* %108, i64 %110, !dbg !574
  %arrayidx85 = getelementptr inbounds i8, i8* %add.ptr84, i64 0, !dbg !574
  %111 = load i8, i8* %arrayidx85, align 1, !dbg !574
  %conv86 = zext i8 %111 to i32, !dbg !574
  %cmp87 = icmp eq i32 %conv86, 91, !dbg !576
  br i1 %cmp87, label %112, label %115, !dbg !577

; <label>:112:                                    ; preds = %106
  %113 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !578
  %114 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !580
  %call89 = call i32 @parse_array(%struct.cJSON* %113, %struct.parse_buffer* %114), !dbg !581
  store i32 %call89, i32* %retval, align 4, !dbg !582
  br label %132, !dbg !582

; <label>:115:                                    ; preds = %106, %101, %99
  %116 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !583
  %cmp90 = icmp ne %struct.parse_buffer* %116, null, !dbg !583
  br i1 %cmp90, label %117, label %131, !dbg !583

; <label>:117:                                    ; preds = %115
  %118 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !585
  %offset92 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %118, i32 0, i32 2, !dbg !585
  %119 = load i64, i64* %offset92, align 8, !dbg !585
  %add93 = add i64 %119, 0, !dbg !585
  %120 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !585
  %length94 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %120, i32 0, i32 1, !dbg !585
  %121 = load i64, i64* %length94, align 8, !dbg !585
  %cmp95 = icmp ult i64 %add93, %121, !dbg !585
  br i1 %cmp95, label %122, label %131, !dbg !587

; <label>:122:                                    ; preds = %117
  %123 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !588
  %content97 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %123, i32 0, i32 0, !dbg !588
  %124 = load i8*, i8** %content97, align 8, !dbg !588
  %125 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !588
  %offset98 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %125, i32 0, i32 2, !dbg !588
  %126 = load i64, i64* %offset98, align 8, !dbg !588
  %add.ptr99 = getelementptr inbounds i8, i8* %124, i64 %126, !dbg !588
  %arrayidx100 = getelementptr inbounds i8, i8* %add.ptr99, i64 0, !dbg !588
  %127 = load i8, i8* %arrayidx100, align 1, !dbg !588
  %conv101 = zext i8 %127 to i32, !dbg !588
  %cmp102 = icmp eq i32 %conv101, 123, !dbg !590
  br i1 %cmp102, label %128, label %131, !dbg !591

; <label>:128:                                    ; preds = %122
  %129 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !592
  %130 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !594
  %call104 = call i32 @parse_object(%struct.cJSON* %129, %struct.parse_buffer* %130), !dbg !595
  store i32 %call104, i32* %retval, align 4, !dbg !596
  br label %132, !dbg !596

; <label>:131:                                    ; preds = %122, %117, %115
  store i32 0, i32* %retval, align 4, !dbg !597
  br label %132, !dbg !597

; <label>:132:                                    ; preds = %131, %128, %112, %96, %68, %50, %34, %18, %5
  %133 = load i32, i32* %retval, align 4, !dbg !598
  ret i32 %133, !dbg !598
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %buffer) #0 !dbg !599 {
  %retval = alloca %struct.parse_buffer*, align 8
  %buffer.addr = alloca %struct.parse_buffer*, align 8
  store %struct.parse_buffer* %buffer, %struct.parse_buffer** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.parse_buffer** %buffer.addr, metadata !602, metadata !92), !dbg !603
  %1 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !604
  %cmp = icmp eq %struct.parse_buffer* %1, null, !dbg !606
  br i1 %cmp, label %5, label %2, !dbg !607

; <label>:2:                                      ; preds = %0
  %3 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !608
  %content = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %3, i32 0, i32 0, !dbg !610
  %4 = load i8*, i8** %content, align 8, !dbg !610
  %cmp1 = icmp eq i8* %4, null, !dbg !611
  br i1 %cmp1, label %5, label %6, !dbg !612

; <label>:5:                                      ; preds = %2, %0
  store %struct.parse_buffer* null, %struct.parse_buffer** %retval, align 8, !dbg !614
  br label %35, !dbg !614

; <label>:6:                                      ; preds = %2
  br label %7, !dbg !616

; <label>:7:                                      ; preds = %22, %6
  %8 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !617
  %cmp2 = icmp ne %struct.parse_buffer* %8, null, !dbg !617
  br i1 %cmp2, label %9, label %20, !dbg !617

; <label>:9:                                      ; preds = %7
  %10 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !618
  %offset = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %10, i32 0, i32 2, !dbg !618
  %11 = load i64, i64* %offset, align 8, !dbg !618
  %add = add i64 %11, 0, !dbg !618
  %12 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !618
  %length = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %12, i32 0, i32 1, !dbg !618
  %13 = load i64, i64* %length, align 8, !dbg !618
  %cmp3 = icmp ult i64 %add, %13, !dbg !618
  br i1 %cmp3, label %14, label %20, !dbg !620

; <label>:14:                                     ; preds = %9
  %15 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !621
  %content4 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %15, i32 0, i32 0, !dbg !621
  %16 = load i8*, i8** %content4, align 8, !dbg !621
  %17 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !621
  %offset5 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %17, i32 0, i32 2, !dbg !621
  %18 = load i64, i64* %offset5, align 8, !dbg !621
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %18, !dbg !621
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 0, !dbg !621
  %19 = load i8, i8* %arrayidx, align 1, !dbg !621
  %conv = zext i8 %19 to i32, !dbg !621
  %cmp6 = icmp sle i32 %conv, 32, !dbg !623
  br label %20

; <label>:20:                                     ; preds = %14, %9, %7
  %21 = phi i1 [ false, %9 ], [ false, %7 ], [ %cmp6, %14 ]
  br i1 %21, label %22, label %25, !dbg !624

; <label>:22:                                     ; preds = %20
  %23 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !626
  %offset8 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %23, i32 0, i32 2, !dbg !628
  %24 = load i64, i64* %offset8, align 8, !dbg !629
  %inc = add i64 %24, 1, !dbg !629
  store i64 %inc, i64* %offset8, align 8, !dbg !629
  br label %7, !dbg !630, !llvm.loop !632

; <label>:25:                                     ; preds = %20
  %26 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !634
  %offset9 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %26, i32 0, i32 2, !dbg !636
  %27 = load i64, i64* %offset9, align 8, !dbg !636
  %28 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !637
  %length10 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %28, i32 0, i32 1, !dbg !638
  %29 = load i64, i64* %length10, align 8, !dbg !638
  %cmp11 = icmp eq i64 %27, %29, !dbg !639
  br i1 %cmp11, label %30, label %33, !dbg !640

; <label>:30:                                     ; preds = %25
  %31 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !641
  %offset13 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %31, i32 0, i32 2, !dbg !643
  %32 = load i64, i64* %offset13, align 8, !dbg !644
  %dec = add i64 %32, -1, !dbg !644
  store i64 %dec, i64* %offset13, align 8, !dbg !644
  br label %33, !dbg !645

; <label>:33:                                     ; preds = %30, %25
  %34 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !646
  store %struct.parse_buffer* %34, %struct.parse_buffer** %retval, align 8, !dbg !647
  br label %35, !dbg !647

; <label>:35:                                     ; preds = %33, %5
  %36 = load %struct.parse_buffer*, %struct.parse_buffer** %retval, align 8, !dbg !648
  ret %struct.parse_buffer* %36, !dbg !648
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.parse_buffer* @skip_utf8_bom(%struct.parse_buffer* %buffer) #0 !dbg !649 {
  %retval = alloca %struct.parse_buffer*, align 8
  %buffer.addr = alloca %struct.parse_buffer*, align 8
  store %struct.parse_buffer* %buffer, %struct.parse_buffer** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.parse_buffer** %buffer.addr, metadata !650, metadata !92), !dbg !651
  %1 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !652
  %cmp = icmp eq %struct.parse_buffer* %1, null, !dbg !654
  br i1 %cmp, label %8, label %2, !dbg !655

; <label>:2:                                      ; preds = %0
  %3 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !656
  %content = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %3, i32 0, i32 0, !dbg !658
  %4 = load i8*, i8** %content, align 8, !dbg !658
  %cmp1 = icmp eq i8* %4, null, !dbg !659
  br i1 %cmp1, label %8, label %5, !dbg !660

; <label>:5:                                      ; preds = %2
  %6 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !661
  %offset = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %6, i32 0, i32 2, !dbg !663
  %7 = load i64, i64* %offset, align 8, !dbg !663
  %cmp2 = icmp ne i64 %7, 0, !dbg !664
  br i1 %cmp2, label %8, label %9, !dbg !665

; <label>:8:                                      ; preds = %5, %2, %0
  store %struct.parse_buffer* null, %struct.parse_buffer** %retval, align 8, !dbg !667
  br label %26, !dbg !667

; <label>:9:                                      ; preds = %5
  %10 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !669
  %cmp3 = icmp ne %struct.parse_buffer* %10, null, !dbg !669
  br i1 %cmp3, label %11, label %24, !dbg !669

; <label>:11:                                     ; preds = %9
  %12 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !671
  %offset4 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %12, i32 0, i32 2, !dbg !671
  %13 = load i64, i64* %offset4, align 8, !dbg !671
  %add = add i64 %13, 4, !dbg !671
  %14 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !671
  %length = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %14, i32 0, i32 1, !dbg !671
  %15 = load i64, i64* %length, align 8, !dbg !671
  %cmp5 = icmp ult i64 %add, %15, !dbg !671
  br i1 %cmp5, label %16, label %24, !dbg !673

; <label>:16:                                     ; preds = %11
  %17 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !674
  %content6 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %17, i32 0, i32 0, !dbg !674
  %18 = load i8*, i8** %content6, align 8, !dbg !674
  %19 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !674
  %offset7 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %19, i32 0, i32 2, !dbg !674
  %20 = load i64, i64* %offset7, align 8, !dbg !674
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %20, !dbg !674
  %call = call i32 @strncmp(i8* %add.ptr, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i64 3) #8, !dbg !676
  %cmp8 = icmp eq i32 %call, 0, !dbg !677
  br i1 %cmp8, label %21, label %24, !dbg !678

; <label>:21:                                     ; preds = %16
  %22 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !679
  %offset9 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %22, i32 0, i32 2, !dbg !681
  %23 = load i64, i64* %offset9, align 8, !dbg !682
  %add10 = add i64 %23, 3, !dbg !682
  store i64 %add10, i64* %offset9, align 8, !dbg !682
  br label %24, !dbg !683

; <label>:24:                                     ; preds = %21, %16, %11, %9
  %25 = load %struct.parse_buffer*, %struct.parse_buffer** %buffer.addr, align 8, !dbg !684
  store %struct.parse_buffer* %25, %struct.parse_buffer** %retval, align 8, !dbg !685
  br label %26, !dbg !685

; <label>:26:                                     ; preds = %24, %8
  %27 = load %struct.parse_buffer*, %struct.parse_buffer** %retval, align 8, !dbg !686
  ret %struct.parse_buffer* %27, !dbg !686
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_Parse(i8* %value) #0 !dbg !687 {
  %value.addr = alloca i8*, align 8
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !690, metadata !92), !dbg !691
  %1 = load i8*, i8** %value.addr, align 8, !dbg !692
  %call = call %struct.cJSON* @cJSON_ParseWithOpts(i8* %1, i8** null, i32 0), !dbg !693
  ret %struct.cJSON* %call, !dbg !694
}

; Function Attrs: noinline nounwind uwtable
define i8* @cJSON_Print(%struct.cJSON* %item) #0 !dbg !695 {
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !698, metadata !92), !dbg !699
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !700
  %call = call i8* @print(%struct.cJSON* %1, i32 1, %struct.internal_hooks* @global_hooks), !dbg !701
  ret i8* %call, !dbg !702
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @print(%struct.cJSON* %item, i32 %format, %struct.internal_hooks* %hooks) #0 !dbg !65 {
  %retval = alloca i8*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  %format.addr = alloca i32, align 4
  %hooks.addr = alloca %struct.internal_hooks*, align 8
  %buffer = alloca [1 x %struct.printbuffer], align 16
  %printed = alloca i8*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !703, metadata !92), !dbg !704
  store i32 %format, i32* %format.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %format.addr, metadata !705, metadata !92), !dbg !706
  store %struct.internal_hooks* %hooks, %struct.internal_hooks** %hooks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.internal_hooks** %hooks.addr, metadata !707, metadata !92), !dbg !708
  call void @llvm.dbg.declare(metadata [1 x %struct.printbuffer]* %buffer, metadata !709, metadata !92), !dbg !723
  call void @llvm.dbg.declare(metadata i8** %printed, metadata !724, metadata !92), !dbg !725
  store i8* null, i8** %printed, align 8, !dbg !725
  %arraydecay = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !726
  %1 = bitcast %struct.printbuffer* %arraydecay to i8*, !dbg !726
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 64, i32 16, i1 false), !dbg !726
  %2 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !727
  %allocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %2, i32 0, i32 0, !dbg !728
  %3 = load i8* (i64)*, i8* (i64)** %allocate, align 8, !dbg !728
  %call = call i8* %3(i64 256), !dbg !727
  %arraydecay1 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !729
  %buffer2 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay1, i32 0, i32 0, !dbg !729
  store i8* %call, i8** %buffer2, align 16, !dbg !730
  %arraydecay3 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !731
  %length = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay3, i32 0, i32 1, !dbg !731
  store i64 256, i64* %length, align 8, !dbg !732
  %4 = load i32, i32* %format.addr, align 4, !dbg !733
  %arraydecay4 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !734
  %format5 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay4, i32 0, i32 5, !dbg !734
  store i32 %4, i32* %format5, align 4, !dbg !735
  %arraydecay6 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !736
  %hooks7 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay6, i32 0, i32 6, !dbg !736
  %5 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !737
  %6 = bitcast %struct.internal_hooks* %hooks7 to i8*, !dbg !738
  %7 = bitcast %struct.internal_hooks* %5 to i8*, !dbg !738
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 24, i32 8, i1 false), !dbg !738
  %arraydecay8 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !739
  %buffer9 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay8, i32 0, i32 0, !dbg !739
  %8 = load i8*, i8** %buffer9, align 16, !dbg !739
  %cmp = icmp eq i8* %8, null, !dbg !741
  br i1 %cmp, label %9, label %10, !dbg !742

; <label>:9:                                      ; preds = %0
  br label %47, !dbg !743

; <label>:10:                                     ; preds = %0
  %11 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !745
  %arraydecay10 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !747
  %call11 = call i32 @print_value(%struct.cJSON* %11, %struct.printbuffer* %arraydecay10), !dbg !748
  %tobool = icmp ne i32 %call11, 0, !dbg !748
  br i1 %tobool, label %13, label %12, !dbg !749

; <label>:12:                                     ; preds = %10
  br label %47, !dbg !750

; <label>:13:                                     ; preds = %10
  %arraydecay12 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !752
  call void @update_offset(%struct.printbuffer* %arraydecay12), !dbg !753
  %14 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !754
  %reallocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %14, i32 0, i32 2, !dbg !756
  %15 = load i8* (i8*, i64)*, i8* (i8*, i64)** %reallocate, align 8, !dbg !756
  %cmp13 = icmp ne i8* (i8*, i64)* %15, null, !dbg !757
  br i1 %cmp13, label %16, label %24, !dbg !758

; <label>:16:                                     ; preds = %13
  %17 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !759
  %reallocate14 = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %17, i32 0, i32 2, !dbg !761
  %18 = load i8* (i8*, i64)*, i8* (i8*, i64)** %reallocate14, align 8, !dbg !761
  %arraydecay15 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !762
  %buffer16 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay15, i32 0, i32 0, !dbg !762
  %19 = load i8*, i8** %buffer16, align 16, !dbg !762
  %arraydecay17 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !763
  %offset = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay17, i32 0, i32 2, !dbg !763
  %20 = load i64, i64* %offset, align 16, !dbg !763
  %add = add i64 %20, 1, !dbg !764
  %call18 = call i8* %18(i8* %19, i64 %add), !dbg !759
  store i8* %call18, i8** %printed, align 8, !dbg !765
  %21 = load i8*, i8** %printed, align 8, !dbg !766
  %cmp19 = icmp eq i8* %21, null, !dbg !768
  br i1 %cmp19, label %22, label %23, !dbg !769

; <label>:22:                                     ; preds = %16
  br label %47, !dbg !770

; <label>:23:                                     ; preds = %16
  %arraydecay20 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !772
  %buffer21 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay20, i32 0, i32 0, !dbg !772
  store i8* null, i8** %buffer21, align 16, !dbg !773
  br label %45, !dbg !774

; <label>:24:                                     ; preds = %13
  %25 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !775
  %allocate22 = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %25, i32 0, i32 0, !dbg !777
  %26 = load i8* (i64)*, i8* (i64)** %allocate22, align 8, !dbg !777
  %arraydecay23 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !778
  %offset24 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay23, i32 0, i32 2, !dbg !778
  %27 = load i64, i64* %offset24, align 16, !dbg !778
  %add25 = add i64 %27, 1, !dbg !779
  %call26 = call i8* %26(i64 %add25), !dbg !775
  store i8* %call26, i8** %printed, align 8, !dbg !780
  %28 = load i8*, i8** %printed, align 8, !dbg !781
  %cmp27 = icmp eq i8* %28, null, !dbg !783
  br i1 %cmp27, label %29, label %30, !dbg !784

; <label>:29:                                     ; preds = %24
  br label %47, !dbg !785

; <label>:30:                                     ; preds = %24
  %31 = load i8*, i8** %printed, align 8, !dbg !787
  %arraydecay28 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !788
  %buffer29 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay28, i32 0, i32 0, !dbg !788
  %32 = load i8*, i8** %buffer29, align 16, !dbg !788
  %arraydecay30 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !789
  %length31 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay30, i32 0, i32 1, !dbg !789
  %33 = load i64, i64* %length31, align 8, !dbg !789
  %arraydecay32 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !789
  %offset33 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay32, i32 0, i32 2, !dbg !789
  %34 = load i64, i64* %offset33, align 16, !dbg !789
  %add34 = add i64 %34, 1, !dbg !789
  %cmp35 = icmp ult i64 %33, %add34, !dbg !789
  br i1 %cmp35, label %35, label %37, !dbg !789

; <label>:35:                                     ; preds = %30
  %arraydecay36 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !790
  %length37 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay36, i32 0, i32 1, !dbg !790
  %36 = load i64, i64* %length37, align 8, !dbg !790
  br label %39, !dbg !790

; <label>:37:                                     ; preds = %30
  %arraydecay38 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !792
  %offset39 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay38, i32 0, i32 2, !dbg !792
  %38 = load i64, i64* %offset39, align 16, !dbg !792
  %add40 = add i64 %38, 1, !dbg !792
  br label %39, !dbg !792

; <label>:39:                                     ; preds = %37, %35
  %cond = phi i64 [ %36, %35 ], [ %add40, %37 ], !dbg !794
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 %cond, i32 1, i1 false), !dbg !796
  %40 = load i8*, i8** %printed, align 8, !dbg !797
  %arraydecay41 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !798
  %offset42 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay41, i32 0, i32 2, !dbg !798
  %41 = load i64, i64* %offset42, align 16, !dbg !798
  %arrayidx = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !797
  store i8 0, i8* %arrayidx, align 1, !dbg !799
  %42 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !800
  %deallocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %42, i32 0, i32 1, !dbg !801
  %43 = load void (i8*)*, void (i8*)** %deallocate, align 8, !dbg !801
  %arraydecay43 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !802
  %buffer44 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay43, i32 0, i32 0, !dbg !802
  %44 = load i8*, i8** %buffer44, align 16, !dbg !802
  call void %43(i8* %44), !dbg !800
  br label %45

; <label>:45:                                     ; preds = %39, %23
  %46 = load i8*, i8** %printed, align 8, !dbg !803
  store i8* %46, i8** %retval, align 8, !dbg !804
  br label %60, !dbg !804

; <label>:47:                                     ; preds = %29, %22, %12, %9
  %arraydecay45 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !805
  %buffer46 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay45, i32 0, i32 0, !dbg !805
  %48 = load i8*, i8** %buffer46, align 16, !dbg !805
  %cmp47 = icmp ne i8* %48, null, !dbg !807
  br i1 %cmp47, label %49, label %53, !dbg !808

; <label>:49:                                     ; preds = %47
  %50 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !809
  %deallocate48 = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %50, i32 0, i32 1, !dbg !811
  %51 = load void (i8*)*, void (i8*)** %deallocate48, align 8, !dbg !811
  %arraydecay49 = getelementptr inbounds [1 x %struct.printbuffer], [1 x %struct.printbuffer]* %buffer, i32 0, i32 0, !dbg !812
  %buffer50 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %arraydecay49, i32 0, i32 0, !dbg !812
  %52 = load i8*, i8** %buffer50, align 16, !dbg !812
  call void %51(i8* %52), !dbg !809
  br label %53, !dbg !813

; <label>:53:                                     ; preds = %49, %47
  %54 = load i8*, i8** %printed, align 8, !dbg !814
  %cmp51 = icmp ne i8* %54, null, !dbg !816
  br i1 %cmp51, label %55, label %59, !dbg !817

; <label>:55:                                     ; preds = %53
  %56 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !818
  %deallocate52 = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %56, i32 0, i32 1, !dbg !820
  %57 = load void (i8*)*, void (i8*)** %deallocate52, align 8, !dbg !820
  %58 = load i8*, i8** %printed, align 8, !dbg !821
  call void %57(i8* %58), !dbg !818
  br label %59, !dbg !822

; <label>:59:                                     ; preds = %55, %53
  store i8* null, i8** %retval, align 8, !dbg !823
  br label %60, !dbg !823

; <label>:60:                                     ; preds = %59, %45
  %61 = load i8*, i8** %retval, align 8, !dbg !824
  ret i8* %61, !dbg !824
}

; Function Attrs: noinline nounwind uwtable
define i8* @cJSON_PrintUnformatted(%struct.cJSON* %item) #0 !dbg !825 {
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !826, metadata !92), !dbg !827
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !828
  %call = call i8* @print(%struct.cJSON* %1, i32 0, %struct.internal_hooks* @global_hooks), !dbg !829
  ret i8* %call, !dbg !830
}

; Function Attrs: noinline nounwind uwtable
define i8* @cJSON_PrintBuffered(%struct.cJSON* %item, i32 %prebuffer, i32 %fmt) #0 !dbg !831 {
  %retval = alloca i8*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  %prebuffer.addr = alloca i32, align 4
  %fmt.addr = alloca i32, align 4
  %p = alloca %struct.printbuffer, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !834, metadata !92), !dbg !835
  store i32 %prebuffer, i32* %prebuffer.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prebuffer.addr, metadata !836, metadata !92), !dbg !837
  store i32 %fmt, i32* %fmt.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmt.addr, metadata !838, metadata !92), !dbg !839
  call void @llvm.dbg.declare(metadata %struct.printbuffer* %p, metadata !840, metadata !92), !dbg !841
  %1 = bitcast %struct.printbuffer* %p to i8*, !dbg !841
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 64, i32 8, i1 false), !dbg !841
  %2 = load i32, i32* %prebuffer.addr, align 4, !dbg !842
  %cmp = icmp slt i32 %2, 0, !dbg !844
  br i1 %cmp, label %3, label %4, !dbg !845

; <label>:3:                                      ; preds = %0
  store i8* null, i8** %retval, align 8, !dbg !846
  br label %19, !dbg !846

; <label>:4:                                      ; preds = %0
  %5 = load i8* (i64)*, i8* (i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 0), align 8, !dbg !848
  %6 = load i32, i32* %prebuffer.addr, align 4, !dbg !849
  %conv = sext i32 %6 to i64, !dbg !850
  %call = call i8* %5(i64 %conv), !dbg !851
  %buffer = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 0, !dbg !852
  store i8* %call, i8** %buffer, align 8, !dbg !853
  %buffer1 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 0, !dbg !854
  %7 = load i8*, i8** %buffer1, align 8, !dbg !854
  %tobool = icmp ne i8* %7, null, !dbg !856
  br i1 %tobool, label %9, label %8, !dbg !857

; <label>:8:                                      ; preds = %4
  store i8* null, i8** %retval, align 8, !dbg !858
  br label %19, !dbg !858

; <label>:9:                                      ; preds = %4
  %10 = load i32, i32* %prebuffer.addr, align 4, !dbg !860
  %conv2 = sext i32 %10 to i64, !dbg !861
  %length = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 1, !dbg !862
  store i64 %conv2, i64* %length, align 8, !dbg !863
  %offset = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 2, !dbg !864
  store i64 0, i64* %offset, align 8, !dbg !865
  %noalloc = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 4, !dbg !866
  store i32 0, i32* %noalloc, align 8, !dbg !867
  %11 = load i32, i32* %fmt.addr, align 4, !dbg !868
  %format = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 5, !dbg !869
  store i32 %11, i32* %format, align 4, !dbg !870
  %hooks = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 6, !dbg !871
  %12 = bitcast %struct.internal_hooks* %hooks to i8*, !dbg !872
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* bitcast (%struct.internal_hooks* @global_hooks to i8*), i64 24, i32 8, i1 false), !dbg !872
  %13 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !873
  %call3 = call i32 @print_value(%struct.cJSON* %13, %struct.printbuffer* %p), !dbg !875
  %tobool4 = icmp ne i32 %call3, 0, !dbg !875
  br i1 %tobool4, label %17, label %14, !dbg !876

; <label>:14:                                     ; preds = %9
  %15 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !877
  %buffer5 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 0, !dbg !879
  %16 = load i8*, i8** %buffer5, align 8, !dbg !879
  call void %15(i8* %16), !dbg !880
  store i8* null, i8** %retval, align 8, !dbg !881
  br label %19, !dbg !881

; <label>:17:                                     ; preds = %9
  %buffer6 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 0, !dbg !882
  %18 = load i8*, i8** %buffer6, align 8, !dbg !882
  store i8* %18, i8** %retval, align 8, !dbg !883
  br label %19, !dbg !883

; <label>:19:                                     ; preds = %17, %14, %8, %3
  %20 = load i8*, i8** %retval, align 8, !dbg !884
  ret i8* %20, !dbg !884
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @print_value(%struct.cJSON* %item, %struct.printbuffer* %output_buffer) #0 !dbg !885 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %output_buffer.addr = alloca %struct.printbuffer*, align 8
  %output = alloca i8*, align 8
  %raw_length = alloca i64, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !890, metadata !92), !dbg !891
  store %struct.printbuffer* %output_buffer, %struct.printbuffer** %output_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.printbuffer** %output_buffer.addr, metadata !892, metadata !92), !dbg !893
  call void @llvm.dbg.declare(metadata i8** %output, metadata !894, metadata !92), !dbg !895
  store i8* null, i8** %output, align 8, !dbg !895
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !896
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !898
  br i1 %cmp, label %4, label %2, !dbg !899

; <label>:2:                                      ; preds = %0
  %3 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !900
  %cmp1 = icmp eq %struct.printbuffer* %3, null, !dbg !902
  br i1 %cmp1, label %4, label %5, !dbg !903

; <label>:4:                                      ; preds = %2, %0
  store i32 0, i32* %retval, align 4, !dbg !905
  br label %55, !dbg !905

; <label>:5:                                      ; preds = %2
  %6 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !907
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i32 0, i32 3, !dbg !908
  %7 = load i32, i32* %type, align 8, !dbg !908
  %and = and i32 %7, 255, !dbg !909
  switch i32 %and, label %54 [
    i32 4, label %8
    i32 1, label %14
    i32 2, label %20
    i32 8, label %26
    i32 128, label %29
    i32 16, label %45
    i32 32, label %48
    i32 64, label %51
  ], !dbg !910

; <label>:8:                                      ; preds = %5
  %9 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !911
  %call = call i8* @ensure(%struct.printbuffer* %9, i64 5), !dbg !913
  store i8* %call, i8** %output, align 8, !dbg !914
  %10 = load i8*, i8** %output, align 8, !dbg !915
  %cmp2 = icmp eq i8* %10, null, !dbg !917
  br i1 %cmp2, label %11, label %12, !dbg !918

; <label>:11:                                     ; preds = %8
  store i32 0, i32* %retval, align 4, !dbg !919
  br label %55, !dbg !919

; <label>:12:                                     ; preds = %8
  %13 = load i8*, i8** %output, align 8, !dbg !921
  %call3 = call i8* @strcpy(i8* %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0)) #7, !dbg !922
  store i32 1, i32* %retval, align 4, !dbg !923
  br label %55, !dbg !923

; <label>:14:                                     ; preds = %5
  %15 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !924
  %call4 = call i8* @ensure(%struct.printbuffer* %15, i64 6), !dbg !925
  store i8* %call4, i8** %output, align 8, !dbg !926
  %16 = load i8*, i8** %output, align 8, !dbg !927
  %cmp5 = icmp eq i8* %16, null, !dbg !929
  br i1 %cmp5, label %17, label %18, !dbg !930

; <label>:17:                                     ; preds = %14
  store i32 0, i32* %retval, align 4, !dbg !931
  br label %55, !dbg !931

; <label>:18:                                     ; preds = %14
  %19 = load i8*, i8** %output, align 8, !dbg !933
  %call6 = call i8* @strcpy(i8* %19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)) #7, !dbg !934
  store i32 1, i32* %retval, align 4, !dbg !935
  br label %55, !dbg !935

; <label>:20:                                     ; preds = %5
  %21 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !936
  %call7 = call i8* @ensure(%struct.printbuffer* %21, i64 5), !dbg !937
  store i8* %call7, i8** %output, align 8, !dbg !938
  %22 = load i8*, i8** %output, align 8, !dbg !939
  %cmp8 = icmp eq i8* %22, null, !dbg !941
  br i1 %cmp8, label %23, label %24, !dbg !942

; <label>:23:                                     ; preds = %20
  store i32 0, i32* %retval, align 4, !dbg !943
  br label %55, !dbg !943

; <label>:24:                                     ; preds = %20
  %25 = load i8*, i8** %output, align 8, !dbg !945
  %call9 = call i8* @strcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)) #7, !dbg !946
  store i32 1, i32* %retval, align 4, !dbg !947
  br label %55, !dbg !947

; <label>:26:                                     ; preds = %5
  %27 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !948
  %28 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !949
  %call10 = call i32 @print_number(%struct.cJSON* %27, %struct.printbuffer* %28), !dbg !950
  store i32 %call10, i32* %retval, align 4, !dbg !951
  br label %55, !dbg !951

; <label>:29:                                     ; preds = %5
  call void @llvm.dbg.declare(metadata i64* %raw_length, metadata !952, metadata !92), !dbg !954
  store i64 0, i64* %raw_length, align 8, !dbg !954
  %30 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !955
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %30, i32 0, i32 4, !dbg !957
  %31 = load i8*, i8** %valuestring, align 8, !dbg !957
  %cmp11 = icmp eq i8* %31, null, !dbg !958
  br i1 %cmp11, label %32, label %33, !dbg !959

; <label>:32:                                     ; preds = %29
  store i32 0, i32* %retval, align 4, !dbg !960
  br label %55, !dbg !960

; <label>:33:                                     ; preds = %29
  %34 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !962
  %valuestring12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %34, i32 0, i32 4, !dbg !963
  %35 = load i8*, i8** %valuestring12, align 8, !dbg !963
  %call13 = call i64 @strlen(i8* %35) #8, !dbg !964
  %add = add i64 %call13, 1, !dbg !965
  store i64 %add, i64* %raw_length, align 8, !dbg !966
  %36 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !967
  %37 = load i64, i64* %raw_length, align 8, !dbg !968
  %call14 = call i8* @ensure(%struct.printbuffer* %36, i64 %37), !dbg !969
  store i8* %call14, i8** %output, align 8, !dbg !970
  %38 = load i8*, i8** %output, align 8, !dbg !971
  %cmp15 = icmp eq i8* %38, null, !dbg !973
  br i1 %cmp15, label %39, label %40, !dbg !974

; <label>:39:                                     ; preds = %33
  store i32 0, i32* %retval, align 4, !dbg !975
  br label %55, !dbg !975

; <label>:40:                                     ; preds = %33
  %41 = load i8*, i8** %output, align 8, !dbg !977
  %42 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !978
  %valuestring16 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %42, i32 0, i32 4, !dbg !979
  %43 = load i8*, i8** %valuestring16, align 8, !dbg !979
  %44 = load i64, i64* %raw_length, align 8, !dbg !980
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %43, i64 %44, i32 1, i1 false), !dbg !981
  store i32 1, i32* %retval, align 4, !dbg !982
  br label %55, !dbg !982

; <label>:45:                                     ; preds = %5
  %46 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !983
  %47 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !984
  %call17 = call i32 @print_string(%struct.cJSON* %46, %struct.printbuffer* %47), !dbg !985
  store i32 %call17, i32* %retval, align 4, !dbg !986
  br label %55, !dbg !986

; <label>:48:                                     ; preds = %5
  %49 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !987
  %50 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !988
  %call18 = call i32 @print_array(%struct.cJSON* %49, %struct.printbuffer* %50), !dbg !989
  store i32 %call18, i32* %retval, align 4, !dbg !990
  br label %55, !dbg !990

; <label>:51:                                     ; preds = %5
  %52 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !991
  %53 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !992
  %call19 = call i32 @print_object(%struct.cJSON* %52, %struct.printbuffer* %53), !dbg !993
  store i32 %call19, i32* %retval, align 4, !dbg !994
  br label %55, !dbg !994

; <label>:54:                                     ; preds = %5
  store i32 0, i32* %retval, align 4, !dbg !995
  br label %55, !dbg !995

; <label>:55:                                     ; preds = %54, %51, %48, %45, %40, %39, %32, %26, %24, %23, %18, %17, %12, %11, %4
  %56 = load i32, i32* %retval, align 4, !dbg !996
  ret i32 %56, !dbg !996
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_PrintPreallocated(%struct.cJSON* %item, i8* %buf, i32 %len, i32 %fmt) #0 !dbg !997 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %fmt.addr = alloca i32, align 4
  %p = alloca %struct.printbuffer, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1002, metadata !92), !dbg !1003
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !1004, metadata !92), !dbg !1005
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !1006, metadata !92), !dbg !1007
  store i32 %fmt, i32* %fmt.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmt.addr, metadata !1008, metadata !92), !dbg !1009
  call void @llvm.dbg.declare(metadata %struct.printbuffer* %p, metadata !1010, metadata !92), !dbg !1011
  %1 = bitcast %struct.printbuffer* %p to i8*, !dbg !1011
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 64, i32 8, i1 false), !dbg !1011
  %2 = load i32, i32* %len.addr, align 4, !dbg !1012
  %cmp = icmp slt i32 %2, 0, !dbg !1014
  br i1 %cmp, label %5, label %3, !dbg !1015

; <label>:3:                                      ; preds = %0
  %4 = load i8*, i8** %buf.addr, align 8, !dbg !1016
  %cmp1 = icmp eq i8* %4, null, !dbg !1018
  br i1 %cmp1, label %5, label %6, !dbg !1019

; <label>:5:                                      ; preds = %3, %0
  store i32 0, i32* %retval, align 4, !dbg !1021
  br label %12, !dbg !1021

; <label>:6:                                      ; preds = %3
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !1023
  %buffer = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 0, !dbg !1024
  store i8* %7, i8** %buffer, align 8, !dbg !1025
  %8 = load i32, i32* %len.addr, align 4, !dbg !1026
  %conv = sext i32 %8 to i64, !dbg !1027
  %length = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 1, !dbg !1028
  store i64 %conv, i64* %length, align 8, !dbg !1029
  %offset = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 2, !dbg !1030
  store i64 0, i64* %offset, align 8, !dbg !1031
  %noalloc = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 4, !dbg !1032
  store i32 1, i32* %noalloc, align 8, !dbg !1033
  %9 = load i32, i32* %fmt.addr, align 4, !dbg !1034
  %format = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 5, !dbg !1035
  store i32 %9, i32* %format, align 4, !dbg !1036
  %hooks = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %p, i32 0, i32 6, !dbg !1037
  %10 = bitcast %struct.internal_hooks* %hooks to i8*, !dbg !1038
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct.internal_hooks* @global_hooks to i8*), i64 24, i32 8, i1 false), !dbg !1038
  %11 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1039
  %call = call i32 @print_value(%struct.cJSON* %11, %struct.printbuffer* %p), !dbg !1040
  store i32 %call, i32* %retval, align 4, !dbg !1041
  br label %12, !dbg !1041

; <label>:12:                                     ; preds = %6, %5
  %13 = load i32, i32* %retval, align 4, !dbg !1042
  ret i32 %13, !dbg !1042
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_GetArraySize(%struct.cJSON* %array) #0 !dbg !1043 {
  %retval = alloca i32, align 4
  %array.addr = alloca %struct.cJSON*, align 8
  %child = alloca %struct.cJSON*, align 8
  %size = alloca i64, align 8
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !1046, metadata !92), !dbg !1047
  call void @llvm.dbg.declare(metadata %struct.cJSON** %child, metadata !1048, metadata !92), !dbg !1049
  store %struct.cJSON* null, %struct.cJSON** %child, align 8, !dbg !1049
  call void @llvm.dbg.declare(metadata i64* %size, metadata !1050, metadata !92), !dbg !1051
  store i64 0, i64* %size, align 8, !dbg !1051
  %1 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1052
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1054
  br i1 %cmp, label %2, label %3, !dbg !1055

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !1056
  br label %14, !dbg !1056

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1058
  %child1 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 2, !dbg !1059
  %5 = load %struct.cJSON*, %struct.cJSON** %child1, align 8, !dbg !1059
  store %struct.cJSON* %5, %struct.cJSON** %child, align 8, !dbg !1060
  br label %6, !dbg !1061

; <label>:6:                                      ; preds = %8, %3
  %7 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1062
  %cmp2 = icmp ne %struct.cJSON* %7, null, !dbg !1064
  br i1 %cmp2, label %8, label %12, !dbg !1065

; <label>:8:                                      ; preds = %6
  %9 = load i64, i64* %size, align 8, !dbg !1066
  %inc = add i64 %9, 1, !dbg !1066
  store i64 %inc, i64* %size, align 8, !dbg !1066
  %10 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1068
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %10, i32 0, i32 0, !dbg !1069
  %11 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !1069
  store %struct.cJSON* %11, %struct.cJSON** %child, align 8, !dbg !1070
  br label %6, !dbg !1071, !llvm.loop !1073

; <label>:12:                                     ; preds = %6
  %13 = load i64, i64* %size, align 8, !dbg !1075
  %conv = trunc i64 %13 to i32, !dbg !1076
  store i32 %conv, i32* %retval, align 4, !dbg !1077
  br label %14, !dbg !1077

; <label>:14:                                     ; preds = %12, %2
  %15 = load i32, i32* %retval, align 4, !dbg !1078
  ret i32 %15, !dbg !1078
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_GetArrayItem(%struct.cJSON* %array, i32 %index) #0 !dbg !1079 {
  %retval = alloca %struct.cJSON*, align 8
  %array.addr = alloca %struct.cJSON*, align 8
  %index.addr = alloca i32, align 4
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !1082, metadata !92), !dbg !1083
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !1084, metadata !92), !dbg !1085
  %1 = load i32, i32* %index.addr, align 4, !dbg !1086
  %cmp = icmp slt i32 %1, 0, !dbg !1088
  br i1 %cmp, label %2, label %3, !dbg !1089

; <label>:2:                                      ; preds = %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1090
  br label %6, !dbg !1090

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1092
  %5 = load i32, i32* %index.addr, align 4, !dbg !1093
  %conv = sext i32 %5 to i64, !dbg !1094
  %call = call %struct.cJSON* @get_array_item(%struct.cJSON* %4, i64 %conv), !dbg !1095
  store %struct.cJSON* %call, %struct.cJSON** %retval, align 8, !dbg !1096
  br label %6, !dbg !1096

; <label>:6:                                      ; preds = %3, %2
  %7 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1097
  ret %struct.cJSON* %7, !dbg !1097
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cJSON* @get_array_item(%struct.cJSON* %array, i64 %index) #0 !dbg !1098 {
  %retval = alloca %struct.cJSON*, align 8
  %array.addr = alloca %struct.cJSON*, align 8
  %index.addr = alloca i64, align 8
  %current_child = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !1101, metadata !92), !dbg !1102
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !1103, metadata !92), !dbg !1104
  call void @llvm.dbg.declare(metadata %struct.cJSON** %current_child, metadata !1105, metadata !92), !dbg !1106
  store %struct.cJSON* null, %struct.cJSON** %current_child, align 8, !dbg !1106
  %1 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1107
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1109
  br i1 %cmp, label %2, label %3, !dbg !1110

; <label>:2:                                      ; preds = %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1111
  br label %18, !dbg !1111

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1113
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 2, !dbg !1114
  %5 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1114
  store %struct.cJSON* %5, %struct.cJSON** %current_child, align 8, !dbg !1115
  br label %6, !dbg !1116

; <label>:6:                                      ; preds = %12, %3
  %7 = load %struct.cJSON*, %struct.cJSON** %current_child, align 8, !dbg !1117
  %cmp1 = icmp ne %struct.cJSON* %7, null, !dbg !1119
  br i1 %cmp1, label %8, label %10, !dbg !1120

; <label>:8:                                      ; preds = %6
  %9 = load i64, i64* %index.addr, align 8, !dbg !1121
  %cmp2 = icmp ugt i64 %9, 0, !dbg !1123
  br label %10

; <label>:10:                                     ; preds = %8, %6
  %11 = phi i1 [ false, %6 ], [ %cmp2, %8 ]
  br i1 %11, label %12, label %16, !dbg !1124

; <label>:12:                                     ; preds = %10
  %13 = load i64, i64* %index.addr, align 8, !dbg !1126
  %dec = add i64 %13, -1, !dbg !1126
  store i64 %dec, i64* %index.addr, align 8, !dbg !1126
  %14 = load %struct.cJSON*, %struct.cJSON** %current_child, align 8, !dbg !1128
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %14, i32 0, i32 0, !dbg !1129
  %15 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !1129
  store %struct.cJSON* %15, %struct.cJSON** %current_child, align 8, !dbg !1130
  br label %6, !dbg !1131, !llvm.loop !1133

; <label>:16:                                     ; preds = %10
  %17 = load %struct.cJSON*, %struct.cJSON** %current_child, align 8, !dbg !1135
  store %struct.cJSON* %17, %struct.cJSON** %retval, align 8, !dbg !1136
  br label %18, !dbg !1136

; <label>:18:                                     ; preds = %16, %2
  %19 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1137
  ret %struct.cJSON* %19, !dbg !1137
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_GetObjectItem(%struct.cJSON* %object, i8* %string) #0 !dbg !1138 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1142, metadata !92), !dbg !1143
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1144, metadata !92), !dbg !1145
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1146
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1147
  %call = call %struct.cJSON* @get_object_item(%struct.cJSON* %1, i8* %2, i32 0), !dbg !1148
  ret %struct.cJSON* %call, !dbg !1149
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cJSON* @get_object_item(%struct.cJSON* %object, i8* %name, i32 %case_sensitive) #0 !dbg !1150 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %case_sensitive.addr = alloca i32, align 4
  %current_element = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1153, metadata !92), !dbg !1154
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1155, metadata !92), !dbg !1156
  store i32 %case_sensitive, i32* %case_sensitive.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %case_sensitive.addr, metadata !1157, metadata !92), !dbg !1158
  call void @llvm.dbg.declare(metadata %struct.cJSON** %current_element, metadata !1159, metadata !92), !dbg !1160
  store %struct.cJSON* null, %struct.cJSON** %current_element, align 8, !dbg !1160
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1161
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1163
  br i1 %cmp, label %4, label %2, !dbg !1164

; <label>:2:                                      ; preds = %0
  %3 = load i8*, i8** %name.addr, align 8, !dbg !1165
  %cmp1 = icmp eq i8* %3, null, !dbg !1167
  br i1 %cmp1, label %4, label %5, !dbg !1168

; <label>:4:                                      ; preds = %2, %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1170
  br label %37, !dbg !1170

; <label>:5:                                      ; preds = %2
  %6 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1172
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i32 0, i32 2, !dbg !1173
  %7 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1173
  store %struct.cJSON* %7, %struct.cJSON** %current_element, align 8, !dbg !1174
  %8 = load i32, i32* %case_sensitive.addr, align 4, !dbg !1175
  %tobool = icmp ne i32 %8, 0, !dbg !1175
  br i1 %tobool, label %9, label %22, !dbg !1177

; <label>:9:                                      ; preds = %5
  br label %10, !dbg !1178

; <label>:10:                                     ; preds = %18, %9
  %11 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !1180
  %cmp2 = icmp ne %struct.cJSON* %11, null, !dbg !1182
  br i1 %cmp2, label %12, label %16, !dbg !1183

; <label>:12:                                     ; preds = %10
  %13 = load i8*, i8** %name.addr, align 8, !dbg !1184
  %14 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !1186
  %string = getelementptr inbounds %struct.cJSON, %struct.cJSON* %14, i32 0, i32 7, !dbg !1187
  %15 = load i8*, i8** %string, align 8, !dbg !1187
  %call = call i32 @strcmp(i8* %13, i8* %15) #8, !dbg !1188
  %cmp3 = icmp ne i32 %call, 0, !dbg !1189
  br label %16

; <label>:16:                                     ; preds = %12, %10
  %17 = phi i1 [ false, %10 ], [ %cmp3, %12 ]
  br i1 %17, label %18, label %21, !dbg !1190

; <label>:18:                                     ; preds = %16
  %19 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !1192
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %19, i32 0, i32 0, !dbg !1194
  %20 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !1194
  store %struct.cJSON* %20, %struct.cJSON** %current_element, align 8, !dbg !1195
  br label %10, !dbg !1196, !llvm.loop !1198

; <label>:21:                                     ; preds = %16
  br label %35, !dbg !1200

; <label>:22:                                     ; preds = %5
  br label %23, !dbg !1201

; <label>:23:                                     ; preds = %31, %22
  %24 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !1203
  %cmp4 = icmp ne %struct.cJSON* %24, null, !dbg !1205
  br i1 %cmp4, label %25, label %29, !dbg !1206

; <label>:25:                                     ; preds = %23
  %26 = load i8*, i8** %name.addr, align 8, !dbg !1207
  %27 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !1209
  %string5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %27, i32 0, i32 7, !dbg !1210
  %28 = load i8*, i8** %string5, align 8, !dbg !1210
  %call6 = call i32 @case_insensitive_strcmp(i8* %26, i8* %28), !dbg !1211
  %cmp7 = icmp ne i32 %call6, 0, !dbg !1212
  br label %29

; <label>:29:                                     ; preds = %25, %23
  %30 = phi i1 [ false, %23 ], [ %cmp7, %25 ]
  br i1 %30, label %31, label %34, !dbg !1213

; <label>:31:                                     ; preds = %29
  %32 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !1215
  %next8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %32, i32 0, i32 0, !dbg !1217
  %33 = load %struct.cJSON*, %struct.cJSON** %next8, align 8, !dbg !1217
  store %struct.cJSON* %33, %struct.cJSON** %current_element, align 8, !dbg !1218
  br label %23, !dbg !1219, !llvm.loop !1221

; <label>:34:                                     ; preds = %29
  br label %35

; <label>:35:                                     ; preds = %34, %21
  %36 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !1223
  store %struct.cJSON* %36, %struct.cJSON** %retval, align 8, !dbg !1224
  br label %37, !dbg !1224

; <label>:37:                                     ; preds = %35, %4
  %38 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1225
  ret %struct.cJSON* %38, !dbg !1225
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_GetObjectItemCaseSensitive(%struct.cJSON* %object, i8* %string) #0 !dbg !1226 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1227, metadata !92), !dbg !1228
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1229, metadata !92), !dbg !1230
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1231
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1232
  %call = call %struct.cJSON* @get_object_item(%struct.cJSON* %1, i8* %2, i32 1), !dbg !1233
  ret %struct.cJSON* %call, !dbg !1234
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_HasObjectItem(%struct.cJSON* %object, i8* %string) #0 !dbg !1235 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1238, metadata !92), !dbg !1239
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1240, metadata !92), !dbg !1241
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1242
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1243
  %call = call %struct.cJSON* @cJSON_GetObjectItem(%struct.cJSON* %1, i8* %2), !dbg !1244
  %tobool = icmp ne %struct.cJSON* %call, null, !dbg !1244
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !1244
  ret i32 %cond, !dbg !1245
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_AddItemToArray(%struct.cJSON* %array, %struct.cJSON* %item) #0 !dbg !1246 {
  %array.addr = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !1249, metadata !92), !dbg !1250
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1251, metadata !92), !dbg !1252
  %1 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1253
  %2 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1254
  %call = call i32 @add_item_to_array(%struct.cJSON* %1, %struct.cJSON* %2), !dbg !1255
  ret void, !dbg !1256
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_item_to_array(%struct.cJSON* %array, %struct.cJSON* %item) #0 !dbg !1257 {
  %retval = alloca i32, align 4
  %array.addr = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  %child = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !1260, metadata !92), !dbg !1261
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1262, metadata !92), !dbg !1263
  call void @llvm.dbg.declare(metadata %struct.cJSON** %child, metadata !1264, metadata !92), !dbg !1265
  store %struct.cJSON* null, %struct.cJSON** %child, align 8, !dbg !1265
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1266
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1268
  br i1 %cmp, label %4, label %2, !dbg !1269

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1270
  %cmp1 = icmp eq %struct.cJSON* %3, null, !dbg !1272
  br i1 %cmp1, label %4, label %5, !dbg !1273

; <label>:4:                                      ; preds = %2, %0
  store i32 0, i32* %retval, align 4, !dbg !1275
  br label %23, !dbg !1275

; <label>:5:                                      ; preds = %2
  %6 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1277
  %child2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i32 0, i32 2, !dbg !1278
  %7 = load %struct.cJSON*, %struct.cJSON** %child2, align 8, !dbg !1278
  store %struct.cJSON* %7, %struct.cJSON** %child, align 8, !dbg !1279
  %8 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1280
  %cmp3 = icmp eq %struct.cJSON* %8, null, !dbg !1282
  br i1 %cmp3, label %9, label %12, !dbg !1283

; <label>:9:                                      ; preds = %5
  %10 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1284
  %11 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1286
  %child4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %11, i32 0, i32 2, !dbg !1287
  store %struct.cJSON* %10, %struct.cJSON** %child4, align 8, !dbg !1288
  br label %22, !dbg !1289

; <label>:12:                                     ; preds = %5
  br label %13, !dbg !1290

; <label>:13:                                     ; preds = %16, %12
  %14 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1292
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %14, i32 0, i32 0, !dbg !1294
  %15 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !1294
  %tobool = icmp ne %struct.cJSON* %15, null, !dbg !1295
  br i1 %tobool, label %16, label %19, !dbg !1295

; <label>:16:                                     ; preds = %13
  %17 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1296
  %next5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %17, i32 0, i32 0, !dbg !1298
  %18 = load %struct.cJSON*, %struct.cJSON** %next5, align 8, !dbg !1298
  store %struct.cJSON* %18, %struct.cJSON** %child, align 8, !dbg !1299
  br label %13, !dbg !1300, !llvm.loop !1302

; <label>:19:                                     ; preds = %13
  %20 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1304
  %21 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1305
  call void @suffix_object(%struct.cJSON* %20, %struct.cJSON* %21), !dbg !1306
  br label %22

; <label>:22:                                     ; preds = %19, %9
  store i32 1, i32* %retval, align 4, !dbg !1307
  br label %23, !dbg !1307

; <label>:23:                                     ; preds = %22, %4
  %24 = load i32, i32* %retval, align 4, !dbg !1308
  ret i32 %24, !dbg !1308
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_AddItemToObject(%struct.cJSON* %object, i8* %string, %struct.cJSON* %item) #0 !dbg !1309 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1312, metadata !92), !dbg !1313
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1314, metadata !92), !dbg !1315
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1316, metadata !92), !dbg !1317
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1318
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1319
  %3 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1320
  %call = call i32 @add_item_to_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1321
  ret void, !dbg !1322
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_item_to_object(%struct.cJSON* %object, i8* %string, %struct.cJSON* %item, %struct.internal_hooks* %hooks, i32 %constant_key) #0 !dbg !1323 {
  %retval = alloca i32, align 4
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  %hooks.addr = alloca %struct.internal_hooks*, align 8
  %constant_key.addr = alloca i32, align 4
  %new_key = alloca i8*, align 8
  %new_type = alloca i32, align 4
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1326, metadata !92), !dbg !1327
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1328, metadata !92), !dbg !1329
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1330, metadata !92), !dbg !1331
  store %struct.internal_hooks* %hooks, %struct.internal_hooks** %hooks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.internal_hooks** %hooks.addr, metadata !1332, metadata !92), !dbg !1333
  store i32 %constant_key, i32* %constant_key.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %constant_key.addr, metadata !1334, metadata !92), !dbg !1335
  call void @llvm.dbg.declare(metadata i8** %new_key, metadata !1336, metadata !92), !dbg !1337
  store i8* null, i8** %new_key, align 8, !dbg !1337
  call void @llvm.dbg.declare(metadata i32* %new_type, metadata !1338, metadata !92), !dbg !1339
  store i32 0, i32* %new_type, align 4, !dbg !1339
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1340
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1342
  br i1 %cmp, label %6, label %2, !dbg !1343

; <label>:2:                                      ; preds = %0
  %3 = load i8*, i8** %string.addr, align 8, !dbg !1344
  %cmp1 = icmp eq i8* %3, null, !dbg !1346
  br i1 %cmp1, label %6, label %4, !dbg !1347

; <label>:4:                                      ; preds = %2
  %5 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1348
  %cmp2 = icmp eq %struct.cJSON* %5, null, !dbg !1350
  br i1 %cmp2, label %6, label %7, !dbg !1351

; <label>:6:                                      ; preds = %4, %2, %0
  store i32 0, i32* %retval, align 4, !dbg !1353
  br label %39, !dbg !1353

; <label>:7:                                      ; preds = %4
  %8 = load i32, i32* %constant_key.addr, align 4, !dbg !1355
  %tobool = icmp ne i32 %8, 0, !dbg !1355
  br i1 %tobool, label %9, label %13, !dbg !1357

; <label>:9:                                      ; preds = %7
  %10 = load i8*, i8** %string.addr, align 8, !dbg !1358
  %call = call i8* @cast_away_const(i8* %10), !dbg !1360
  store i8* %call, i8** %new_key, align 8, !dbg !1361
  %11 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1362
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %11, i32 0, i32 3, !dbg !1363
  %12 = load i32, i32* %type, align 8, !dbg !1363
  %or = or i32 %12, 512, !dbg !1364
  store i32 %or, i32* %new_type, align 4, !dbg !1365
  br label %21, !dbg !1366

; <label>:13:                                     ; preds = %7
  %14 = load i8*, i8** %string.addr, align 8, !dbg !1367
  %15 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !1369
  %call3 = call i8* @cJSON_strdup(i8* %14, %struct.internal_hooks* %15), !dbg !1370
  store i8* %call3, i8** %new_key, align 8, !dbg !1371
  %16 = load i8*, i8** %new_key, align 8, !dbg !1372
  %cmp4 = icmp eq i8* %16, null, !dbg !1374
  br i1 %cmp4, label %17, label %18, !dbg !1375

; <label>:17:                                     ; preds = %13
  store i32 0, i32* %retval, align 4, !dbg !1376
  br label %39, !dbg !1376

; <label>:18:                                     ; preds = %13
  %19 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1378
  %type5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %19, i32 0, i32 3, !dbg !1379
  %20 = load i32, i32* %type5, align 8, !dbg !1379
  %and = and i32 %20, -513, !dbg !1380
  store i32 %and, i32* %new_type, align 4, !dbg !1381
  br label %21

; <label>:21:                                     ; preds = %18, %9
  %22 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1382
  %type6 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %22, i32 0, i32 3, !dbg !1384
  %23 = load i32, i32* %type6, align 8, !dbg !1384
  %and7 = and i32 %23, 512, !dbg !1385
  %tobool8 = icmp ne i32 %and7, 0, !dbg !1385
  br i1 %tobool8, label %32, label %24, !dbg !1386

; <label>:24:                                     ; preds = %21
  %25 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1387
  %string9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %25, i32 0, i32 7, !dbg !1389
  %26 = load i8*, i8** %string9, align 8, !dbg !1389
  %cmp10 = icmp ne i8* %26, null, !dbg !1390
  br i1 %cmp10, label %27, label %32, !dbg !1391

; <label>:27:                                     ; preds = %24
  %28 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !1393
  %deallocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %28, i32 0, i32 1, !dbg !1395
  %29 = load void (i8*)*, void (i8*)** %deallocate, align 8, !dbg !1395
  %30 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1396
  %string11 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %30, i32 0, i32 7, !dbg !1397
  %31 = load i8*, i8** %string11, align 8, !dbg !1397
  call void %29(i8* %31), !dbg !1393
  br label %32, !dbg !1398

; <label>:32:                                     ; preds = %27, %24, %21
  %33 = load i8*, i8** %new_key, align 8, !dbg !1399
  %34 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1400
  %string12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %34, i32 0, i32 7, !dbg !1401
  store i8* %33, i8** %string12, align 8, !dbg !1402
  %35 = load i32, i32* %new_type, align 4, !dbg !1403
  %36 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1404
  %type13 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %36, i32 0, i32 3, !dbg !1405
  store i32 %35, i32* %type13, align 8, !dbg !1406
  %37 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1407
  %38 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1408
  %call14 = call i32 @add_item_to_array(%struct.cJSON* %37, %struct.cJSON* %38), !dbg !1409
  store i32 %call14, i32* %retval, align 4, !dbg !1410
  br label %39, !dbg !1410

; <label>:39:                                     ; preds = %32, %17, %6
  %40 = load i32, i32* %retval, align 4, !dbg !1411
  ret i32 %40, !dbg !1411
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_AddItemToObjectCS(%struct.cJSON* %object, i8* %string, %struct.cJSON* %item) #0 !dbg !1412 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1413, metadata !92), !dbg !1414
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1415, metadata !92), !dbg !1416
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1417, metadata !92), !dbg !1418
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1419
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1420
  %3 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1421
  %call = call i32 @add_item_to_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, %struct.internal_hooks* @global_hooks, i32 1), !dbg !1422
  ret void, !dbg !1423
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_AddItemReferenceToArray(%struct.cJSON* %array, %struct.cJSON* %item) #0 !dbg !1424 {
  %array.addr = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !1425, metadata !92), !dbg !1426
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1427, metadata !92), !dbg !1428
  %1 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1429
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1431
  br i1 %cmp, label %2, label %3, !dbg !1432

; <label>:2:                                      ; preds = %0
  br label %6, !dbg !1433

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1435
  %5 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1436
  %call = call %struct.cJSON* @create_reference(%struct.cJSON* %5, %struct.internal_hooks* @global_hooks), !dbg !1437
  %call1 = call i32 @add_item_to_array(%struct.cJSON* %4, %struct.cJSON* %call), !dbg !1438
  br label %6, !dbg !1440

; <label>:6:                                      ; preds = %3, %2
  ret void, !dbg !1441
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cJSON* @create_reference(%struct.cJSON* %item, %struct.internal_hooks* %hooks) #0 !dbg !1442 {
  %retval = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  %hooks.addr = alloca %struct.internal_hooks*, align 8
  %reference = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1445, metadata !92), !dbg !1446
  store %struct.internal_hooks* %hooks, %struct.internal_hooks** %hooks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.internal_hooks** %hooks.addr, metadata !1447, metadata !92), !dbg !1448
  call void @llvm.dbg.declare(metadata %struct.cJSON** %reference, metadata !1449, metadata !92), !dbg !1450
  store %struct.cJSON* null, %struct.cJSON** %reference, align 8, !dbg !1450
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1451
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1453
  br i1 %cmp, label %2, label %3, !dbg !1454

; <label>:2:                                      ; preds = %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1455
  br label %18, !dbg !1455

; <label>:3:                                      ; preds = %0
  %4 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !1457
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* %4), !dbg !1458
  store %struct.cJSON* %call, %struct.cJSON** %reference, align 8, !dbg !1459
  %5 = load %struct.cJSON*, %struct.cJSON** %reference, align 8, !dbg !1460
  %cmp1 = icmp eq %struct.cJSON* %5, null, !dbg !1462
  br i1 %cmp1, label %6, label %7, !dbg !1463

; <label>:6:                                      ; preds = %3
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1464
  br label %18, !dbg !1464

; <label>:7:                                      ; preds = %3
  %8 = load %struct.cJSON*, %struct.cJSON** %reference, align 8, !dbg !1466
  %9 = bitcast %struct.cJSON* %8 to i8*, !dbg !1467
  %10 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1468
  %11 = bitcast %struct.cJSON* %10 to i8*, !dbg !1467
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %11, i64 64, i32 8, i1 false), !dbg !1467
  %12 = load %struct.cJSON*, %struct.cJSON** %reference, align 8, !dbg !1469
  %string = getelementptr inbounds %struct.cJSON, %struct.cJSON* %12, i32 0, i32 7, !dbg !1470
  store i8* null, i8** %string, align 8, !dbg !1471
  %13 = load %struct.cJSON*, %struct.cJSON** %reference, align 8, !dbg !1472
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %13, i32 0, i32 3, !dbg !1473
  %14 = load i32, i32* %type, align 8, !dbg !1474
  %or = or i32 %14, 256, !dbg !1474
  store i32 %or, i32* %type, align 8, !dbg !1474
  %15 = load %struct.cJSON*, %struct.cJSON** %reference, align 8, !dbg !1475
  %prev = getelementptr inbounds %struct.cJSON, %struct.cJSON* %15, i32 0, i32 1, !dbg !1476
  store %struct.cJSON* null, %struct.cJSON** %prev, align 8, !dbg !1477
  %16 = load %struct.cJSON*, %struct.cJSON** %reference, align 8, !dbg !1478
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %16, i32 0, i32 0, !dbg !1479
  store %struct.cJSON* null, %struct.cJSON** %next, align 8, !dbg !1480
  %17 = load %struct.cJSON*, %struct.cJSON** %reference, align 8, !dbg !1481
  store %struct.cJSON* %17, %struct.cJSON** %retval, align 8, !dbg !1482
  br label %18, !dbg !1482

; <label>:18:                                     ; preds = %7, %6, %2
  %19 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1483
  ret %struct.cJSON* %19, !dbg !1483
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_AddItemReferenceToObject(%struct.cJSON* %object, i8* %string, %struct.cJSON* %item) #0 !dbg !1484 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1485, metadata !92), !dbg !1486
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1487, metadata !92), !dbg !1488
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1489, metadata !92), !dbg !1490
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1491
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1493
  br i1 %cmp, label %4, label %2, !dbg !1494

; <label>:2:                                      ; preds = %0
  %3 = load i8*, i8** %string.addr, align 8, !dbg !1495
  %cmp1 = icmp eq i8* %3, null, !dbg !1497
  br i1 %cmp1, label %4, label %5, !dbg !1498

; <label>:4:                                      ; preds = %2, %0
  br label %9, !dbg !1500

; <label>:5:                                      ; preds = %2
  %6 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1502
  %7 = load i8*, i8** %string.addr, align 8, !dbg !1503
  %8 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1504
  %call = call %struct.cJSON* @create_reference(%struct.cJSON* %8, %struct.internal_hooks* @global_hooks), !dbg !1505
  %call2 = call i32 @add_item_to_object(%struct.cJSON* %6, i8* %7, %struct.cJSON* %call, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1506
  br label %9, !dbg !1507

; <label>:9:                                      ; preds = %5, %4
  ret void, !dbg !1508
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddNullToObject(%struct.cJSON* %object, i8* %name) #0 !dbg !1509 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %null = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1512, metadata !92), !dbg !1513
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1514, metadata !92), !dbg !1515
  call void @llvm.dbg.declare(metadata %struct.cJSON** %null, metadata !1516, metadata !92), !dbg !1517
  %call = call %struct.cJSON* @cJSON_CreateNull(), !dbg !1518
  store %struct.cJSON* %call, %struct.cJSON** %null, align 8, !dbg !1517
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1519
  %2 = load i8*, i8** %name.addr, align 8, !dbg !1521
  %3 = load %struct.cJSON*, %struct.cJSON** %null, align 8, !dbg !1522
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1523
  %tobool = icmp ne i32 %call1, 0, !dbg !1523
  br i1 %tobool, label %4, label %6, !dbg !1524

; <label>:4:                                      ; preds = %0
  %5 = load %struct.cJSON*, %struct.cJSON** %null, align 8, !dbg !1525
  store %struct.cJSON* %5, %struct.cJSON** %retval, align 8, !dbg !1527
  br label %8, !dbg !1527

; <label>:6:                                      ; preds = %0
  %7 = load %struct.cJSON*, %struct.cJSON** %null, align 8, !dbg !1528
  call void @cJSON_Delete(%struct.cJSON* %7), !dbg !1529
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1530
  br label %8, !dbg !1530

; <label>:8:                                      ; preds = %6, %4
  %9 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1531
  ret %struct.cJSON* %9, !dbg !1531
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateNull() #0 !dbg !1532 {
  %item = alloca %struct.cJSON*, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1535, metadata !92), !dbg !1536
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1537
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1536
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1538
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1538
  br i1 %tobool, label %2, label %4, !dbg !1540

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1541
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !1543
  store i32 4, i32* %type, align 8, !dbg !1544
  br label %4, !dbg !1545

; <label>:4:                                      ; preds = %2, %0
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1546
  ret %struct.cJSON* %5, !dbg !1547
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddTrueToObject(%struct.cJSON* %object, i8* %name) #0 !dbg !1548 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %true_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1549, metadata !92), !dbg !1550
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1551, metadata !92), !dbg !1552
  call void @llvm.dbg.declare(metadata %struct.cJSON** %true_item, metadata !1553, metadata !92), !dbg !1554
  %call = call %struct.cJSON* @cJSON_CreateTrue(), !dbg !1555
  store %struct.cJSON* %call, %struct.cJSON** %true_item, align 8, !dbg !1554
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1556
  %2 = load i8*, i8** %name.addr, align 8, !dbg !1558
  %3 = load %struct.cJSON*, %struct.cJSON** %true_item, align 8, !dbg !1559
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1560
  %tobool = icmp ne i32 %call1, 0, !dbg !1560
  br i1 %tobool, label %4, label %6, !dbg !1561

; <label>:4:                                      ; preds = %0
  %5 = load %struct.cJSON*, %struct.cJSON** %true_item, align 8, !dbg !1562
  store %struct.cJSON* %5, %struct.cJSON** %retval, align 8, !dbg !1564
  br label %8, !dbg !1564

; <label>:6:                                      ; preds = %0
  %7 = load %struct.cJSON*, %struct.cJSON** %true_item, align 8, !dbg !1565
  call void @cJSON_Delete(%struct.cJSON* %7), !dbg !1566
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1567
  br label %8, !dbg !1567

; <label>:8:                                      ; preds = %6, %4
  %9 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1568
  ret %struct.cJSON* %9, !dbg !1568
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateTrue() #0 !dbg !1569 {
  %item = alloca %struct.cJSON*, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1570, metadata !92), !dbg !1571
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1572
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1571
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1573
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1573
  br i1 %tobool, label %2, label %4, !dbg !1575

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1576
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !1578
  store i32 2, i32* %type, align 8, !dbg !1579
  br label %4, !dbg !1580

; <label>:4:                                      ; preds = %2, %0
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1581
  ret %struct.cJSON* %5, !dbg !1582
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddFalseToObject(%struct.cJSON* %object, i8* %name) #0 !dbg !1583 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %false_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1584, metadata !92), !dbg !1585
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1586, metadata !92), !dbg !1587
  call void @llvm.dbg.declare(metadata %struct.cJSON** %false_item, metadata !1588, metadata !92), !dbg !1589
  %call = call %struct.cJSON* @cJSON_CreateFalse(), !dbg !1590
  store %struct.cJSON* %call, %struct.cJSON** %false_item, align 8, !dbg !1589
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1591
  %2 = load i8*, i8** %name.addr, align 8, !dbg !1593
  %3 = load %struct.cJSON*, %struct.cJSON** %false_item, align 8, !dbg !1594
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1595
  %tobool = icmp ne i32 %call1, 0, !dbg !1595
  br i1 %tobool, label %4, label %6, !dbg !1596

; <label>:4:                                      ; preds = %0
  %5 = load %struct.cJSON*, %struct.cJSON** %false_item, align 8, !dbg !1597
  store %struct.cJSON* %5, %struct.cJSON** %retval, align 8, !dbg !1599
  br label %8, !dbg !1599

; <label>:6:                                      ; preds = %0
  %7 = load %struct.cJSON*, %struct.cJSON** %false_item, align 8, !dbg !1600
  call void @cJSON_Delete(%struct.cJSON* %7), !dbg !1601
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1602
  br label %8, !dbg !1602

; <label>:8:                                      ; preds = %6, %4
  %9 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1603
  ret %struct.cJSON* %9, !dbg !1603
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateFalse() #0 !dbg !1604 {
  %item = alloca %struct.cJSON*, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1605, metadata !92), !dbg !1606
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1607
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1606
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1608
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1608
  br i1 %tobool, label %2, label %4, !dbg !1610

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1611
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !1613
  store i32 1, i32* %type, align 8, !dbg !1614
  br label %4, !dbg !1615

; <label>:4:                                      ; preds = %2, %0
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1616
  ret %struct.cJSON* %5, !dbg !1617
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddBoolToObject(%struct.cJSON* %object, i8* %name, i32 %boolean) #0 !dbg !1618 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %boolean.addr = alloca i32, align 4
  %bool_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1621, metadata !92), !dbg !1622
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1623, metadata !92), !dbg !1624
  store i32 %boolean, i32* %boolean.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %boolean.addr, metadata !1625, metadata !92), !dbg !1626
  call void @llvm.dbg.declare(metadata %struct.cJSON** %bool_item, metadata !1627, metadata !92), !dbg !1628
  %1 = load i32, i32* %boolean.addr, align 4, !dbg !1629
  %call = call %struct.cJSON* @cJSON_CreateBool(i32 %1), !dbg !1630
  store %struct.cJSON* %call, %struct.cJSON** %bool_item, align 8, !dbg !1628
  %2 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1631
  %3 = load i8*, i8** %name.addr, align 8, !dbg !1633
  %4 = load %struct.cJSON*, %struct.cJSON** %bool_item, align 8, !dbg !1634
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %2, i8* %3, %struct.cJSON* %4, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1635
  %tobool = icmp ne i32 %call1, 0, !dbg !1635
  br i1 %tobool, label %5, label %7, !dbg !1636

; <label>:5:                                      ; preds = %0
  %6 = load %struct.cJSON*, %struct.cJSON** %bool_item, align 8, !dbg !1637
  store %struct.cJSON* %6, %struct.cJSON** %retval, align 8, !dbg !1639
  br label %9, !dbg !1639

; <label>:7:                                      ; preds = %0
  %8 = load %struct.cJSON*, %struct.cJSON** %bool_item, align 8, !dbg !1640
  call void @cJSON_Delete(%struct.cJSON* %8), !dbg !1641
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1642
  br label %9, !dbg !1642

; <label>:9:                                      ; preds = %7, %5
  %10 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1643
  ret %struct.cJSON* %10, !dbg !1643
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateBool(i32 %b) #0 !dbg !1644 {
  %b.addr = alloca i32, align 4
  %item = alloca %struct.cJSON*, align 8
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !1647, metadata !92), !dbg !1648
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1649, metadata !92), !dbg !1650
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1651
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1650
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1652
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1652
  br i1 %tobool, label %2, label %5, !dbg !1654

; <label>:2:                                      ; preds = %0
  %3 = load i32, i32* %b.addr, align 4, !dbg !1655
  %tobool1 = icmp ne i32 %3, 0, !dbg !1655
  %cond = select i1 %tobool1, i32 2, i32 1, !dbg !1655
  %4 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1657
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !1658
  store i32 %cond, i32* %type, align 8, !dbg !1659
  br label %5, !dbg !1660

; <label>:5:                                      ; preds = %2, %0
  %6 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1661
  ret %struct.cJSON* %6, !dbg !1662
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddNumberToObject(%struct.cJSON* %object, i8* %name, double %number) #0 !dbg !1663 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %number.addr = alloca double, align 8
  %number_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1667, metadata !92), !dbg !1668
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1669, metadata !92), !dbg !1670
  store double %number, double* %number.addr, align 8
  call void @llvm.dbg.declare(metadata double* %number.addr, metadata !1671, metadata !92), !dbg !1672
  call void @llvm.dbg.declare(metadata %struct.cJSON** %number_item, metadata !1673, metadata !92), !dbg !1674
  %1 = load double, double* %number.addr, align 8, !dbg !1675
  %call = call %struct.cJSON* @cJSON_CreateNumber(double %1), !dbg !1676
  store %struct.cJSON* %call, %struct.cJSON** %number_item, align 8, !dbg !1674
  %2 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1677
  %3 = load i8*, i8** %name.addr, align 8, !dbg !1679
  %4 = load %struct.cJSON*, %struct.cJSON** %number_item, align 8, !dbg !1680
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %2, i8* %3, %struct.cJSON* %4, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1681
  %tobool = icmp ne i32 %call1, 0, !dbg !1681
  br i1 %tobool, label %5, label %7, !dbg !1682

; <label>:5:                                      ; preds = %0
  %6 = load %struct.cJSON*, %struct.cJSON** %number_item, align 8, !dbg !1683
  store %struct.cJSON* %6, %struct.cJSON** %retval, align 8, !dbg !1685
  br label %9, !dbg !1685

; <label>:7:                                      ; preds = %0
  %8 = load %struct.cJSON*, %struct.cJSON** %number_item, align 8, !dbg !1686
  call void @cJSON_Delete(%struct.cJSON* %8), !dbg !1687
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1688
  br label %9, !dbg !1688

; <label>:9:                                      ; preds = %7, %5
  %10 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1689
  ret %struct.cJSON* %10, !dbg !1689
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateNumber(double %num) #0 !dbg !1690 {
  %num.addr = alloca double, align 8
  %item = alloca %struct.cJSON*, align 8
  store double %num, double* %num.addr, align 8
  call void @llvm.dbg.declare(metadata double* %num.addr, metadata !1693, metadata !92), !dbg !1694
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1695, metadata !92), !dbg !1696
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1697
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1696
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1698
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1698
  br i1 %tobool, label %2, label %18, !dbg !1700

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1701
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !1703
  store i32 8, i32* %type, align 8, !dbg !1704
  %4 = load double, double* %num.addr, align 8, !dbg !1705
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1706
  %valuedouble = getelementptr inbounds %struct.cJSON, %struct.cJSON* %5, i32 0, i32 6, !dbg !1707
  store double %4, double* %valuedouble, align 8, !dbg !1708
  %6 = load double, double* %num.addr, align 8, !dbg !1709
  %cmp = fcmp oge double %6, 0x41DFFFFFFFC00000, !dbg !1711
  br i1 %cmp, label %7, label %9, !dbg !1712

; <label>:7:                                      ; preds = %2
  %8 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1713
  %valueint = getelementptr inbounds %struct.cJSON, %struct.cJSON* %8, i32 0, i32 5, !dbg !1715
  store i32 2147483647, i32* %valueint, align 8, !dbg !1716
  br label %17, !dbg !1717

; <label>:9:                                      ; preds = %2
  %10 = load double, double* %num.addr, align 8, !dbg !1718
  %cmp1 = fcmp ole double %10, 0xC1E0000000000000, !dbg !1720
  br i1 %cmp1, label %11, label %13, !dbg !1721

; <label>:11:                                     ; preds = %9
  %12 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1722
  %valueint2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %12, i32 0, i32 5, !dbg !1724
  store i32 -2147483648, i32* %valueint2, align 8, !dbg !1725
  br label %16, !dbg !1726

; <label>:13:                                     ; preds = %9
  %14 = load double, double* %num.addr, align 8, !dbg !1727
  %conv = fptosi double %14 to i32, !dbg !1729
  %15 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1730
  %valueint3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %15, i32 0, i32 5, !dbg !1731
  store i32 %conv, i32* %valueint3, align 8, !dbg !1732
  br label %16

; <label>:16:                                     ; preds = %13, %11
  br label %17

; <label>:17:                                     ; preds = %16, %7
  br label %18, !dbg !1733

; <label>:18:                                     ; preds = %17, %0
  %19 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1734
  ret %struct.cJSON* %19, !dbg !1735
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddStringToObject(%struct.cJSON* %object, i8* %name, i8* %string) #0 !dbg !1736 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %string.addr = alloca i8*, align 8
  %string_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1739, metadata !92), !dbg !1740
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1741, metadata !92), !dbg !1742
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1743, metadata !92), !dbg !1744
  call void @llvm.dbg.declare(metadata %struct.cJSON** %string_item, metadata !1745, metadata !92), !dbg !1746
  %1 = load i8*, i8** %string.addr, align 8, !dbg !1747
  %call = call %struct.cJSON* @cJSON_CreateString(i8* %1), !dbg !1748
  store %struct.cJSON* %call, %struct.cJSON** %string_item, align 8, !dbg !1746
  %2 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1749
  %3 = load i8*, i8** %name.addr, align 8, !dbg !1751
  %4 = load %struct.cJSON*, %struct.cJSON** %string_item, align 8, !dbg !1752
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %2, i8* %3, %struct.cJSON* %4, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1753
  %tobool = icmp ne i32 %call1, 0, !dbg !1753
  br i1 %tobool, label %5, label %7, !dbg !1754

; <label>:5:                                      ; preds = %0
  %6 = load %struct.cJSON*, %struct.cJSON** %string_item, align 8, !dbg !1755
  store %struct.cJSON* %6, %struct.cJSON** %retval, align 8, !dbg !1757
  br label %9, !dbg !1757

; <label>:7:                                      ; preds = %0
  %8 = load %struct.cJSON*, %struct.cJSON** %string_item, align 8, !dbg !1758
  call void @cJSON_Delete(%struct.cJSON* %8), !dbg !1759
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1760
  br label %9, !dbg !1760

; <label>:9:                                      ; preds = %7, %5
  %10 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1761
  ret %struct.cJSON* %10, !dbg !1761
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateString(i8* %string) #0 !dbg !1762 {
  %retval = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %item = alloca %struct.cJSON*, align 8
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1763, metadata !92), !dbg !1764
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1765, metadata !92), !dbg !1766
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1767
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1766
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1768
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1768
  br i1 %tobool, label %2, label %11, !dbg !1770

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1771
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !1773
  store i32 16, i32* %type, align 8, !dbg !1774
  %4 = load i8*, i8** %string.addr, align 8, !dbg !1775
  %call1 = call i8* @cJSON_strdup(i8* %4, %struct.internal_hooks* @global_hooks), !dbg !1776
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1777
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %5, i32 0, i32 4, !dbg !1778
  store i8* %call1, i8** %valuestring, align 8, !dbg !1779
  %6 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1780
  %valuestring2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i32 0, i32 4, !dbg !1782
  %7 = load i8*, i8** %valuestring2, align 8, !dbg !1782
  %tobool3 = icmp ne i8* %7, null, !dbg !1780
  br i1 %tobool3, label %10, label %8, !dbg !1783

; <label>:8:                                      ; preds = %2
  %9 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1784
  call void @cJSON_Delete(%struct.cJSON* %9), !dbg !1786
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1787
  br label %13, !dbg !1787

; <label>:10:                                     ; preds = %2
  br label %11, !dbg !1788

; <label>:11:                                     ; preds = %10, %0
  %12 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1789
  store %struct.cJSON* %12, %struct.cJSON** %retval, align 8, !dbg !1790
  br label %13, !dbg !1790

; <label>:13:                                     ; preds = %11, %8
  %14 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1791
  ret %struct.cJSON* %14, !dbg !1791
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddRawToObject(%struct.cJSON* %object, i8* %name, i8* %raw) #0 !dbg !1792 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %raw.addr = alloca i8*, align 8
  %raw_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1793, metadata !92), !dbg !1794
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1795, metadata !92), !dbg !1796
  store i8* %raw, i8** %raw.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %raw.addr, metadata !1797, metadata !92), !dbg !1798
  call void @llvm.dbg.declare(metadata %struct.cJSON** %raw_item, metadata !1799, metadata !92), !dbg !1800
  %1 = load i8*, i8** %raw.addr, align 8, !dbg !1801
  %call = call %struct.cJSON* @cJSON_CreateRaw(i8* %1), !dbg !1802
  store %struct.cJSON* %call, %struct.cJSON** %raw_item, align 8, !dbg !1800
  %2 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1803
  %3 = load i8*, i8** %name.addr, align 8, !dbg !1805
  %4 = load %struct.cJSON*, %struct.cJSON** %raw_item, align 8, !dbg !1806
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %2, i8* %3, %struct.cJSON* %4, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1807
  %tobool = icmp ne i32 %call1, 0, !dbg !1807
  br i1 %tobool, label %5, label %7, !dbg !1808

; <label>:5:                                      ; preds = %0
  %6 = load %struct.cJSON*, %struct.cJSON** %raw_item, align 8, !dbg !1809
  store %struct.cJSON* %6, %struct.cJSON** %retval, align 8, !dbg !1811
  br label %9, !dbg !1811

; <label>:7:                                      ; preds = %0
  %8 = load %struct.cJSON*, %struct.cJSON** %raw_item, align 8, !dbg !1812
  call void @cJSON_Delete(%struct.cJSON* %8), !dbg !1813
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1814
  br label %9, !dbg !1814

; <label>:9:                                      ; preds = %7, %5
  %10 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1815
  ret %struct.cJSON* %10, !dbg !1815
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateRaw(i8* %raw) #0 !dbg !1816 {
  %retval = alloca %struct.cJSON*, align 8
  %raw.addr = alloca i8*, align 8
  %item = alloca %struct.cJSON*, align 8
  store i8* %raw, i8** %raw.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %raw.addr, metadata !1817, metadata !92), !dbg !1818
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1819, metadata !92), !dbg !1820
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1821
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1820
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1822
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1822
  br i1 %tobool, label %2, label %11, !dbg !1824

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1825
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !1827
  store i32 128, i32* %type, align 8, !dbg !1828
  %4 = load i8*, i8** %raw.addr, align 8, !dbg !1829
  %call1 = call i8* @cJSON_strdup(i8* %4, %struct.internal_hooks* @global_hooks), !dbg !1830
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1831
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %5, i32 0, i32 4, !dbg !1832
  store i8* %call1, i8** %valuestring, align 8, !dbg !1833
  %6 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1834
  %valuestring2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i32 0, i32 4, !dbg !1836
  %7 = load i8*, i8** %valuestring2, align 8, !dbg !1836
  %tobool3 = icmp ne i8* %7, null, !dbg !1834
  br i1 %tobool3, label %10, label %8, !dbg !1837

; <label>:8:                                      ; preds = %2
  %9 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1838
  call void @cJSON_Delete(%struct.cJSON* %9), !dbg !1840
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1841
  br label %13, !dbg !1841

; <label>:10:                                     ; preds = %2
  br label %11, !dbg !1842

; <label>:11:                                     ; preds = %10, %0
  %12 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1843
  store %struct.cJSON* %12, %struct.cJSON** %retval, align 8, !dbg !1844
  br label %13, !dbg !1844

; <label>:13:                                     ; preds = %11, %8
  %14 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1845
  ret %struct.cJSON* %14, !dbg !1845
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddObjectToObject(%struct.cJSON* %object, i8* %name) #0 !dbg !1846 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %object_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1847, metadata !92), !dbg !1848
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1849, metadata !92), !dbg !1850
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object_item, metadata !1851, metadata !92), !dbg !1852
  %call = call %struct.cJSON* @cJSON_CreateObject(), !dbg !1853
  store %struct.cJSON* %call, %struct.cJSON** %object_item, align 8, !dbg !1852
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1854
  %2 = load i8*, i8** %name.addr, align 8, !dbg !1856
  %3 = load %struct.cJSON*, %struct.cJSON** %object_item, align 8, !dbg !1857
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1858
  %tobool = icmp ne i32 %call1, 0, !dbg !1858
  br i1 %tobool, label %4, label %6, !dbg !1859

; <label>:4:                                      ; preds = %0
  %5 = load %struct.cJSON*, %struct.cJSON** %object_item, align 8, !dbg !1860
  store %struct.cJSON* %5, %struct.cJSON** %retval, align 8, !dbg !1862
  br label %8, !dbg !1862

; <label>:6:                                      ; preds = %0
  %7 = load %struct.cJSON*, %struct.cJSON** %object_item, align 8, !dbg !1863
  call void @cJSON_Delete(%struct.cJSON* %7), !dbg !1864
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1865
  br label %8, !dbg !1865

; <label>:8:                                      ; preds = %6, %4
  %9 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1866
  ret %struct.cJSON* %9, !dbg !1866
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateObject() #0 !dbg !1867 {
  %item = alloca %struct.cJSON*, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1868, metadata !92), !dbg !1869
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1870
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1869
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1871
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1871
  br i1 %tobool, label %2, label %4, !dbg !1873

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1874
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !1876
  store i32 64, i32* %type, align 8, !dbg !1877
  br label %4, !dbg !1878

; <label>:4:                                      ; preds = %2, %0
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1879
  ret %struct.cJSON* %5, !dbg !1880
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_AddArrayToObject(%struct.cJSON* %object, i8* %name) #0 !dbg !1881 {
  %retval = alloca %struct.cJSON*, align 8
  %object.addr = alloca %struct.cJSON*, align 8
  %name.addr = alloca i8*, align 8
  %array = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !1882, metadata !92), !dbg !1883
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1884, metadata !92), !dbg !1885
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array, metadata !1886, metadata !92), !dbg !1887
  %call = call %struct.cJSON* @cJSON_CreateArray(), !dbg !1888
  store %struct.cJSON* %call, %struct.cJSON** %array, align 8, !dbg !1887
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !1889
  %2 = load i8*, i8** %name.addr, align 8, !dbg !1891
  %3 = load %struct.cJSON*, %struct.cJSON** %array, align 8, !dbg !1892
  %call1 = call i32 @add_item_to_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, %struct.internal_hooks* @global_hooks, i32 0), !dbg !1893
  %tobool = icmp ne i32 %call1, 0, !dbg !1893
  br i1 %tobool, label %4, label %6, !dbg !1894

; <label>:4:                                      ; preds = %0
  %5 = load %struct.cJSON*, %struct.cJSON** %array, align 8, !dbg !1895
  store %struct.cJSON* %5, %struct.cJSON** %retval, align 8, !dbg !1897
  br label %8, !dbg !1897

; <label>:6:                                      ; preds = %0
  %7 = load %struct.cJSON*, %struct.cJSON** %array, align 8, !dbg !1898
  call void @cJSON_Delete(%struct.cJSON* %7), !dbg !1899
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1900
  br label %8, !dbg !1900

; <label>:8:                                      ; preds = %6, %4
  %9 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1901
  ret %struct.cJSON* %9, !dbg !1901
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateArray() #0 !dbg !1902 {
  %item = alloca %struct.cJSON*, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !1903, metadata !92), !dbg !1904
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !1905
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !1904
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1906
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !1906
  br i1 %tobool, label %2, label %4, !dbg !1908

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1909
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !1911
  store i32 32, i32* %type, align 8, !dbg !1912
  br label %4, !dbg !1913

; <label>:4:                                      ; preds = %2, %0
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !1914
  ret %struct.cJSON* %5, !dbg !1915
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_DetachItemViaPointer(%struct.cJSON* %parent, %struct.cJSON* %item) #0 !dbg !1916 {
  %retval = alloca %struct.cJSON*, align 8
  %parent.addr = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %parent, %struct.cJSON** %parent.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %parent.addr, metadata !1919, metadata !92), !dbg !1920
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !1921, metadata !92), !dbg !1922
  %1 = load %struct.cJSON*, %struct.cJSON** %parent.addr, align 8, !dbg !1923
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !1925
  br i1 %cmp, label %4, label %2, !dbg !1926

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1927
  %cmp1 = icmp eq %struct.cJSON* %3, null, !dbg !1929
  br i1 %cmp1, label %4, label %5, !dbg !1930

; <label>:4:                                      ; preds = %2, %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1932
  br label %33, !dbg !1932

; <label>:5:                                      ; preds = %2
  %6 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1934
  %prev = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i32 0, i32 1, !dbg !1936
  %7 = load %struct.cJSON*, %struct.cJSON** %prev, align 8, !dbg !1936
  %cmp2 = icmp ne %struct.cJSON* %7, null, !dbg !1937
  br i1 %cmp2, label %8, label %13, !dbg !1938

; <label>:8:                                      ; preds = %5
  %9 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1939
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i32 0, i32 0, !dbg !1941
  %10 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !1941
  %11 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1942
  %prev3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %11, i32 0, i32 1, !dbg !1943
  %12 = load %struct.cJSON*, %struct.cJSON** %prev3, align 8, !dbg !1943
  %next4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %12, i32 0, i32 0, !dbg !1944
  store %struct.cJSON* %10, %struct.cJSON** %next4, align 8, !dbg !1945
  br label %13, !dbg !1946

; <label>:13:                                     ; preds = %8, %5
  %14 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1947
  %next5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %14, i32 0, i32 0, !dbg !1949
  %15 = load %struct.cJSON*, %struct.cJSON** %next5, align 8, !dbg !1949
  %cmp6 = icmp ne %struct.cJSON* %15, null, !dbg !1950
  br i1 %cmp6, label %16, label %21, !dbg !1951

; <label>:16:                                     ; preds = %13
  %17 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1952
  %prev7 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %17, i32 0, i32 1, !dbg !1954
  %18 = load %struct.cJSON*, %struct.cJSON** %prev7, align 8, !dbg !1954
  %19 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1955
  %next8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %19, i32 0, i32 0, !dbg !1956
  %20 = load %struct.cJSON*, %struct.cJSON** %next8, align 8, !dbg !1956
  %prev9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %20, i32 0, i32 1, !dbg !1957
  store %struct.cJSON* %18, %struct.cJSON** %prev9, align 8, !dbg !1958
  br label %21, !dbg !1959

; <label>:21:                                     ; preds = %16, %13
  %22 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1960
  %23 = load %struct.cJSON*, %struct.cJSON** %parent.addr, align 8, !dbg !1962
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %23, i32 0, i32 2, !dbg !1963
  %24 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !1963
  %cmp10 = icmp eq %struct.cJSON* %22, %24, !dbg !1964
  br i1 %cmp10, label %25, label %29, !dbg !1965

; <label>:25:                                     ; preds = %21
  %26 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1966
  %next11 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %26, i32 0, i32 0, !dbg !1968
  %27 = load %struct.cJSON*, %struct.cJSON** %next11, align 8, !dbg !1968
  %28 = load %struct.cJSON*, %struct.cJSON** %parent.addr, align 8, !dbg !1969
  %child12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %28, i32 0, i32 2, !dbg !1970
  store %struct.cJSON* %27, %struct.cJSON** %child12, align 8, !dbg !1971
  br label %29, !dbg !1972

; <label>:29:                                     ; preds = %25, %21
  %30 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1973
  %prev13 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %30, i32 0, i32 1, !dbg !1974
  store %struct.cJSON* null, %struct.cJSON** %prev13, align 8, !dbg !1975
  %31 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1976
  %next14 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %31, i32 0, i32 0, !dbg !1977
  store %struct.cJSON* null, %struct.cJSON** %next14, align 8, !dbg !1978
  %32 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !1979
  store %struct.cJSON* %32, %struct.cJSON** %retval, align 8, !dbg !1980
  br label %33, !dbg !1980

; <label>:33:                                     ; preds = %29, %4
  %34 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !1981
  ret %struct.cJSON* %34, !dbg !1981
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_DetachItemFromArray(%struct.cJSON* %array, i32 %which) #0 !dbg !1982 {
  %retval = alloca %struct.cJSON*, align 8
  %array.addr = alloca %struct.cJSON*, align 8
  %which.addr = alloca i32, align 4
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !1985, metadata !92), !dbg !1986
  store i32 %which, i32* %which.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %which.addr, metadata !1987, metadata !92), !dbg !1988
  %1 = load i32, i32* %which.addr, align 4, !dbg !1989
  %cmp = icmp slt i32 %1, 0, !dbg !1991
  br i1 %cmp, label %2, label %3, !dbg !1992

; <label>:2:                                      ; preds = %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !1993
  br label %7, !dbg !1993

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1995
  %5 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !1996
  %6 = load i32, i32* %which.addr, align 4, !dbg !1997
  %conv = sext i32 %6 to i64, !dbg !1998
  %call = call %struct.cJSON* @get_array_item(%struct.cJSON* %5, i64 %conv), !dbg !1999
  %call1 = call %struct.cJSON* @cJSON_DetachItemViaPointer(%struct.cJSON* %4, %struct.cJSON* %call), !dbg !2000
  store %struct.cJSON* %call1, %struct.cJSON** %retval, align 8, !dbg !2002
  br label %7, !dbg !2002

; <label>:7:                                      ; preds = %3, %2
  %8 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !2003
  ret %struct.cJSON* %8, !dbg !2003
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_DeleteItemFromArray(%struct.cJSON* %array, i32 %which) #0 !dbg !2004 {
  %array.addr = alloca %struct.cJSON*, align 8
  %which.addr = alloca i32, align 4
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !2007, metadata !92), !dbg !2008
  store i32 %which, i32* %which.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %which.addr, metadata !2009, metadata !92), !dbg !2010
  %1 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !2011
  %2 = load i32, i32* %which.addr, align 4, !dbg !2012
  %call = call %struct.cJSON* @cJSON_DetachItemFromArray(%struct.cJSON* %1, i32 %2), !dbg !2013
  call void @cJSON_Delete(%struct.cJSON* %call), !dbg !2014
  ret void, !dbg !2016
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_DetachItemFromObject(%struct.cJSON* %object, i8* %string) #0 !dbg !2017 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %to_detach = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !2020, metadata !92), !dbg !2021
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2022, metadata !92), !dbg !2023
  call void @llvm.dbg.declare(metadata %struct.cJSON** %to_detach, metadata !2024, metadata !92), !dbg !2025
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2026
  %2 = load i8*, i8** %string.addr, align 8, !dbg !2027
  %call = call %struct.cJSON* @cJSON_GetObjectItem(%struct.cJSON* %1, i8* %2), !dbg !2028
  store %struct.cJSON* %call, %struct.cJSON** %to_detach, align 8, !dbg !2025
  %3 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2029
  %4 = load %struct.cJSON*, %struct.cJSON** %to_detach, align 8, !dbg !2030
  %call1 = call %struct.cJSON* @cJSON_DetachItemViaPointer(%struct.cJSON* %3, %struct.cJSON* %4), !dbg !2031
  ret %struct.cJSON* %call1, !dbg !2032
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_DetachItemFromObjectCaseSensitive(%struct.cJSON* %object, i8* %string) #0 !dbg !2033 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %to_detach = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !2034, metadata !92), !dbg !2035
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2036, metadata !92), !dbg !2037
  call void @llvm.dbg.declare(metadata %struct.cJSON** %to_detach, metadata !2038, metadata !92), !dbg !2039
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2040
  %2 = load i8*, i8** %string.addr, align 8, !dbg !2041
  %call = call %struct.cJSON* @cJSON_GetObjectItemCaseSensitive(%struct.cJSON* %1, i8* %2), !dbg !2042
  store %struct.cJSON* %call, %struct.cJSON** %to_detach, align 8, !dbg !2039
  %3 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2043
  %4 = load %struct.cJSON*, %struct.cJSON** %to_detach, align 8, !dbg !2044
  %call1 = call %struct.cJSON* @cJSON_DetachItemViaPointer(%struct.cJSON* %3, %struct.cJSON* %4), !dbg !2045
  ret %struct.cJSON* %call1, !dbg !2046
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_DeleteItemFromObject(%struct.cJSON* %object, i8* %string) #0 !dbg !2047 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !2050, metadata !92), !dbg !2051
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2052, metadata !92), !dbg !2053
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2054
  %2 = load i8*, i8** %string.addr, align 8, !dbg !2055
  %call = call %struct.cJSON* @cJSON_DetachItemFromObject(%struct.cJSON* %1, i8* %2), !dbg !2056
  call void @cJSON_Delete(%struct.cJSON* %call), !dbg !2057
  ret void, !dbg !2059
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_DeleteItemFromObjectCaseSensitive(%struct.cJSON* %object, i8* %string) #0 !dbg !2060 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !2061, metadata !92), !dbg !2062
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2063, metadata !92), !dbg !2064
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2065
  %2 = load i8*, i8** %string.addr, align 8, !dbg !2066
  %call = call %struct.cJSON* @cJSON_DetachItemFromObjectCaseSensitive(%struct.cJSON* %1, i8* %2), !dbg !2067
  call void @cJSON_Delete(%struct.cJSON* %call), !dbg !2068
  ret void, !dbg !2070
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_InsertItemInArray(%struct.cJSON* %array, i32 %which, %struct.cJSON* %newitem) #0 !dbg !2071 {
  %array.addr = alloca %struct.cJSON*, align 8
  %which.addr = alloca i32, align 4
  %newitem.addr = alloca %struct.cJSON*, align 8
  %after_inserted = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !2074, metadata !92), !dbg !2075
  store i32 %which, i32* %which.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %which.addr, metadata !2076, metadata !92), !dbg !2077
  store %struct.cJSON* %newitem, %struct.cJSON** %newitem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %newitem.addr, metadata !2078, metadata !92), !dbg !2079
  call void @llvm.dbg.declare(metadata %struct.cJSON** %after_inserted, metadata !2080, metadata !92), !dbg !2081
  store %struct.cJSON* null, %struct.cJSON** %after_inserted, align 8, !dbg !2081
  %1 = load i32, i32* %which.addr, align 4, !dbg !2082
  %cmp = icmp slt i32 %1, 0, !dbg !2084
  br i1 %cmp, label %2, label %3, !dbg !2085

; <label>:2:                                      ; preds = %0
  br label %28, !dbg !2086

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !2088
  %5 = load i32, i32* %which.addr, align 4, !dbg !2089
  %conv = sext i32 %5 to i64, !dbg !2090
  %call = call %struct.cJSON* @get_array_item(%struct.cJSON* %4, i64 %conv), !dbg !2091
  store %struct.cJSON* %call, %struct.cJSON** %after_inserted, align 8, !dbg !2092
  %6 = load %struct.cJSON*, %struct.cJSON** %after_inserted, align 8, !dbg !2093
  %cmp1 = icmp eq %struct.cJSON* %6, null, !dbg !2095
  br i1 %cmp1, label %7, label %10, !dbg !2096

; <label>:7:                                      ; preds = %3
  %8 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !2097
  %9 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2099
  %call3 = call i32 @add_item_to_array(%struct.cJSON* %8, %struct.cJSON* %9), !dbg !2100
  br label %28, !dbg !2101

; <label>:10:                                     ; preds = %3
  %11 = load %struct.cJSON*, %struct.cJSON** %after_inserted, align 8, !dbg !2102
  %12 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2103
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %12, i32 0, i32 0, !dbg !2104
  store %struct.cJSON* %11, %struct.cJSON** %next, align 8, !dbg !2105
  %13 = load %struct.cJSON*, %struct.cJSON** %after_inserted, align 8, !dbg !2106
  %prev = getelementptr inbounds %struct.cJSON, %struct.cJSON* %13, i32 0, i32 1, !dbg !2107
  %14 = load %struct.cJSON*, %struct.cJSON** %prev, align 8, !dbg !2107
  %15 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2108
  %prev4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %15, i32 0, i32 1, !dbg !2109
  store %struct.cJSON* %14, %struct.cJSON** %prev4, align 8, !dbg !2110
  %16 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2111
  %17 = load %struct.cJSON*, %struct.cJSON** %after_inserted, align 8, !dbg !2112
  %prev5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %17, i32 0, i32 1, !dbg !2113
  store %struct.cJSON* %16, %struct.cJSON** %prev5, align 8, !dbg !2114
  %18 = load %struct.cJSON*, %struct.cJSON** %after_inserted, align 8, !dbg !2115
  %19 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !2117
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %19, i32 0, i32 2, !dbg !2118
  %20 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !2118
  %cmp6 = icmp eq %struct.cJSON* %18, %20, !dbg !2119
  br i1 %cmp6, label %21, label %24, !dbg !2120

; <label>:21:                                     ; preds = %10
  %22 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2121
  %23 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !2123
  %child8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %23, i32 0, i32 2, !dbg !2124
  store %struct.cJSON* %22, %struct.cJSON** %child8, align 8, !dbg !2125
  br label %28, !dbg !2126

; <label>:24:                                     ; preds = %10
  %25 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2127
  %26 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2129
  %prev9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %26, i32 0, i32 1, !dbg !2130
  %27 = load %struct.cJSON*, %struct.cJSON** %prev9, align 8, !dbg !2130
  %next10 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %27, i32 0, i32 0, !dbg !2131
  store %struct.cJSON* %25, %struct.cJSON** %next10, align 8, !dbg !2132
  br label %28

; <label>:28:                                     ; preds = %2, %7, %24, %21
  ret void, !dbg !2133
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_ReplaceItemViaPointer(%struct.cJSON* %parent, %struct.cJSON* %item, %struct.cJSON* %replacement) #0 !dbg !2134 {
  %retval = alloca i32, align 4
  %parent.addr = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  %replacement.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %parent, %struct.cJSON** %parent.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %parent.addr, metadata !2137, metadata !92), !dbg !2138
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !2139, metadata !92), !dbg !2140
  store %struct.cJSON* %replacement, %struct.cJSON** %replacement.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %replacement.addr, metadata !2141, metadata !92), !dbg !2142
  %1 = load %struct.cJSON*, %struct.cJSON** %parent.addr, align 8, !dbg !2143
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !2145
  br i1 %cmp, label %6, label %2, !dbg !2146

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2147
  %cmp1 = icmp eq %struct.cJSON* %3, null, !dbg !2149
  br i1 %cmp1, label %6, label %4, !dbg !2150

; <label>:4:                                      ; preds = %2
  %5 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2151
  %cmp2 = icmp eq %struct.cJSON* %5, null, !dbg !2153
  br i1 %cmp2, label %6, label %7, !dbg !2154

; <label>:6:                                      ; preds = %4, %2, %0
  store i32 0, i32* %retval, align 4, !dbg !2156
  br label %42, !dbg !2156

; <label>:7:                                      ; preds = %4
  %8 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2158
  %9 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2160
  %cmp3 = icmp eq %struct.cJSON* %8, %9, !dbg !2161
  br i1 %cmp3, label %10, label %11, !dbg !2162

; <label>:10:                                     ; preds = %7
  store i32 1, i32* %retval, align 4, !dbg !2163
  br label %42, !dbg !2163

; <label>:11:                                     ; preds = %7
  %12 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2165
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %12, i32 0, i32 0, !dbg !2166
  %13 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !2166
  %14 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2167
  %next4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %14, i32 0, i32 0, !dbg !2168
  store %struct.cJSON* %13, %struct.cJSON** %next4, align 8, !dbg !2169
  %15 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2170
  %prev = getelementptr inbounds %struct.cJSON, %struct.cJSON* %15, i32 0, i32 1, !dbg !2171
  %16 = load %struct.cJSON*, %struct.cJSON** %prev, align 8, !dbg !2171
  %17 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2172
  %prev5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %17, i32 0, i32 1, !dbg !2173
  store %struct.cJSON* %16, %struct.cJSON** %prev5, align 8, !dbg !2174
  %18 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2175
  %next6 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %18, i32 0, i32 0, !dbg !2177
  %19 = load %struct.cJSON*, %struct.cJSON** %next6, align 8, !dbg !2177
  %cmp7 = icmp ne %struct.cJSON* %19, null, !dbg !2178
  br i1 %cmp7, label %20, label %24, !dbg !2179

; <label>:20:                                     ; preds = %11
  %21 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2180
  %22 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2182
  %next8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %22, i32 0, i32 0, !dbg !2183
  %23 = load %struct.cJSON*, %struct.cJSON** %next8, align 8, !dbg !2183
  %prev9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %23, i32 0, i32 1, !dbg !2184
  store %struct.cJSON* %21, %struct.cJSON** %prev9, align 8, !dbg !2185
  br label %24, !dbg !2186

; <label>:24:                                     ; preds = %20, %11
  %25 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2187
  %prev10 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %25, i32 0, i32 1, !dbg !2189
  %26 = load %struct.cJSON*, %struct.cJSON** %prev10, align 8, !dbg !2189
  %cmp11 = icmp ne %struct.cJSON* %26, null, !dbg !2190
  br i1 %cmp11, label %27, label %31, !dbg !2191

; <label>:27:                                     ; preds = %24
  %28 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2192
  %29 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2194
  %prev12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %29, i32 0, i32 1, !dbg !2195
  %30 = load %struct.cJSON*, %struct.cJSON** %prev12, align 8, !dbg !2195
  %next13 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %30, i32 0, i32 0, !dbg !2196
  store %struct.cJSON* %28, %struct.cJSON** %next13, align 8, !dbg !2197
  br label %31, !dbg !2198

; <label>:31:                                     ; preds = %27, %24
  %32 = load %struct.cJSON*, %struct.cJSON** %parent.addr, align 8, !dbg !2199
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %32, i32 0, i32 2, !dbg !2201
  %33 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !2201
  %34 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2202
  %cmp14 = icmp eq %struct.cJSON* %33, %34, !dbg !2203
  br i1 %cmp14, label %35, label %38, !dbg !2204

; <label>:35:                                     ; preds = %31
  %36 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2205
  %37 = load %struct.cJSON*, %struct.cJSON** %parent.addr, align 8, !dbg !2207
  %child15 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %37, i32 0, i32 2, !dbg !2208
  store %struct.cJSON* %36, %struct.cJSON** %child15, align 8, !dbg !2209
  br label %38, !dbg !2210

; <label>:38:                                     ; preds = %35, %31
  %39 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2211
  %next16 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %39, i32 0, i32 0, !dbg !2212
  store %struct.cJSON* null, %struct.cJSON** %next16, align 8, !dbg !2213
  %40 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2214
  %prev17 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %40, i32 0, i32 1, !dbg !2215
  store %struct.cJSON* null, %struct.cJSON** %prev17, align 8, !dbg !2216
  %41 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2217
  call void @cJSON_Delete(%struct.cJSON* %41), !dbg !2218
  store i32 1, i32* %retval, align 4, !dbg !2219
  br label %42, !dbg !2219

; <label>:42:                                     ; preds = %38, %10, %6
  %43 = load i32, i32* %retval, align 4, !dbg !2220
  ret i32 %43, !dbg !2220
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_ReplaceItemInArray(%struct.cJSON* %array, i32 %which, %struct.cJSON* %newitem) #0 !dbg !2221 {
  %array.addr = alloca %struct.cJSON*, align 8
  %which.addr = alloca i32, align 4
  %newitem.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !2222, metadata !92), !dbg !2223
  store i32 %which, i32* %which.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %which.addr, metadata !2224, metadata !92), !dbg !2225
  store %struct.cJSON* %newitem, %struct.cJSON** %newitem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %newitem.addr, metadata !2226, metadata !92), !dbg !2227
  %1 = load i32, i32* %which.addr, align 4, !dbg !2228
  %cmp = icmp slt i32 %1, 0, !dbg !2230
  br i1 %cmp, label %2, label %3, !dbg !2231

; <label>:2:                                      ; preds = %0
  br label %8, !dbg !2232

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !2234
  %5 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !2235
  %6 = load i32, i32* %which.addr, align 4, !dbg !2236
  %conv = sext i32 %6 to i64, !dbg !2237
  %call = call %struct.cJSON* @get_array_item(%struct.cJSON* %5, i64 %conv), !dbg !2238
  %7 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2239
  %call1 = call i32 @cJSON_ReplaceItemViaPointer(%struct.cJSON* %4, %struct.cJSON* %call, %struct.cJSON* %7), !dbg !2240
  br label %8, !dbg !2242

; <label>:8:                                      ; preds = %3, %2
  ret void, !dbg !2243
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_ReplaceItemInObject(%struct.cJSON* %object, i8* %string, %struct.cJSON* %newitem) #0 !dbg !2244 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %newitem.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !2245, metadata !92), !dbg !2246
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2247, metadata !92), !dbg !2248
  store %struct.cJSON* %newitem, %struct.cJSON** %newitem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %newitem.addr, metadata !2249, metadata !92), !dbg !2250
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2251
  %2 = load i8*, i8** %string.addr, align 8, !dbg !2252
  %3 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2253
  %call = call i32 @replace_item_in_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, i32 0), !dbg !2254
  ret void, !dbg !2255
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @replace_item_in_object(%struct.cJSON* %object, i8* %string, %struct.cJSON* %replacement, i32 %case_sensitive) #0 !dbg !2256 {
  %retval = alloca i32, align 4
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %replacement.addr = alloca %struct.cJSON*, align 8
  %case_sensitive.addr = alloca i32, align 4
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !2259, metadata !92), !dbg !2260
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2261, metadata !92), !dbg !2262
  store %struct.cJSON* %replacement, %struct.cJSON** %replacement.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %replacement.addr, metadata !2263, metadata !92), !dbg !2264
  store i32 %case_sensitive, i32* %case_sensitive.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %case_sensitive.addr, metadata !2265, metadata !92), !dbg !2266
  %1 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2267
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !2269
  br i1 %cmp, label %4, label %2, !dbg !2270

; <label>:2:                                      ; preds = %0
  %3 = load i8*, i8** %string.addr, align 8, !dbg !2271
  %cmp1 = icmp eq i8* %3, null, !dbg !2273
  br i1 %cmp1, label %4, label %5, !dbg !2274

; <label>:4:                                      ; preds = %2, %0
  store i32 0, i32* %retval, align 4, !dbg !2276
  br label %24, !dbg !2276

; <label>:5:                                      ; preds = %2
  %6 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2278
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i32 0, i32 3, !dbg !2280
  %7 = load i32, i32* %type, align 8, !dbg !2280
  %and = and i32 %7, 512, !dbg !2281
  %tobool = icmp ne i32 %and, 0, !dbg !2281
  br i1 %tobool, label %14, label %8, !dbg !2282

; <label>:8:                                      ; preds = %5
  %9 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2283
  %string2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i32 0, i32 7, !dbg !2285
  %10 = load i8*, i8** %string2, align 8, !dbg !2285
  %cmp3 = icmp ne i8* %10, null, !dbg !2286
  br i1 %cmp3, label %11, label %14, !dbg !2287

; <label>:11:                                     ; preds = %8
  %12 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2288
  %string4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %12, i32 0, i32 7, !dbg !2290
  %13 = load i8*, i8** %string4, align 8, !dbg !2290
  call void @cJSON_free(i8* %13), !dbg !2291
  br label %14, !dbg !2292

; <label>:14:                                     ; preds = %11, %8, %5
  %15 = load i8*, i8** %string.addr, align 8, !dbg !2293
  %call = call i8* @cJSON_strdup(i8* %15, %struct.internal_hooks* @global_hooks), !dbg !2294
  %16 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2295
  %string5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %16, i32 0, i32 7, !dbg !2296
  store i8* %call, i8** %string5, align 8, !dbg !2297
  %17 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2298
  %type6 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %17, i32 0, i32 3, !dbg !2299
  %18 = load i32, i32* %type6, align 8, !dbg !2300
  %and7 = and i32 %18, -513, !dbg !2300
  store i32 %and7, i32* %type6, align 8, !dbg !2300
  %19 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2301
  %20 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2302
  %21 = load i8*, i8** %string.addr, align 8, !dbg !2303
  %22 = load i32, i32* %case_sensitive.addr, align 4, !dbg !2304
  %call8 = call %struct.cJSON* @get_object_item(%struct.cJSON* %20, i8* %21, i32 %22), !dbg !2305
  %23 = load %struct.cJSON*, %struct.cJSON** %replacement.addr, align 8, !dbg !2306
  %call9 = call i32 @cJSON_ReplaceItemViaPointer(%struct.cJSON* %19, %struct.cJSON* %call8, %struct.cJSON* %23), !dbg !2307
  store i32 1, i32* %retval, align 4, !dbg !2308
  br label %24, !dbg !2308

; <label>:24:                                     ; preds = %14, %4
  %25 = load i32, i32* %retval, align 4, !dbg !2309
  ret i32 %25, !dbg !2309
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_ReplaceItemInObjectCaseSensitive(%struct.cJSON* %object, i8* %string, %struct.cJSON* %newitem) #0 !dbg !2310 {
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %newitem.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !2311, metadata !92), !dbg !2312
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2313, metadata !92), !dbg !2314
  store %struct.cJSON* %newitem, %struct.cJSON** %newitem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %newitem.addr, metadata !2315, metadata !92), !dbg !2316
  %1 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !2317
  %2 = load i8*, i8** %string.addr, align 8, !dbg !2318
  %3 = load %struct.cJSON*, %struct.cJSON** %newitem.addr, align 8, !dbg !2319
  %call = call i32 @replace_item_in_object(%struct.cJSON* %1, i8* %2, %struct.cJSON* %3, i32 1), !dbg !2320
  ret void, !dbg !2321
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @cJSON_strdup(i8* %string, %struct.internal_hooks* %hooks) #0 !dbg !2322 {
  %retval = alloca i8*, align 8
  %string.addr = alloca i8*, align 8
  %hooks.addr = alloca %struct.internal_hooks*, align 8
  %length = alloca i64, align 8
  %copy = alloca i8*, align 8
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2325, metadata !92), !dbg !2326
  store %struct.internal_hooks* %hooks, %struct.internal_hooks** %hooks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.internal_hooks** %hooks.addr, metadata !2327, metadata !92), !dbg !2328
  call void @llvm.dbg.declare(metadata i64* %length, metadata !2329, metadata !92), !dbg !2330
  store i64 0, i64* %length, align 8, !dbg !2330
  call void @llvm.dbg.declare(metadata i8** %copy, metadata !2331, metadata !92), !dbg !2332
  store i8* null, i8** %copy, align 8, !dbg !2332
  %1 = load i8*, i8** %string.addr, align 8, !dbg !2333
  %cmp = icmp eq i8* %1, null, !dbg !2335
  br i1 %cmp, label %2, label %3, !dbg !2336

; <label>:2:                                      ; preds = %0
  store i8* null, i8** %retval, align 8, !dbg !2337
  br label %15, !dbg !2337

; <label>:3:                                      ; preds = %0
  %4 = load i8*, i8** %string.addr, align 8, !dbg !2339
  %call = call i64 @strlen(i8* %4) #8, !dbg !2340
  %add = add i64 %call, 1, !dbg !2341
  store i64 %add, i64* %length, align 8, !dbg !2342
  %5 = load %struct.internal_hooks*, %struct.internal_hooks** %hooks.addr, align 8, !dbg !2343
  %allocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %5, i32 0, i32 0, !dbg !2344
  %6 = load i8* (i64)*, i8* (i64)** %allocate, align 8, !dbg !2344
  %7 = load i64, i64* %length, align 8, !dbg !2345
  %call1 = call i8* %6(i64 %7), !dbg !2343
  store i8* %call1, i8** %copy, align 8, !dbg !2346
  %8 = load i8*, i8** %copy, align 8, !dbg !2347
  %cmp2 = icmp eq i8* %8, null, !dbg !2349
  br i1 %cmp2, label %9, label %10, !dbg !2350

; <label>:9:                                      ; preds = %3
  store i8* null, i8** %retval, align 8, !dbg !2351
  br label %15, !dbg !2351

; <label>:10:                                     ; preds = %3
  %11 = load i8*, i8** %copy, align 8, !dbg !2353
  %12 = load i8*, i8** %string.addr, align 8, !dbg !2354
  %13 = load i64, i64* %length, align 8, !dbg !2355
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 %13, i32 1, i1 false), !dbg !2356
  %14 = load i8*, i8** %copy, align 8, !dbg !2357
  store i8* %14, i8** %retval, align 8, !dbg !2358
  br label %15, !dbg !2358

; <label>:15:                                     ; preds = %10, %9, %2
  %16 = load i8*, i8** %retval, align 8, !dbg !2359
  ret i8* %16, !dbg !2359
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateStringReference(i8* %string) #0 !dbg !2360 {
  %string.addr = alloca i8*, align 8
  %item = alloca %struct.cJSON*, align 8
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2361, metadata !92), !dbg !2362
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !2363, metadata !92), !dbg !2364
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !2365
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !2364
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2366
  %cmp = icmp ne %struct.cJSON* %1, null, !dbg !2368
  br i1 %cmp, label %2, label %6, !dbg !2369

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2370
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !2372
  store i32 272, i32* %type, align 8, !dbg !2373
  %4 = load i8*, i8** %string.addr, align 8, !dbg !2374
  %call1 = call i8* @cast_away_const(i8* %4), !dbg !2375
  %5 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2376
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %5, i32 0, i32 4, !dbg !2377
  store i8* %call1, i8** %valuestring, align 8, !dbg !2378
  br label %6, !dbg !2379

; <label>:6:                                      ; preds = %2, %0
  %7 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2380
  ret %struct.cJSON* %7, !dbg !2381
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @cast_away_const(i8* %string) #0 !dbg !2382 {
  %string.addr = alloca i8*, align 8
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2387, metadata !92), !dbg !2388
  %1 = load i8*, i8** %string.addr, align 8, !dbg !2389
  ret i8* %1, !dbg !2390
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateObjectReference(%struct.cJSON* %child) #0 !dbg !2391 {
  %child.addr = alloca %struct.cJSON*, align 8
  %item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %child, %struct.cJSON** %child.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %child.addr, metadata !2394, metadata !92), !dbg !2395
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !2396, metadata !92), !dbg !2397
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !2398
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !2397
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2399
  %cmp = icmp ne %struct.cJSON* %1, null, !dbg !2401
  br i1 %cmp, label %2, label %8, !dbg !2402

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2403
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !2405
  store i32 320, i32* %type, align 8, !dbg !2406
  %4 = load %struct.cJSON*, %struct.cJSON** %child.addr, align 8, !dbg !2407
  %5 = bitcast %struct.cJSON* %4 to i8*, !dbg !2407
  %call1 = call i8* @cast_away_const(i8* %5), !dbg !2408
  %6 = bitcast i8* %call1 to %struct.cJSON*, !dbg !2409
  %7 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2410
  %child2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i32 0, i32 2, !dbg !2411
  store %struct.cJSON* %6, %struct.cJSON** %child2, align 8, !dbg !2412
  br label %8, !dbg !2413

; <label>:8:                                      ; preds = %2, %0
  %9 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2414
  ret %struct.cJSON* %9, !dbg !2415
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateArrayReference(%struct.cJSON* %child) #0 !dbg !2416 {
  %child.addr = alloca %struct.cJSON*, align 8
  %item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %child, %struct.cJSON** %child.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %child.addr, metadata !2417, metadata !92), !dbg !2418
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !2419, metadata !92), !dbg !2420
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !2421
  store %struct.cJSON* %call, %struct.cJSON** %item, align 8, !dbg !2420
  %1 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2422
  %cmp = icmp ne %struct.cJSON* %1, null, !dbg !2424
  br i1 %cmp, label %2, label %8, !dbg !2425

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2426
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %3, i32 0, i32 3, !dbg !2428
  store i32 288, i32* %type, align 8, !dbg !2429
  %4 = load %struct.cJSON*, %struct.cJSON** %child.addr, align 8, !dbg !2430
  %5 = bitcast %struct.cJSON* %4 to i8*, !dbg !2430
  %call1 = call i8* @cast_away_const(i8* %5), !dbg !2431
  %6 = bitcast i8* %call1 to %struct.cJSON*, !dbg !2432
  %7 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2433
  %child2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i32 0, i32 2, !dbg !2434
  store %struct.cJSON* %6, %struct.cJSON** %child2, align 8, !dbg !2435
  br label %8, !dbg !2436

; <label>:8:                                      ; preds = %2, %0
  %9 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !2437
  ret %struct.cJSON* %9, !dbg !2438
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateIntArray(i32* %numbers, i32 %count) #0 !dbg !2439 {
  %retval = alloca %struct.cJSON*, align 8
  %numbers.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %n = alloca %struct.cJSON*, align 8
  %p = alloca %struct.cJSON*, align 8
  %a = alloca %struct.cJSON*, align 8
  store i32* %numbers, i32** %numbers.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %numbers.addr, metadata !2443, metadata !92), !dbg !2444
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2445, metadata !92), !dbg !2446
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2447, metadata !92), !dbg !2448
  store i64 0, i64* %i, align 8, !dbg !2448
  call void @llvm.dbg.declare(metadata %struct.cJSON** %n, metadata !2449, metadata !92), !dbg !2450
  store %struct.cJSON* null, %struct.cJSON** %n, align 8, !dbg !2450
  call void @llvm.dbg.declare(metadata %struct.cJSON** %p, metadata !2451, metadata !92), !dbg !2452
  store %struct.cJSON* null, %struct.cJSON** %p, align 8, !dbg !2452
  call void @llvm.dbg.declare(metadata %struct.cJSON** %a, metadata !2453, metadata !92), !dbg !2454
  store %struct.cJSON* null, %struct.cJSON** %a, align 8, !dbg !2454
  %1 = load i32, i32* %count.addr, align 4, !dbg !2455
  %cmp = icmp slt i32 %1, 0, !dbg !2457
  br i1 %cmp, label %4, label %2, !dbg !2458

; <label>:2:                                      ; preds = %0
  %3 = load i32*, i32** %numbers.addr, align 8, !dbg !2459
  %cmp1 = icmp eq i32* %3, null, !dbg !2461
  br i1 %cmp1, label %4, label %5, !dbg !2462

; <label>:4:                                      ; preds = %2, %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2464
  br label %34, !dbg !2464

; <label>:5:                                      ; preds = %2
  %call = call %struct.cJSON* @cJSON_CreateArray(), !dbg !2466
  store %struct.cJSON* %call, %struct.cJSON** %a, align 8, !dbg !2467
  store i64 0, i64* %i, align 8, !dbg !2468
  br label %6, !dbg !2470

; <label>:6:                                      ; preds = %30, %5
  %7 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2471
  %tobool = icmp ne %struct.cJSON* %7, null, !dbg !2471
  br i1 %tobool, label %8, label %11, !dbg !2474

; <label>:8:                                      ; preds = %6
  %9 = load i64, i64* %i, align 8, !dbg !2475
  %10 = load i32, i32* %count.addr, align 4, !dbg !2477
  %conv = sext i32 %10 to i64, !dbg !2478
  %cmp2 = icmp ult i64 %9, %conv, !dbg !2479
  br label %11

; <label>:11:                                     ; preds = %8, %6
  %12 = phi i1 [ false, %6 ], [ %cmp2, %8 ]
  br i1 %12, label %13, label %32, !dbg !2480

; <label>:13:                                     ; preds = %11
  %14 = load i32*, i32** %numbers.addr, align 8, !dbg !2482
  %15 = load i64, i64* %i, align 8, !dbg !2484
  %arrayidx = getelementptr inbounds i32, i32* %14, i64 %15, !dbg !2482
  %16 = load i32, i32* %arrayidx, align 4, !dbg !2482
  %conv4 = sitofp i32 %16 to double, !dbg !2482
  %call5 = call %struct.cJSON* @cJSON_CreateNumber(double %conv4), !dbg !2485
  store %struct.cJSON* %call5, %struct.cJSON** %n, align 8, !dbg !2486
  %17 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2487
  %tobool6 = icmp ne %struct.cJSON* %17, null, !dbg !2487
  br i1 %tobool6, label %20, label %18, !dbg !2489

; <label>:18:                                     ; preds = %13
  %19 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2490
  call void @cJSON_Delete(%struct.cJSON* %19), !dbg !2492
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2493
  br label %34, !dbg !2493

; <label>:20:                                     ; preds = %13
  %21 = load i64, i64* %i, align 8, !dbg !2494
  %tobool7 = icmp ne i64 %21, 0, !dbg !2494
  br i1 %tobool7, label %25, label %22, !dbg !2496

; <label>:22:                                     ; preds = %20
  %23 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2497
  %24 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2499
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %24, i32 0, i32 2, !dbg !2500
  store %struct.cJSON* %23, %struct.cJSON** %child, align 8, !dbg !2501
  br label %28, !dbg !2502

; <label>:25:                                     ; preds = %20
  %26 = load %struct.cJSON*, %struct.cJSON** %p, align 8, !dbg !2503
  %27 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2505
  call void @suffix_object(%struct.cJSON* %26, %struct.cJSON* %27), !dbg !2506
  br label %28

; <label>:28:                                     ; preds = %25, %22
  %29 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2507
  store %struct.cJSON* %29, %struct.cJSON** %p, align 8, !dbg !2508
  br label %30, !dbg !2509

; <label>:30:                                     ; preds = %28
  %31 = load i64, i64* %i, align 8, !dbg !2510
  %inc = add i64 %31, 1, !dbg !2510
  store i64 %inc, i64* %i, align 8, !dbg !2510
  br label %6, !dbg !2512, !llvm.loop !2513

; <label>:32:                                     ; preds = %11
  %33 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2516
  store %struct.cJSON* %33, %struct.cJSON** %retval, align 8, !dbg !2517
  br label %34, !dbg !2517

; <label>:34:                                     ; preds = %32, %18, %4
  %35 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !2518
  ret %struct.cJSON* %35, !dbg !2518
}

; Function Attrs: noinline nounwind uwtable
define internal void @suffix_object(%struct.cJSON* %prev, %struct.cJSON* %item) #0 !dbg !2519 {
  %prev.addr = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %prev, %struct.cJSON** %prev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %prev.addr, metadata !2520, metadata !92), !dbg !2521
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !2522, metadata !92), !dbg !2523
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2524
  %2 = load %struct.cJSON*, %struct.cJSON** %prev.addr, align 8, !dbg !2525
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i32 0, i32 0, !dbg !2526
  store %struct.cJSON* %1, %struct.cJSON** %next, align 8, !dbg !2527
  %3 = load %struct.cJSON*, %struct.cJSON** %prev.addr, align 8, !dbg !2528
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2529
  %prev1 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 1, !dbg !2530
  store %struct.cJSON* %3, %struct.cJSON** %prev1, align 8, !dbg !2531
  ret void, !dbg !2532
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateFloatArray(float* %numbers, i32 %count) #0 !dbg !2533 {
  %retval = alloca %struct.cJSON*, align 8
  %numbers.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %n = alloca %struct.cJSON*, align 8
  %p = alloca %struct.cJSON*, align 8
  %a = alloca %struct.cJSON*, align 8
  store float* %numbers, float** %numbers.addr, align 8
  call void @llvm.dbg.declare(metadata float** %numbers.addr, metadata !2539, metadata !92), !dbg !2540
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2541, metadata !92), !dbg !2542
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2543, metadata !92), !dbg !2544
  store i64 0, i64* %i, align 8, !dbg !2544
  call void @llvm.dbg.declare(metadata %struct.cJSON** %n, metadata !2545, metadata !92), !dbg !2546
  store %struct.cJSON* null, %struct.cJSON** %n, align 8, !dbg !2546
  call void @llvm.dbg.declare(metadata %struct.cJSON** %p, metadata !2547, metadata !92), !dbg !2548
  store %struct.cJSON* null, %struct.cJSON** %p, align 8, !dbg !2548
  call void @llvm.dbg.declare(metadata %struct.cJSON** %a, metadata !2549, metadata !92), !dbg !2550
  store %struct.cJSON* null, %struct.cJSON** %a, align 8, !dbg !2550
  %1 = load i32, i32* %count.addr, align 4, !dbg !2551
  %cmp = icmp slt i32 %1, 0, !dbg !2553
  br i1 %cmp, label %4, label %2, !dbg !2554

; <label>:2:                                      ; preds = %0
  %3 = load float*, float** %numbers.addr, align 8, !dbg !2555
  %cmp1 = icmp eq float* %3, null, !dbg !2557
  br i1 %cmp1, label %4, label %5, !dbg !2558

; <label>:4:                                      ; preds = %2, %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2560
  br label %34, !dbg !2560

; <label>:5:                                      ; preds = %2
  %call = call %struct.cJSON* @cJSON_CreateArray(), !dbg !2562
  store %struct.cJSON* %call, %struct.cJSON** %a, align 8, !dbg !2563
  store i64 0, i64* %i, align 8, !dbg !2564
  br label %6, !dbg !2566

; <label>:6:                                      ; preds = %30, %5
  %7 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2567
  %tobool = icmp ne %struct.cJSON* %7, null, !dbg !2567
  br i1 %tobool, label %8, label %11, !dbg !2570

; <label>:8:                                      ; preds = %6
  %9 = load i64, i64* %i, align 8, !dbg !2571
  %10 = load i32, i32* %count.addr, align 4, !dbg !2573
  %conv = sext i32 %10 to i64, !dbg !2574
  %cmp2 = icmp ult i64 %9, %conv, !dbg !2575
  br label %11

; <label>:11:                                     ; preds = %8, %6
  %12 = phi i1 [ false, %6 ], [ %cmp2, %8 ]
  br i1 %12, label %13, label %32, !dbg !2576

; <label>:13:                                     ; preds = %11
  %14 = load float*, float** %numbers.addr, align 8, !dbg !2578
  %15 = load i64, i64* %i, align 8, !dbg !2580
  %arrayidx = getelementptr inbounds float, float* %14, i64 %15, !dbg !2578
  %16 = load float, float* %arrayidx, align 4, !dbg !2578
  %conv4 = fpext float %16 to double, !dbg !2581
  %call5 = call %struct.cJSON* @cJSON_CreateNumber(double %conv4), !dbg !2582
  store %struct.cJSON* %call5, %struct.cJSON** %n, align 8, !dbg !2583
  %17 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2584
  %tobool6 = icmp ne %struct.cJSON* %17, null, !dbg !2584
  br i1 %tobool6, label %20, label %18, !dbg !2586

; <label>:18:                                     ; preds = %13
  %19 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2587
  call void @cJSON_Delete(%struct.cJSON* %19), !dbg !2589
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2590
  br label %34, !dbg !2590

; <label>:20:                                     ; preds = %13
  %21 = load i64, i64* %i, align 8, !dbg !2591
  %tobool7 = icmp ne i64 %21, 0, !dbg !2591
  br i1 %tobool7, label %25, label %22, !dbg !2593

; <label>:22:                                     ; preds = %20
  %23 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2594
  %24 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2596
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %24, i32 0, i32 2, !dbg !2597
  store %struct.cJSON* %23, %struct.cJSON** %child, align 8, !dbg !2598
  br label %28, !dbg !2599

; <label>:25:                                     ; preds = %20
  %26 = load %struct.cJSON*, %struct.cJSON** %p, align 8, !dbg !2600
  %27 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2602
  call void @suffix_object(%struct.cJSON* %26, %struct.cJSON* %27), !dbg !2603
  br label %28

; <label>:28:                                     ; preds = %25, %22
  %29 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2604
  store %struct.cJSON* %29, %struct.cJSON** %p, align 8, !dbg !2605
  br label %30, !dbg !2606

; <label>:30:                                     ; preds = %28
  %31 = load i64, i64* %i, align 8, !dbg !2607
  %inc = add i64 %31, 1, !dbg !2607
  store i64 %inc, i64* %i, align 8, !dbg !2607
  br label %6, !dbg !2609, !llvm.loop !2610

; <label>:32:                                     ; preds = %11
  %33 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2613
  store %struct.cJSON* %33, %struct.cJSON** %retval, align 8, !dbg !2614
  br label %34, !dbg !2614

; <label>:34:                                     ; preds = %32, %18, %4
  %35 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !2615
  ret %struct.cJSON* %35, !dbg !2615
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateDoubleArray(double* %numbers, i32 %count) #0 !dbg !2616 {
  %retval = alloca %struct.cJSON*, align 8
  %numbers.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %n = alloca %struct.cJSON*, align 8
  %p = alloca %struct.cJSON*, align 8
  %a = alloca %struct.cJSON*, align 8
  store double* %numbers, double** %numbers.addr, align 8
  call void @llvm.dbg.declare(metadata double** %numbers.addr, metadata !2620, metadata !92), !dbg !2621
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2622, metadata !92), !dbg !2623
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2624, metadata !92), !dbg !2625
  store i64 0, i64* %i, align 8, !dbg !2625
  call void @llvm.dbg.declare(metadata %struct.cJSON** %n, metadata !2626, metadata !92), !dbg !2627
  store %struct.cJSON* null, %struct.cJSON** %n, align 8, !dbg !2627
  call void @llvm.dbg.declare(metadata %struct.cJSON** %p, metadata !2628, metadata !92), !dbg !2629
  store %struct.cJSON* null, %struct.cJSON** %p, align 8, !dbg !2629
  call void @llvm.dbg.declare(metadata %struct.cJSON** %a, metadata !2630, metadata !92), !dbg !2631
  store %struct.cJSON* null, %struct.cJSON** %a, align 8, !dbg !2631
  %1 = load i32, i32* %count.addr, align 4, !dbg !2632
  %cmp = icmp slt i32 %1, 0, !dbg !2634
  br i1 %cmp, label %4, label %2, !dbg !2635

; <label>:2:                                      ; preds = %0
  %3 = load double*, double** %numbers.addr, align 8, !dbg !2636
  %cmp1 = icmp eq double* %3, null, !dbg !2638
  br i1 %cmp1, label %4, label %5, !dbg !2639

; <label>:4:                                      ; preds = %2, %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2641
  br label %34, !dbg !2641

; <label>:5:                                      ; preds = %2
  %call = call %struct.cJSON* @cJSON_CreateArray(), !dbg !2643
  store %struct.cJSON* %call, %struct.cJSON** %a, align 8, !dbg !2644
  store i64 0, i64* %i, align 8, !dbg !2645
  br label %6, !dbg !2647

; <label>:6:                                      ; preds = %30, %5
  %7 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2648
  %tobool = icmp ne %struct.cJSON* %7, null, !dbg !2648
  br i1 %tobool, label %8, label %11, !dbg !2651

; <label>:8:                                      ; preds = %6
  %9 = load i64, i64* %i, align 8, !dbg !2652
  %10 = load i32, i32* %count.addr, align 4, !dbg !2654
  %conv = sext i32 %10 to i64, !dbg !2655
  %cmp2 = icmp ult i64 %9, %conv, !dbg !2656
  br label %11

; <label>:11:                                     ; preds = %8, %6
  %12 = phi i1 [ false, %6 ], [ %cmp2, %8 ]
  br i1 %12, label %13, label %32, !dbg !2657

; <label>:13:                                     ; preds = %11
  %14 = load double*, double** %numbers.addr, align 8, !dbg !2659
  %15 = load i64, i64* %i, align 8, !dbg !2661
  %arrayidx = getelementptr inbounds double, double* %14, i64 %15, !dbg !2659
  %16 = load double, double* %arrayidx, align 8, !dbg !2659
  %call4 = call %struct.cJSON* @cJSON_CreateNumber(double %16), !dbg !2662
  store %struct.cJSON* %call4, %struct.cJSON** %n, align 8, !dbg !2663
  %17 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2664
  %tobool5 = icmp ne %struct.cJSON* %17, null, !dbg !2664
  br i1 %tobool5, label %20, label %18, !dbg !2666

; <label>:18:                                     ; preds = %13
  %19 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2667
  call void @cJSON_Delete(%struct.cJSON* %19), !dbg !2669
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2670
  br label %34, !dbg !2670

; <label>:20:                                     ; preds = %13
  %21 = load i64, i64* %i, align 8, !dbg !2671
  %tobool6 = icmp ne i64 %21, 0, !dbg !2671
  br i1 %tobool6, label %25, label %22, !dbg !2673

; <label>:22:                                     ; preds = %20
  %23 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2674
  %24 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2676
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %24, i32 0, i32 2, !dbg !2677
  store %struct.cJSON* %23, %struct.cJSON** %child, align 8, !dbg !2678
  br label %28, !dbg !2679

; <label>:25:                                     ; preds = %20
  %26 = load %struct.cJSON*, %struct.cJSON** %p, align 8, !dbg !2680
  %27 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2682
  call void @suffix_object(%struct.cJSON* %26, %struct.cJSON* %27), !dbg !2683
  br label %28

; <label>:28:                                     ; preds = %25, %22
  %29 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2684
  store %struct.cJSON* %29, %struct.cJSON** %p, align 8, !dbg !2685
  br label %30, !dbg !2686

; <label>:30:                                     ; preds = %28
  %31 = load i64, i64* %i, align 8, !dbg !2687
  %inc = add i64 %31, 1, !dbg !2687
  store i64 %inc, i64* %i, align 8, !dbg !2687
  br label %6, !dbg !2689, !llvm.loop !2690

; <label>:32:                                     ; preds = %11
  %33 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2693
  store %struct.cJSON* %33, %struct.cJSON** %retval, align 8, !dbg !2694
  br label %34, !dbg !2694

; <label>:34:                                     ; preds = %32, %18, %4
  %35 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !2695
  ret %struct.cJSON* %35, !dbg !2695
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_CreateStringArray(i8** %strings, i32 %count) #0 !dbg !2696 {
  %retval = alloca %struct.cJSON*, align 8
  %strings.addr = alloca i8**, align 8
  %count.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %n = alloca %struct.cJSON*, align 8
  %p = alloca %struct.cJSON*, align 8
  %a = alloca %struct.cJSON*, align 8
  store i8** %strings, i8*** %strings.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %strings.addr, metadata !2699, metadata !92), !dbg !2700
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2701, metadata !92), !dbg !2702
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2703, metadata !92), !dbg !2704
  store i64 0, i64* %i, align 8, !dbg !2704
  call void @llvm.dbg.declare(metadata %struct.cJSON** %n, metadata !2705, metadata !92), !dbg !2706
  store %struct.cJSON* null, %struct.cJSON** %n, align 8, !dbg !2706
  call void @llvm.dbg.declare(metadata %struct.cJSON** %p, metadata !2707, metadata !92), !dbg !2708
  store %struct.cJSON* null, %struct.cJSON** %p, align 8, !dbg !2708
  call void @llvm.dbg.declare(metadata %struct.cJSON** %a, metadata !2709, metadata !92), !dbg !2710
  store %struct.cJSON* null, %struct.cJSON** %a, align 8, !dbg !2710
  %1 = load i32, i32* %count.addr, align 4, !dbg !2711
  %cmp = icmp slt i32 %1, 0, !dbg !2713
  br i1 %cmp, label %4, label %2, !dbg !2714

; <label>:2:                                      ; preds = %0
  %3 = load i8**, i8*** %strings.addr, align 8, !dbg !2715
  %cmp1 = icmp eq i8** %3, null, !dbg !2717
  br i1 %cmp1, label %4, label %5, !dbg !2718

; <label>:4:                                      ; preds = %2, %0
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2720
  br label %34, !dbg !2720

; <label>:5:                                      ; preds = %2
  %call = call %struct.cJSON* @cJSON_CreateArray(), !dbg !2722
  store %struct.cJSON* %call, %struct.cJSON** %a, align 8, !dbg !2723
  store i64 0, i64* %i, align 8, !dbg !2724
  br label %6, !dbg !2726

; <label>:6:                                      ; preds = %30, %5
  %7 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2727
  %tobool = icmp ne %struct.cJSON* %7, null, !dbg !2727
  br i1 %tobool, label %8, label %11, !dbg !2730

; <label>:8:                                      ; preds = %6
  %9 = load i64, i64* %i, align 8, !dbg !2731
  %10 = load i32, i32* %count.addr, align 4, !dbg !2733
  %conv = sext i32 %10 to i64, !dbg !2734
  %cmp2 = icmp ult i64 %9, %conv, !dbg !2735
  br label %11

; <label>:11:                                     ; preds = %8, %6
  %12 = phi i1 [ false, %6 ], [ %cmp2, %8 ]
  br i1 %12, label %13, label %32, !dbg !2736

; <label>:13:                                     ; preds = %11
  %14 = load i8**, i8*** %strings.addr, align 8, !dbg !2738
  %15 = load i64, i64* %i, align 8, !dbg !2740
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 %15, !dbg !2738
  %16 = load i8*, i8** %arrayidx, align 8, !dbg !2738
  %call4 = call %struct.cJSON* @cJSON_CreateString(i8* %16), !dbg !2741
  store %struct.cJSON* %call4, %struct.cJSON** %n, align 8, !dbg !2742
  %17 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2743
  %tobool5 = icmp ne %struct.cJSON* %17, null, !dbg !2743
  br i1 %tobool5, label %20, label %18, !dbg !2745

; <label>:18:                                     ; preds = %13
  %19 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2746
  call void @cJSON_Delete(%struct.cJSON* %19), !dbg !2748
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2749
  br label %34, !dbg !2749

; <label>:20:                                     ; preds = %13
  %21 = load i64, i64* %i, align 8, !dbg !2750
  %tobool6 = icmp ne i64 %21, 0, !dbg !2750
  br i1 %tobool6, label %25, label %22, !dbg !2752

; <label>:22:                                     ; preds = %20
  %23 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2753
  %24 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2755
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %24, i32 0, i32 2, !dbg !2756
  store %struct.cJSON* %23, %struct.cJSON** %child, align 8, !dbg !2757
  br label %28, !dbg !2758

; <label>:25:                                     ; preds = %20
  %26 = load %struct.cJSON*, %struct.cJSON** %p, align 8, !dbg !2759
  %27 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2761
  call void @suffix_object(%struct.cJSON* %26, %struct.cJSON* %27), !dbg !2762
  br label %28

; <label>:28:                                     ; preds = %25, %22
  %29 = load %struct.cJSON*, %struct.cJSON** %n, align 8, !dbg !2763
  store %struct.cJSON* %29, %struct.cJSON** %p, align 8, !dbg !2764
  br label %30, !dbg !2765

; <label>:30:                                     ; preds = %28
  %31 = load i64, i64* %i, align 8, !dbg !2766
  %inc = add i64 %31, 1, !dbg !2766
  store i64 %inc, i64* %i, align 8, !dbg !2766
  br label %6, !dbg !2768, !llvm.loop !2769

; <label>:32:                                     ; preds = %11
  %33 = load %struct.cJSON*, %struct.cJSON** %a, align 8, !dbg !2772
  store %struct.cJSON* %33, %struct.cJSON** %retval, align 8, !dbg !2773
  br label %34, !dbg !2773

; <label>:34:                                     ; preds = %32, %18, %4
  %35 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !2774
  ret %struct.cJSON* %35, !dbg !2774
}

; Function Attrs: noinline nounwind uwtable
define %struct.cJSON* @cJSON_Duplicate(%struct.cJSON* %item, i32 %recurse) #0 !dbg !2775 {
  %retval = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  %recurse.addr = alloca i32, align 4
  %newitem = alloca %struct.cJSON*, align 8
  %child = alloca %struct.cJSON*, align 8
  %next = alloca %struct.cJSON*, align 8
  %newchild = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !2778, metadata !92), !dbg !2779
  store i32 %recurse, i32* %recurse.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %recurse.addr, metadata !2780, metadata !92), !dbg !2781
  call void @llvm.dbg.declare(metadata %struct.cJSON** %newitem, metadata !2782, metadata !92), !dbg !2783
  store %struct.cJSON* null, %struct.cJSON** %newitem, align 8, !dbg !2783
  call void @llvm.dbg.declare(metadata %struct.cJSON** %child, metadata !2784, metadata !92), !dbg !2785
  store %struct.cJSON* null, %struct.cJSON** %child, align 8, !dbg !2785
  call void @llvm.dbg.declare(metadata %struct.cJSON** %next, metadata !2786, metadata !92), !dbg !2787
  store %struct.cJSON* null, %struct.cJSON** %next, align 8, !dbg !2787
  call void @llvm.dbg.declare(metadata %struct.cJSON** %newchild, metadata !2788, metadata !92), !dbg !2789
  store %struct.cJSON* null, %struct.cJSON** %newchild, align 8, !dbg !2789
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2790
  %tobool = icmp ne %struct.cJSON* %1, null, !dbg !2790
  br i1 %tobool, label %3, label %2, !dbg !2792

; <label>:2:                                      ; preds = %0
  br label %74, !dbg !2793

; <label>:3:                                      ; preds = %0
  %call = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* @global_hooks), !dbg !2795
  store %struct.cJSON* %call, %struct.cJSON** %newitem, align 8, !dbg !2796
  %4 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2797
  %tobool1 = icmp ne %struct.cJSON* %4, null, !dbg !2797
  br i1 %tobool1, label %6, label %5, !dbg !2799

; <label>:5:                                      ; preds = %3
  br label %74, !dbg !2800

; <label>:6:                                      ; preds = %3
  %7 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2802
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i32 0, i32 3, !dbg !2803
  %8 = load i32, i32* %type, align 8, !dbg !2803
  %and = and i32 %8, -257, !dbg !2804
  %9 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2805
  %type2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i32 0, i32 3, !dbg !2806
  store i32 %and, i32* %type2, align 8, !dbg !2807
  %10 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2808
  %valueint = getelementptr inbounds %struct.cJSON, %struct.cJSON* %10, i32 0, i32 5, !dbg !2809
  %11 = load i32, i32* %valueint, align 8, !dbg !2809
  %12 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2810
  %valueint3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %12, i32 0, i32 5, !dbg !2811
  store i32 %11, i32* %valueint3, align 8, !dbg !2812
  %13 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2813
  %valuedouble = getelementptr inbounds %struct.cJSON, %struct.cJSON* %13, i32 0, i32 6, !dbg !2814
  %14 = load double, double* %valuedouble, align 8, !dbg !2814
  %15 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2815
  %valuedouble4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %15, i32 0, i32 6, !dbg !2816
  store double %14, double* %valuedouble4, align 8, !dbg !2817
  %16 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2818
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %16, i32 0, i32 4, !dbg !2820
  %17 = load i8*, i8** %valuestring, align 8, !dbg !2820
  %tobool5 = icmp ne i8* %17, null, !dbg !2818
  br i1 %tobool5, label %18, label %26, !dbg !2821

; <label>:18:                                     ; preds = %6
  %19 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2822
  %valuestring6 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %19, i32 0, i32 4, !dbg !2824
  %20 = load i8*, i8** %valuestring6, align 8, !dbg !2824
  %call7 = call i8* @cJSON_strdup(i8* %20, %struct.internal_hooks* @global_hooks), !dbg !2825
  %21 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2826
  %valuestring8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %21, i32 0, i32 4, !dbg !2827
  store i8* %call7, i8** %valuestring8, align 8, !dbg !2828
  %22 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2829
  %valuestring9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %22, i32 0, i32 4, !dbg !2831
  %23 = load i8*, i8** %valuestring9, align 8, !dbg !2831
  %tobool10 = icmp ne i8* %23, null, !dbg !2829
  br i1 %tobool10, label %25, label %24, !dbg !2832

; <label>:24:                                     ; preds = %18
  br label %74, !dbg !2833

; <label>:25:                                     ; preds = %18
  br label %26, !dbg !2835

; <label>:26:                                     ; preds = %25, %6
  %27 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2836
  %string = getelementptr inbounds %struct.cJSON, %struct.cJSON* %27, i32 0, i32 7, !dbg !2838
  %28 = load i8*, i8** %string, align 8, !dbg !2838
  %tobool11 = icmp ne i8* %28, null, !dbg !2836
  br i1 %tobool11, label %29, label %44, !dbg !2839

; <label>:29:                                     ; preds = %26
  %30 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2840
  %type12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %30, i32 0, i32 3, !dbg !2842
  %31 = load i32, i32* %type12, align 8, !dbg !2842
  %and13 = and i32 %31, 512, !dbg !2843
  %tobool14 = icmp ne i32 %and13, 0, !dbg !2843
  br i1 %tobool14, label %32, label %35, !dbg !2844

; <label>:32:                                     ; preds = %29
  %33 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2845
  %string15 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %33, i32 0, i32 7, !dbg !2847
  %34 = load i8*, i8** %string15, align 8, !dbg !2847
  br label %38, !dbg !2848

; <label>:35:                                     ; preds = %29
  %36 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2849
  %string16 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %36, i32 0, i32 7, !dbg !2851
  %37 = load i8*, i8** %string16, align 8, !dbg !2851
  %call17 = call i8* @cJSON_strdup(i8* %37, %struct.internal_hooks* @global_hooks), !dbg !2852
  br label %38, !dbg !2853

; <label>:38:                                     ; preds = %35, %32
  %cond = phi i8* [ %34, %32 ], [ %call17, %35 ], !dbg !2854
  %39 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2856
  %string18 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %39, i32 0, i32 7, !dbg !2857
  store i8* %cond, i8** %string18, align 8, !dbg !2858
  %40 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2859
  %string19 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %40, i32 0, i32 7, !dbg !2861
  %41 = load i8*, i8** %string19, align 8, !dbg !2861
  %tobool20 = icmp ne i8* %41, null, !dbg !2859
  br i1 %tobool20, label %43, label %42, !dbg !2862

; <label>:42:                                     ; preds = %38
  br label %74, !dbg !2863

; <label>:43:                                     ; preds = %38
  br label %44, !dbg !2865

; <label>:44:                                     ; preds = %43, %26
  %45 = load i32, i32* %recurse.addr, align 4, !dbg !2866
  %tobool21 = icmp ne i32 %45, 0, !dbg !2866
  br i1 %tobool21, label %48, label %46, !dbg !2868

; <label>:46:                                     ; preds = %44
  %47 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2869
  store %struct.cJSON* %47, %struct.cJSON** %retval, align 8, !dbg !2871
  br label %79, !dbg !2871

; <label>:48:                                     ; preds = %44
  %49 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !2872
  %child22 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %49, i32 0, i32 2, !dbg !2873
  %50 = load %struct.cJSON*, %struct.cJSON** %child22, align 8, !dbg !2873
  store %struct.cJSON* %50, %struct.cJSON** %child, align 8, !dbg !2874
  br label %51, !dbg !2875

; <label>:51:                                     ; preds = %69, %48
  %52 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !2876
  %cmp = icmp ne %struct.cJSON* %52, null, !dbg !2878
  br i1 %cmp, label %53, label %72, !dbg !2879

; <label>:53:                                     ; preds = %51
  %54 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !2880
  %call23 = call %struct.cJSON* @cJSON_Duplicate(%struct.cJSON* %54, i32 1), !dbg !2882
  store %struct.cJSON* %call23, %struct.cJSON** %newchild, align 8, !dbg !2883
  %55 = load %struct.cJSON*, %struct.cJSON** %newchild, align 8, !dbg !2884
  %tobool24 = icmp ne %struct.cJSON* %55, null, !dbg !2884
  br i1 %tobool24, label %57, label %56, !dbg !2886

; <label>:56:                                     ; preds = %53
  br label %74, !dbg !2887

; <label>:57:                                     ; preds = %53
  %58 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !2889
  %cmp25 = icmp ne %struct.cJSON* %58, null, !dbg !2891
  br i1 %cmp25, label %59, label %65, !dbg !2892

; <label>:59:                                     ; preds = %57
  %60 = load %struct.cJSON*, %struct.cJSON** %newchild, align 8, !dbg !2893
  %61 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !2895
  %next26 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %61, i32 0, i32 0, !dbg !2896
  store %struct.cJSON* %60, %struct.cJSON** %next26, align 8, !dbg !2897
  %62 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !2898
  %63 = load %struct.cJSON*, %struct.cJSON** %newchild, align 8, !dbg !2899
  %prev = getelementptr inbounds %struct.cJSON, %struct.cJSON* %63, i32 0, i32 1, !dbg !2900
  store %struct.cJSON* %62, %struct.cJSON** %prev, align 8, !dbg !2901
  %64 = load %struct.cJSON*, %struct.cJSON** %newchild, align 8, !dbg !2902
  store %struct.cJSON* %64, %struct.cJSON** %next, align 8, !dbg !2903
  br label %69, !dbg !2904

; <label>:65:                                     ; preds = %57
  %66 = load %struct.cJSON*, %struct.cJSON** %newchild, align 8, !dbg !2905
  %67 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2907
  %child27 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %67, i32 0, i32 2, !dbg !2908
  store %struct.cJSON* %66, %struct.cJSON** %child27, align 8, !dbg !2909
  %68 = load %struct.cJSON*, %struct.cJSON** %newchild, align 8, !dbg !2910
  store %struct.cJSON* %68, %struct.cJSON** %next, align 8, !dbg !2911
  br label %69

; <label>:69:                                     ; preds = %65, %59
  %70 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !2912
  %next28 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %70, i32 0, i32 0, !dbg !2913
  %71 = load %struct.cJSON*, %struct.cJSON** %next28, align 8, !dbg !2913
  store %struct.cJSON* %71, %struct.cJSON** %child, align 8, !dbg !2914
  br label %51, !dbg !2915, !llvm.loop !2917

; <label>:72:                                     ; preds = %51
  %73 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2919
  store %struct.cJSON* %73, %struct.cJSON** %retval, align 8, !dbg !2920
  br label %79, !dbg !2920

; <label>:74:                                     ; preds = %56, %42, %24, %5, %2
  %75 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2921
  %cmp29 = icmp ne %struct.cJSON* %75, null, !dbg !2923
  br i1 %cmp29, label %76, label %78, !dbg !2924

; <label>:76:                                     ; preds = %74
  %77 = load %struct.cJSON*, %struct.cJSON** %newitem, align 8, !dbg !2925
  call void @cJSON_Delete(%struct.cJSON* %77), !dbg !2927
  br label %78, !dbg !2928

; <label>:78:                                     ; preds = %76, %74
  store %struct.cJSON* null, %struct.cJSON** %retval, align 8, !dbg !2929
  br label %79, !dbg !2929

; <label>:79:                                     ; preds = %78, %72, %46
  %80 = load %struct.cJSON*, %struct.cJSON** %retval, align 8, !dbg !2930
  ret %struct.cJSON* %80, !dbg !2930
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_Minify(i8* %json) #0 !dbg !2931 {
  %json.addr = alloca i8*, align 8
  %into = alloca i8*, align 8
  store i8* %json, i8** %json.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %json.addr, metadata !2934, metadata !92), !dbg !2935
  call void @llvm.dbg.declare(metadata i8** %into, metadata !2936, metadata !92), !dbg !2937
  %1 = load i8*, i8** %json.addr, align 8, !dbg !2938
  store i8* %1, i8** %into, align 8, !dbg !2937
  %2 = load i8*, i8** %json.addr, align 8, !dbg !2939
  %cmp = icmp eq i8* %2, null, !dbg !2941
  br i1 %cmp, label %3, label %4, !dbg !2942

; <label>:3:                                      ; preds = %0
  br label %113, !dbg !2943

; <label>:4:                                      ; preds = %0
  br label %5, !dbg !2945

; <label>:5:                                      ; preds = %110, %4
  %6 = load i8*, i8** %json.addr, align 8, !dbg !2946
  %7 = load i8, i8* %6, align 1, !dbg !2948
  %tobool = icmp ne i8 %7, 0, !dbg !2949
  br i1 %tobool, label %8, label %111, !dbg !2949

; <label>:8:                                      ; preds = %5
  %9 = load i8*, i8** %json.addr, align 8, !dbg !2950
  %10 = load i8, i8* %9, align 1, !dbg !2953
  %conv = sext i8 %10 to i32, !dbg !2953
  %cmp1 = icmp eq i32 %conv, 32, !dbg !2954
  br i1 %cmp1, label %11, label %13, !dbg !2955

; <label>:11:                                     ; preds = %8
  %12 = load i8*, i8** %json.addr, align 8, !dbg !2956
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1, !dbg !2956
  store i8* %incdec.ptr, i8** %json.addr, align 8, !dbg !2956
  br label %110, !dbg !2958

; <label>:13:                                     ; preds = %8
  %14 = load i8*, i8** %json.addr, align 8, !dbg !2959
  %15 = load i8, i8* %14, align 1, !dbg !2961
  %conv3 = sext i8 %15 to i32, !dbg !2961
  %cmp4 = icmp eq i32 %conv3, 9, !dbg !2962
  br i1 %cmp4, label %16, label %18, !dbg !2963

; <label>:16:                                     ; preds = %13
  %17 = load i8*, i8** %json.addr, align 8, !dbg !2964
  %incdec.ptr6 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !2964
  store i8* %incdec.ptr6, i8** %json.addr, align 8, !dbg !2964
  br label %109, !dbg !2966

; <label>:18:                                     ; preds = %13
  %19 = load i8*, i8** %json.addr, align 8, !dbg !2967
  %20 = load i8, i8* %19, align 1, !dbg !2969
  %conv7 = sext i8 %20 to i32, !dbg !2969
  %cmp8 = icmp eq i32 %conv7, 13, !dbg !2970
  br i1 %cmp8, label %21, label %23, !dbg !2971

; <label>:21:                                     ; preds = %18
  %22 = load i8*, i8** %json.addr, align 8, !dbg !2972
  %incdec.ptr10 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !2972
  store i8* %incdec.ptr10, i8** %json.addr, align 8, !dbg !2972
  br label %108, !dbg !2974

; <label>:23:                                     ; preds = %18
  %24 = load i8*, i8** %json.addr, align 8, !dbg !2975
  %25 = load i8, i8* %24, align 1, !dbg !2977
  %conv11 = sext i8 %25 to i32, !dbg !2977
  %cmp12 = icmp eq i32 %conv11, 10, !dbg !2978
  br i1 %cmp12, label %26, label %28, !dbg !2979

; <label>:26:                                     ; preds = %23
  %27 = load i8*, i8** %json.addr, align 8, !dbg !2980
  %incdec.ptr14 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !2980
  store i8* %incdec.ptr14, i8** %json.addr, align 8, !dbg !2980
  br label %107, !dbg !2982

; <label>:28:                                     ; preds = %23
  %29 = load i8*, i8** %json.addr, align 8, !dbg !2983
  %30 = load i8, i8* %29, align 1, !dbg !2985
  %conv15 = sext i8 %30 to i32, !dbg !2985
  %cmp16 = icmp eq i32 %conv15, 47, !dbg !2986
  br i1 %cmp16, label %31, label %46, !dbg !2987

; <label>:31:                                     ; preds = %28
  %32 = load i8*, i8** %json.addr, align 8, !dbg !2988
  %arrayidx = getelementptr inbounds i8, i8* %32, i64 1, !dbg !2988
  %33 = load i8, i8* %arrayidx, align 1, !dbg !2988
  %conv18 = sext i8 %33 to i32, !dbg !2988
  %cmp19 = icmp eq i32 %conv18, 47, !dbg !2990
  br i1 %cmp19, label %34, label %46, !dbg !2991

; <label>:34:                                     ; preds = %31
  br label %35, !dbg !2993

; <label>:35:                                     ; preds = %43, %34
  %36 = load i8*, i8** %json.addr, align 8, !dbg !2995
  %37 = load i8, i8* %36, align 1, !dbg !2997
  %conv21 = sext i8 %37 to i32, !dbg !2997
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !2997
  br i1 %tobool22, label %38, label %41, !dbg !2998

; <label>:38:                                     ; preds = %35
  %39 = load i8*, i8** %json.addr, align 8, !dbg !2999
  %40 = load i8, i8* %39, align 1, !dbg !3001
  %conv23 = sext i8 %40 to i32, !dbg !3001
  %cmp24 = icmp ne i32 %conv23, 10, !dbg !3002
  br label %41

; <label>:41:                                     ; preds = %38, %35
  %42 = phi i1 [ false, %35 ], [ %cmp24, %38 ]
  br i1 %42, label %43, label %45, !dbg !3003

; <label>:43:                                     ; preds = %41
  %44 = load i8*, i8** %json.addr, align 8, !dbg !3005
  %incdec.ptr26 = getelementptr inbounds i8, i8* %44, i32 1, !dbg !3005
  store i8* %incdec.ptr26, i8** %json.addr, align 8, !dbg !3005
  br label %35, !dbg !3007, !llvm.loop !3009

; <label>:45:                                     ; preds = %41
  br label %106, !dbg !3011

; <label>:46:                                     ; preds = %31, %28
  %47 = load i8*, i8** %json.addr, align 8, !dbg !3012
  %48 = load i8, i8* %47, align 1, !dbg !3014
  %conv27 = sext i8 %48 to i32, !dbg !3014
  %cmp28 = icmp eq i32 %conv27, 47, !dbg !3015
  br i1 %cmp28, label %49, label %70, !dbg !3016

; <label>:49:                                     ; preds = %46
  %50 = load i8*, i8** %json.addr, align 8, !dbg !3017
  %arrayidx30 = getelementptr inbounds i8, i8* %50, i64 1, !dbg !3017
  %51 = load i8, i8* %arrayidx30, align 1, !dbg !3017
  %conv31 = sext i8 %51 to i32, !dbg !3017
  %cmp32 = icmp eq i32 %conv31, 42, !dbg !3019
  br i1 %cmp32, label %52, label %70, !dbg !3020

; <label>:52:                                     ; preds = %49
  br label %53, !dbg !3021

; <label>:53:                                     ; preds = %66, %52
  %54 = load i8*, i8** %json.addr, align 8, !dbg !3023
  %55 = load i8, i8* %54, align 1, !dbg !3025
  %conv34 = sext i8 %55 to i32, !dbg !3025
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !3025
  br i1 %tobool35, label %56, label %64, !dbg !3026

; <label>:56:                                     ; preds = %53
  %57 = load i8*, i8** %json.addr, align 8, !dbg !3027
  %58 = load i8, i8* %57, align 1, !dbg !3029
  %conv36 = sext i8 %58 to i32, !dbg !3029
  %cmp37 = icmp eq i32 %conv36, 42, !dbg !3030
  br i1 %cmp37, label %59, label %62, !dbg !3031

; <label>:59:                                     ; preds = %56
  %60 = load i8*, i8** %json.addr, align 8, !dbg !3032
  %arrayidx39 = getelementptr inbounds i8, i8* %60, i64 1, !dbg !3032
  %61 = load i8, i8* %arrayidx39, align 1, !dbg !3032
  %conv40 = sext i8 %61 to i32, !dbg !3032
  %cmp41 = icmp eq i32 %conv40, 47, !dbg !3034
  br label %62

; <label>:62:                                     ; preds = %59, %56
  %63 = phi i1 [ false, %56 ], [ %cmp41, %59 ]
  %lnot = xor i1 %63, true, !dbg !3035
  br label %64

; <label>:64:                                     ; preds = %62, %53
  %65 = phi i1 [ false, %53 ], [ %lnot, %62 ]
  br i1 %65, label %66, label %68, !dbg !3037

; <label>:66:                                     ; preds = %64
  %67 = load i8*, i8** %json.addr, align 8, !dbg !3039
  %incdec.ptr43 = getelementptr inbounds i8, i8* %67, i32 1, !dbg !3039
  store i8* %incdec.ptr43, i8** %json.addr, align 8, !dbg !3039
  br label %53, !dbg !3041, !llvm.loop !3043

; <label>:68:                                     ; preds = %64
  %69 = load i8*, i8** %json.addr, align 8, !dbg !3045
  %add.ptr = getelementptr inbounds i8, i8* %69, i64 2, !dbg !3045
  store i8* %add.ptr, i8** %json.addr, align 8, !dbg !3045
  br label %105, !dbg !3046

; <label>:70:                                     ; preds = %49, %46
  %71 = load i8*, i8** %json.addr, align 8, !dbg !3047
  %72 = load i8, i8* %71, align 1, !dbg !3049
  %conv44 = sext i8 %72 to i32, !dbg !3049
  %cmp45 = icmp eq i32 %conv44, 34, !dbg !3050
  br i1 %cmp45, label %73, label %100, !dbg !3051

; <label>:73:                                     ; preds = %70
  %74 = load i8*, i8** %json.addr, align 8, !dbg !3052
  %incdec.ptr47 = getelementptr inbounds i8, i8* %74, i32 1, !dbg !3052
  store i8* %incdec.ptr47, i8** %json.addr, align 8, !dbg !3052
  %75 = load i8, i8* %74, align 1, !dbg !3054
  %76 = load i8*, i8** %into, align 8, !dbg !3055
  %incdec.ptr48 = getelementptr inbounds i8, i8* %76, i32 1, !dbg !3055
  store i8* %incdec.ptr48, i8** %into, align 8, !dbg !3055
  store i8 %75, i8* %76, align 1, !dbg !3056
  br label %77, !dbg !3057

; <label>:77:                                     ; preds = %92, %73
  %78 = load i8*, i8** %json.addr, align 8, !dbg !3058
  %79 = load i8, i8* %78, align 1, !dbg !3060
  %conv49 = sext i8 %79 to i32, !dbg !3060
  %tobool50 = icmp ne i32 %conv49, 0, !dbg !3060
  br i1 %tobool50, label %80, label %83, !dbg !3061

; <label>:80:                                     ; preds = %77
  %81 = load i8*, i8** %json.addr, align 8, !dbg !3062
  %82 = load i8, i8* %81, align 1, !dbg !3064
  %conv51 = sext i8 %82 to i32, !dbg !3064
  %cmp52 = icmp ne i32 %conv51, 34, !dbg !3065
  br label %83

; <label>:83:                                     ; preds = %80, %77
  %84 = phi i1 [ false, %77 ], [ %cmp52, %80 ]
  br i1 %84, label %85, label %96, !dbg !3066

; <label>:85:                                     ; preds = %83
  %86 = load i8*, i8** %json.addr, align 8, !dbg !3068
  %87 = load i8, i8* %86, align 1, !dbg !3071
  %conv54 = sext i8 %87 to i32, !dbg !3071
  %cmp55 = icmp eq i32 %conv54, 92, !dbg !3072
  br i1 %cmp55, label %88, label %92, !dbg !3073

; <label>:88:                                     ; preds = %85
  %89 = load i8*, i8** %json.addr, align 8, !dbg !3074
  %incdec.ptr57 = getelementptr inbounds i8, i8* %89, i32 1, !dbg !3074
  store i8* %incdec.ptr57, i8** %json.addr, align 8, !dbg !3074
  %90 = load i8, i8* %89, align 1, !dbg !3076
  %91 = load i8*, i8** %into, align 8, !dbg !3077
  %incdec.ptr58 = getelementptr inbounds i8, i8* %91, i32 1, !dbg !3077
  store i8* %incdec.ptr58, i8** %into, align 8, !dbg !3077
  store i8 %90, i8* %91, align 1, !dbg !3078
  br label %92, !dbg !3079

; <label>:92:                                     ; preds = %88, %85
  %93 = load i8*, i8** %json.addr, align 8, !dbg !3080
  %incdec.ptr59 = getelementptr inbounds i8, i8* %93, i32 1, !dbg !3080
  store i8* %incdec.ptr59, i8** %json.addr, align 8, !dbg !3080
  %94 = load i8, i8* %93, align 1, !dbg !3081
  %95 = load i8*, i8** %into, align 8, !dbg !3082
  %incdec.ptr60 = getelementptr inbounds i8, i8* %95, i32 1, !dbg !3082
  store i8* %incdec.ptr60, i8** %into, align 8, !dbg !3082
  store i8 %94, i8* %95, align 1, !dbg !3083
  br label %77, !dbg !3084, !llvm.loop !3086

; <label>:96:                                     ; preds = %83
  %97 = load i8*, i8** %json.addr, align 8, !dbg !3088
  %incdec.ptr61 = getelementptr inbounds i8, i8* %97, i32 1, !dbg !3088
  store i8* %incdec.ptr61, i8** %json.addr, align 8, !dbg !3088
  %98 = load i8, i8* %97, align 1, !dbg !3089
  %99 = load i8*, i8** %into, align 8, !dbg !3090
  %incdec.ptr62 = getelementptr inbounds i8, i8* %99, i32 1, !dbg !3090
  store i8* %incdec.ptr62, i8** %into, align 8, !dbg !3090
  store i8 %98, i8* %99, align 1, !dbg !3091
  br label %104, !dbg !3092

; <label>:100:                                    ; preds = %70
  %101 = load i8*, i8** %json.addr, align 8, !dbg !3093
  %incdec.ptr63 = getelementptr inbounds i8, i8* %101, i32 1, !dbg !3093
  store i8* %incdec.ptr63, i8** %json.addr, align 8, !dbg !3093
  %102 = load i8, i8* %101, align 1, !dbg !3095
  %103 = load i8*, i8** %into, align 8, !dbg !3096
  %incdec.ptr64 = getelementptr inbounds i8, i8* %103, i32 1, !dbg !3096
  store i8* %incdec.ptr64, i8** %into, align 8, !dbg !3096
  store i8 %102, i8* %103, align 1, !dbg !3097
  br label %104

; <label>:104:                                    ; preds = %100, %96
  br label %105

; <label>:105:                                    ; preds = %104, %68
  br label %106

; <label>:106:                                    ; preds = %105, %45
  br label %107

; <label>:107:                                    ; preds = %106, %26
  br label %108

; <label>:108:                                    ; preds = %107, %21
  br label %109

; <label>:109:                                    ; preds = %108, %16
  br label %110

; <label>:110:                                    ; preds = %109, %11
  br label %5, !dbg !3098, !llvm.loop !3100

; <label>:111:                                    ; preds = %5
  %112 = load i8*, i8** %into, align 8, !dbg !3102
  store i8 0, i8* %112, align 1, !dbg !3103
  br label %113, !dbg !3104

; <label>:113:                                    ; preds = %111, %3
  ret void, !dbg !3105
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsInvalid(%struct.cJSON* %item) #0 !dbg !3106 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3107, metadata !92), !dbg !3108
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3109
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3111
  br i1 %cmp, label %2, label %3, !dbg !3112

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3113
  br label %6, !dbg !3113

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3115
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3116
  %5 = load i32, i32* %type, align 8, !dbg !3116
  %and = and i32 %5, 255, !dbg !3117
  %cmp1 = icmp eq i32 %and, 0, !dbg !3118
  %conv = zext i1 %cmp1 to i32, !dbg !3118
  store i32 %conv, i32* %retval, align 4, !dbg !3119
  br label %6, !dbg !3119

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3120
  ret i32 %7, !dbg !3120
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsFalse(%struct.cJSON* %item) #0 !dbg !3121 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3122, metadata !92), !dbg !3123
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3124
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3126
  br i1 %cmp, label %2, label %3, !dbg !3127

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3128
  br label %6, !dbg !3128

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3130
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3131
  %5 = load i32, i32* %type, align 8, !dbg !3131
  %and = and i32 %5, 255, !dbg !3132
  %cmp1 = icmp eq i32 %and, 1, !dbg !3133
  %conv = zext i1 %cmp1 to i32, !dbg !3133
  store i32 %conv, i32* %retval, align 4, !dbg !3134
  br label %6, !dbg !3134

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3135
  ret i32 %7, !dbg !3135
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsTrue(%struct.cJSON* %item) #0 !dbg !3136 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3137, metadata !92), !dbg !3138
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3139
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3141
  br i1 %cmp, label %2, label %3, !dbg !3142

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3143
  br label %6, !dbg !3143

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3145
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3146
  %5 = load i32, i32* %type, align 8, !dbg !3146
  %and = and i32 %5, 255, !dbg !3147
  %cmp1 = icmp eq i32 %and, 2, !dbg !3148
  %conv = zext i1 %cmp1 to i32, !dbg !3148
  store i32 %conv, i32* %retval, align 4, !dbg !3149
  br label %6, !dbg !3149

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3150
  ret i32 %7, !dbg !3150
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsBool(%struct.cJSON* %item) #0 !dbg !3151 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3152, metadata !92), !dbg !3153
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3154
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3156
  br i1 %cmp, label %2, label %3, !dbg !3157

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3158
  br label %6, !dbg !3158

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3160
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3161
  %5 = load i32, i32* %type, align 8, !dbg !3161
  %and = and i32 %5, 3, !dbg !3162
  %cmp1 = icmp ne i32 %and, 0, !dbg !3163
  %conv = zext i1 %cmp1 to i32, !dbg !3163
  store i32 %conv, i32* %retval, align 4, !dbg !3164
  br label %6, !dbg !3164

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3165
  ret i32 %7, !dbg !3165
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsNull(%struct.cJSON* %item) #0 !dbg !3166 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3167, metadata !92), !dbg !3168
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3169
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3171
  br i1 %cmp, label %2, label %3, !dbg !3172

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3173
  br label %6, !dbg !3173

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3175
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3176
  %5 = load i32, i32* %type, align 8, !dbg !3176
  %and = and i32 %5, 255, !dbg !3177
  %cmp1 = icmp eq i32 %and, 4, !dbg !3178
  %conv = zext i1 %cmp1 to i32, !dbg !3178
  store i32 %conv, i32* %retval, align 4, !dbg !3179
  br label %6, !dbg !3179

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3180
  ret i32 %7, !dbg !3180
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsNumber(%struct.cJSON* %item) #0 !dbg !3181 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3182, metadata !92), !dbg !3183
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3184
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3186
  br i1 %cmp, label %2, label %3, !dbg !3187

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3188
  br label %6, !dbg !3188

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3190
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3191
  %5 = load i32, i32* %type, align 8, !dbg !3191
  %and = and i32 %5, 255, !dbg !3192
  %cmp1 = icmp eq i32 %and, 8, !dbg !3193
  %conv = zext i1 %cmp1 to i32, !dbg !3193
  store i32 %conv, i32* %retval, align 4, !dbg !3194
  br label %6, !dbg !3194

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3195
  ret i32 %7, !dbg !3195
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsArray(%struct.cJSON* %item) #0 !dbg !3196 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3197, metadata !92), !dbg !3198
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3199
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3201
  br i1 %cmp, label %2, label %3, !dbg !3202

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3203
  br label %6, !dbg !3203

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3205
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3206
  %5 = load i32, i32* %type, align 8, !dbg !3206
  %and = and i32 %5, 255, !dbg !3207
  %cmp1 = icmp eq i32 %and, 32, !dbg !3208
  %conv = zext i1 %cmp1 to i32, !dbg !3208
  store i32 %conv, i32* %retval, align 4, !dbg !3209
  br label %6, !dbg !3209

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3210
  ret i32 %7, !dbg !3210
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsObject(%struct.cJSON* %item) #0 !dbg !3211 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3212, metadata !92), !dbg !3213
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3214
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3216
  br i1 %cmp, label %2, label %3, !dbg !3217

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3218
  br label %6, !dbg !3218

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3220
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3221
  %5 = load i32, i32* %type, align 8, !dbg !3221
  %and = and i32 %5, 255, !dbg !3222
  %cmp1 = icmp eq i32 %and, 64, !dbg !3223
  %conv = zext i1 %cmp1 to i32, !dbg !3223
  store i32 %conv, i32* %retval, align 4, !dbg !3224
  br label %6, !dbg !3224

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3225
  ret i32 %7, !dbg !3225
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_IsRaw(%struct.cJSON* %item) #0 !dbg !3226 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3227, metadata !92), !dbg !3228
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3229
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3231
  br i1 %cmp, label %2, label %3, !dbg !3232

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3233
  br label %6, !dbg !3233

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3235
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 3, !dbg !3236
  %5 = load i32, i32* %type, align 8, !dbg !3236
  %and = and i32 %5, 255, !dbg !3237
  %cmp1 = icmp eq i32 %and, 128, !dbg !3238
  %conv = zext i1 %cmp1 to i32, !dbg !3238
  store i32 %conv, i32* %retval, align 4, !dbg !3239
  br label %6, !dbg !3239

; <label>:6:                                      ; preds = %3, %2
  %7 = load i32, i32* %retval, align 4, !dbg !3240
  ret i32 %7, !dbg !3240
}

; Function Attrs: noinline nounwind uwtable
define i32 @cJSON_Compare(%struct.cJSON* %a, %struct.cJSON* %b, i32 %case_sensitive) #0 !dbg !3241 {
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.cJSON*, align 8
  %b.addr = alloca %struct.cJSON*, align 8
  %case_sensitive.addr = alloca i32, align 4
  %a_element = alloca %struct.cJSON*, align 8
  %b_element = alloca %struct.cJSON*, align 8
  %a_element26 = alloca %struct.cJSON*, align 8
  %b_element27 = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %a, %struct.cJSON** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %a.addr, metadata !3244, metadata !92), !dbg !3245
  store %struct.cJSON* %b, %struct.cJSON** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %b.addr, metadata !3246, metadata !92), !dbg !3247
  store i32 %case_sensitive, i32* %case_sensitive.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %case_sensitive.addr, metadata !3248, metadata !92), !dbg !3249
  %1 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3250
  %cmp = icmp eq %struct.cJSON* %1, null, !dbg !3252
  br i1 %cmp, label %11, label %2, !dbg !3253

; <label>:2:                                      ; preds = %0
  %3 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3254
  %cmp1 = icmp eq %struct.cJSON* %3, null, !dbg !3256
  br i1 %cmp1, label %11, label %4, !dbg !3257

; <label>:4:                                      ; preds = %2
  %5 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3258
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %5, i32 0, i32 3, !dbg !3260
  %6 = load i32, i32* %type, align 8, !dbg !3260
  %and = and i32 %6, 255, !dbg !3261
  %7 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3262
  %type2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i32 0, i32 3, !dbg !3263
  %8 = load i32, i32* %type2, align 8, !dbg !3263
  %and3 = and i32 %8, 255, !dbg !3264
  %cmp4 = icmp ne i32 %and, %and3, !dbg !3265
  br i1 %cmp4, label %11, label %9, !dbg !3266

; <label>:9:                                      ; preds = %4
  %10 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3267
  %call = call i32 @cJSON_IsInvalid(%struct.cJSON* %10), !dbg !3269
  %tobool = icmp ne i32 %call, 0, !dbg !3269
  br i1 %tobool, label %11, label %12, !dbg !3270

; <label>:11:                                     ; preds = %9, %4, %2, %0
  store i32 0, i32* %retval, align 4, !dbg !3272
  br label %124, !dbg !3272

; <label>:12:                                     ; preds = %9
  %13 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3274
  %type5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %13, i32 0, i32 3, !dbg !3275
  %14 = load i32, i32* %type5, align 8, !dbg !3275
  %and6 = and i32 %14, 255, !dbg !3276
  switch i32 %and6, label %16 [
    i32 1, label %15
    i32 2, label %15
    i32 4, label %15
    i32 8, label %15
    i32 16, label %15
    i32 128, label %15
    i32 32, label %15
    i32 64, label %15
  ], !dbg !3277

; <label>:15:                                     ; preds = %12, %12, %12, %12, %12, %12, %12, %12
  br label %17, !dbg !3278

; <label>:16:                                     ; preds = %12
  store i32 0, i32* %retval, align 4, !dbg !3280
  br label %124, !dbg !3280

; <label>:17:                                     ; preds = %15
  %18 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3281
  %19 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3283
  %cmp7 = icmp eq %struct.cJSON* %18, %19, !dbg !3284
  br i1 %cmp7, label %20, label %21, !dbg !3285

; <label>:20:                                     ; preds = %17
  store i32 1, i32* %retval, align 4, !dbg !3286
  br label %124, !dbg !3286

; <label>:21:                                     ; preds = %17
  %22 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3288
  %type8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %22, i32 0, i32 3, !dbg !3289
  %23 = load i32, i32* %type8, align 8, !dbg !3289
  %and9 = and i32 %23, 255, !dbg !3290
  switch i32 %and9, label %123 [
    i32 1, label %24
    i32 2, label %24
    i32 4, label %24
    i32 8, label %25
    i32 16, label %32
    i32 128, label %32
    i32 32, label %46
    i32 64, label %72
  ], !dbg !3291

; <label>:24:                                     ; preds = %21, %21, %21
  store i32 1, i32* %retval, align 4, !dbg !3292
  br label %124, !dbg !3292

; <label>:25:                                     ; preds = %21
  %26 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3294
  %valuedouble = getelementptr inbounds %struct.cJSON, %struct.cJSON* %26, i32 0, i32 6, !dbg !3296
  %27 = load double, double* %valuedouble, align 8, !dbg !3296
  %28 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3297
  %valuedouble10 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %28, i32 0, i32 6, !dbg !3298
  %29 = load double, double* %valuedouble10, align 8, !dbg !3298
  %cmp11 = fcmp oeq double %27, %29, !dbg !3299
  br i1 %cmp11, label %30, label %31, !dbg !3300

; <label>:30:                                     ; preds = %25
  store i32 1, i32* %retval, align 4, !dbg !3301
  br label %124, !dbg !3301

; <label>:31:                                     ; preds = %25
  store i32 0, i32* %retval, align 4, !dbg !3303
  br label %124, !dbg !3303

; <label>:32:                                     ; preds = %21, %21
  %33 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3304
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %33, i32 0, i32 4, !dbg !3306
  %34 = load i8*, i8** %valuestring, align 8, !dbg !3306
  %cmp12 = icmp eq i8* %34, null, !dbg !3307
  br i1 %cmp12, label %38, label %35, !dbg !3308

; <label>:35:                                     ; preds = %32
  %36 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3309
  %valuestring13 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %36, i32 0, i32 4, !dbg !3311
  %37 = load i8*, i8** %valuestring13, align 8, !dbg !3311
  %cmp14 = icmp eq i8* %37, null, !dbg !3312
  br i1 %cmp14, label %38, label %39, !dbg !3313

; <label>:38:                                     ; preds = %35, %32
  store i32 0, i32* %retval, align 4, !dbg !3315
  br label %124, !dbg !3315

; <label>:39:                                     ; preds = %35
  %40 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3317
  %valuestring15 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %40, i32 0, i32 4, !dbg !3319
  %41 = load i8*, i8** %valuestring15, align 8, !dbg !3319
  %42 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3320
  %valuestring16 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %42, i32 0, i32 4, !dbg !3321
  %43 = load i8*, i8** %valuestring16, align 8, !dbg !3321
  %call17 = call i32 @strcmp(i8* %41, i8* %43) #8, !dbg !3322
  %cmp18 = icmp eq i32 %call17, 0, !dbg !3323
  br i1 %cmp18, label %44, label %45, !dbg !3324

; <label>:44:                                     ; preds = %39
  store i32 1, i32* %retval, align 4, !dbg !3325
  br label %124, !dbg !3325

; <label>:45:                                     ; preds = %39
  store i32 0, i32* %retval, align 4, !dbg !3327
  br label %124, !dbg !3327

; <label>:46:                                     ; preds = %21
  call void @llvm.dbg.declare(metadata %struct.cJSON** %a_element, metadata !3328, metadata !92), !dbg !3330
  %47 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3331
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %47, i32 0, i32 2, !dbg !3332
  %48 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !3332
  store %struct.cJSON* %48, %struct.cJSON** %a_element, align 8, !dbg !3330
  call void @llvm.dbg.declare(metadata %struct.cJSON** %b_element, metadata !3333, metadata !92), !dbg !3334
  %49 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3335
  %child19 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %49, i32 0, i32 2, !dbg !3336
  %50 = load %struct.cJSON*, %struct.cJSON** %child19, align 8, !dbg !3336
  store %struct.cJSON* %50, %struct.cJSON** %b_element, align 8, !dbg !3334
  br label %51, !dbg !3337

; <label>:51:                                     ; preds = %62, %46
  %52 = load %struct.cJSON*, %struct.cJSON** %a_element, align 8, !dbg !3338
  %cmp20 = icmp ne %struct.cJSON* %52, null, !dbg !3342
  br i1 %cmp20, label %53, label %55, !dbg !3343

; <label>:53:                                     ; preds = %51
  %54 = load %struct.cJSON*, %struct.cJSON** %b_element, align 8, !dbg !3344
  %cmp21 = icmp ne %struct.cJSON* %54, null, !dbg !3346
  br label %55

; <label>:55:                                     ; preds = %53, %51
  %56 = phi i1 [ false, %51 ], [ %cmp21, %53 ]
  br i1 %56, label %57, label %67, !dbg !3347

; <label>:57:                                     ; preds = %55
  %58 = load %struct.cJSON*, %struct.cJSON** %a_element, align 8, !dbg !3349
  %59 = load %struct.cJSON*, %struct.cJSON** %b_element, align 8, !dbg !3352
  %60 = load i32, i32* %case_sensitive.addr, align 4, !dbg !3353
  %call22 = call i32 @cJSON_Compare(%struct.cJSON* %58, %struct.cJSON* %59, i32 %60), !dbg !3354
  %tobool23 = icmp ne i32 %call22, 0, !dbg !3354
  br i1 %tobool23, label %62, label %61, !dbg !3355

; <label>:61:                                     ; preds = %57
  store i32 0, i32* %retval, align 4, !dbg !3356
  br label %124, !dbg !3356

; <label>:62:                                     ; preds = %57
  %63 = load %struct.cJSON*, %struct.cJSON** %a_element, align 8, !dbg !3358
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %63, i32 0, i32 0, !dbg !3359
  %64 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !3359
  store %struct.cJSON* %64, %struct.cJSON** %a_element, align 8, !dbg !3360
  %65 = load %struct.cJSON*, %struct.cJSON** %b_element, align 8, !dbg !3361
  %next24 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %65, i32 0, i32 0, !dbg !3362
  %66 = load %struct.cJSON*, %struct.cJSON** %next24, align 8, !dbg !3362
  store %struct.cJSON* %66, %struct.cJSON** %b_element, align 8, !dbg !3363
  br label %51, !dbg !3364, !llvm.loop !3366

; <label>:67:                                     ; preds = %55
  %68 = load %struct.cJSON*, %struct.cJSON** %a_element, align 8, !dbg !3369
  %69 = load %struct.cJSON*, %struct.cJSON** %b_element, align 8, !dbg !3371
  %cmp25 = icmp ne %struct.cJSON* %68, %69, !dbg !3372
  br i1 %cmp25, label %70, label %71, !dbg !3373

; <label>:70:                                     ; preds = %67
  store i32 0, i32* %retval, align 4, !dbg !3374
  br label %124, !dbg !3374

; <label>:71:                                     ; preds = %67
  store i32 1, i32* %retval, align 4, !dbg !3376
  br label %124, !dbg !3376

; <label>:72:                                     ; preds = %21
  call void @llvm.dbg.declare(metadata %struct.cJSON** %a_element26, metadata !3377, metadata !92), !dbg !3379
  store %struct.cJSON* null, %struct.cJSON** %a_element26, align 8, !dbg !3379
  call void @llvm.dbg.declare(metadata %struct.cJSON** %b_element27, metadata !3380, metadata !92), !dbg !3381
  store %struct.cJSON* null, %struct.cJSON** %b_element27, align 8, !dbg !3381
  %73 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3382
  %cmp28 = icmp ne %struct.cJSON* %73, null, !dbg !3382
  br i1 %cmp28, label %74, label %77, !dbg !3382

; <label>:74:                                     ; preds = %72
  %75 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3384
  %child29 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %75, i32 0, i32 2, !dbg !3384
  %76 = load %struct.cJSON*, %struct.cJSON** %child29, align 8, !dbg !3384
  br label %78, !dbg !3384

; <label>:77:                                     ; preds = %72
  br label %78, !dbg !3386

; <label>:78:                                     ; preds = %77, %74
  %cond = phi %struct.cJSON* [ %76, %74 ], [ null, %77 ], !dbg !3388
  store %struct.cJSON* %cond, %struct.cJSON** %a_element26, align 8, !dbg !3388
  br label %79, !dbg !3388

; <label>:79:                                     ; preds = %94, %78
  %80 = load %struct.cJSON*, %struct.cJSON** %a_element26, align 8, !dbg !3390
  %cmp30 = icmp ne %struct.cJSON* %80, null, !dbg !3390
  br i1 %cmp30, label %81, label %97, !dbg !3393

; <label>:81:                                     ; preds = %79
  %82 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3395
  %83 = load %struct.cJSON*, %struct.cJSON** %a_element26, align 8, !dbg !3397
  %string = getelementptr inbounds %struct.cJSON, %struct.cJSON* %83, i32 0, i32 7, !dbg !3398
  %84 = load i8*, i8** %string, align 8, !dbg !3398
  %85 = load i32, i32* %case_sensitive.addr, align 4, !dbg !3399
  %call31 = call %struct.cJSON* @get_object_item(%struct.cJSON* %82, i8* %84, i32 %85), !dbg !3400
  store %struct.cJSON* %call31, %struct.cJSON** %b_element27, align 8, !dbg !3401
  %86 = load %struct.cJSON*, %struct.cJSON** %b_element27, align 8, !dbg !3402
  %cmp32 = icmp eq %struct.cJSON* %86, null, !dbg !3404
  br i1 %cmp32, label %87, label %88, !dbg !3405

; <label>:87:                                     ; preds = %81
  store i32 0, i32* %retval, align 4, !dbg !3406
  br label %124, !dbg !3406

; <label>:88:                                     ; preds = %81
  %89 = load %struct.cJSON*, %struct.cJSON** %a_element26, align 8, !dbg !3408
  %90 = load %struct.cJSON*, %struct.cJSON** %b_element27, align 8, !dbg !3410
  %91 = load i32, i32* %case_sensitive.addr, align 4, !dbg !3411
  %call33 = call i32 @cJSON_Compare(%struct.cJSON* %89, %struct.cJSON* %90, i32 %91), !dbg !3412
  %tobool34 = icmp ne i32 %call33, 0, !dbg !3412
  br i1 %tobool34, label %93, label %92, !dbg !3413

; <label>:92:                                     ; preds = %88
  store i32 0, i32* %retval, align 4, !dbg !3414
  br label %124, !dbg !3414

; <label>:93:                                     ; preds = %88
  br label %94, !dbg !3416

; <label>:94:                                     ; preds = %93
  %95 = load %struct.cJSON*, %struct.cJSON** %a_element26, align 8, !dbg !3417
  %next35 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %95, i32 0, i32 0, !dbg !3417
  %96 = load %struct.cJSON*, %struct.cJSON** %next35, align 8, !dbg !3417
  store %struct.cJSON* %96, %struct.cJSON** %a_element26, align 8, !dbg !3417
  br label %79, !dbg !3417, !llvm.loop !3419

; <label>:97:                                     ; preds = %79
  %98 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3421
  %cmp36 = icmp ne %struct.cJSON* %98, null, !dbg !3421
  br i1 %cmp36, label %99, label %102, !dbg !3421

; <label>:99:                                     ; preds = %97
  %100 = load %struct.cJSON*, %struct.cJSON** %b.addr, align 8, !dbg !3423
  %child37 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %100, i32 0, i32 2, !dbg !3423
  %101 = load %struct.cJSON*, %struct.cJSON** %child37, align 8, !dbg !3423
  br label %103, !dbg !3423

; <label>:102:                                    ; preds = %97
  br label %103, !dbg !3425

; <label>:103:                                    ; preds = %102, %99
  %cond38 = phi %struct.cJSON* [ %101, %99 ], [ null, %102 ], !dbg !3427
  store %struct.cJSON* %cond38, %struct.cJSON** %b_element27, align 8, !dbg !3427
  br label %104, !dbg !3427

; <label>:104:                                    ; preds = %119, %103
  %105 = load %struct.cJSON*, %struct.cJSON** %b_element27, align 8, !dbg !3429
  %cmp39 = icmp ne %struct.cJSON* %105, null, !dbg !3429
  br i1 %cmp39, label %106, label %122, !dbg !3432

; <label>:106:                                    ; preds = %104
  %107 = load %struct.cJSON*, %struct.cJSON** %a.addr, align 8, !dbg !3434
  %108 = load %struct.cJSON*, %struct.cJSON** %b_element27, align 8, !dbg !3436
  %string40 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %108, i32 0, i32 7, !dbg !3437
  %109 = load i8*, i8** %string40, align 8, !dbg !3437
  %110 = load i32, i32* %case_sensitive.addr, align 4, !dbg !3438
  %call41 = call %struct.cJSON* @get_object_item(%struct.cJSON* %107, i8* %109, i32 %110), !dbg !3439
  store %struct.cJSON* %call41, %struct.cJSON** %a_element26, align 8, !dbg !3440
  %111 = load %struct.cJSON*, %struct.cJSON** %a_element26, align 8, !dbg !3441
  %cmp42 = icmp eq %struct.cJSON* %111, null, !dbg !3443
  br i1 %cmp42, label %112, label %113, !dbg !3444

; <label>:112:                                    ; preds = %106
  store i32 0, i32* %retval, align 4, !dbg !3445
  br label %124, !dbg !3445

; <label>:113:                                    ; preds = %106
  %114 = load %struct.cJSON*, %struct.cJSON** %b_element27, align 8, !dbg !3447
  %115 = load %struct.cJSON*, %struct.cJSON** %a_element26, align 8, !dbg !3449
  %116 = load i32, i32* %case_sensitive.addr, align 4, !dbg !3450
  %call43 = call i32 @cJSON_Compare(%struct.cJSON* %114, %struct.cJSON* %115, i32 %116), !dbg !3451
  %tobool44 = icmp ne i32 %call43, 0, !dbg !3451
  br i1 %tobool44, label %118, label %117, !dbg !3452

; <label>:117:                                    ; preds = %113
  store i32 0, i32* %retval, align 4, !dbg !3453
  br label %124, !dbg !3453

; <label>:118:                                    ; preds = %113
  br label %119, !dbg !3455

; <label>:119:                                    ; preds = %118
  %120 = load %struct.cJSON*, %struct.cJSON** %b_element27, align 8, !dbg !3456
  %next45 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %120, i32 0, i32 0, !dbg !3456
  %121 = load %struct.cJSON*, %struct.cJSON** %next45, align 8, !dbg !3456
  store %struct.cJSON* %121, %struct.cJSON** %b_element27, align 8, !dbg !3456
  br label %104, !dbg !3456, !llvm.loop !3458

; <label>:122:                                    ; preds = %104
  store i32 1, i32* %retval, align 4, !dbg !3460
  br label %124, !dbg !3460

; <label>:123:                                    ; preds = %21
  store i32 0, i32* %retval, align 4, !dbg !3461
  br label %124, !dbg !3461

; <label>:124:                                    ; preds = %123, %122, %117, %112, %92, %87, %71, %70, %61, %45, %44, %38, %31, %30, %24, %20, %16, %11
  %125 = load i32, i32* %retval, align 4, !dbg !3462
  ret i32 %125, !dbg !3462
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

; Function Attrs: noinline nounwind uwtable
define i8* @cJSON_malloc(i64 %size) #0 !dbg !3463 {
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !3464, metadata !92), !dbg !3465
  %1 = load i8* (i64)*, i8* (i64)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 0), align 8, !dbg !3466
  %2 = load i64, i64* %size.addr, align 8, !dbg !3467
  %call = call i8* %1(i64 %2), !dbg !3468
  ret i8* %call, !dbg !3469
}

; Function Attrs: noinline nounwind uwtable
define void @cJSON_free(i8* %object) #0 !dbg !3470 {
  %object.addr = alloca i8*, align 8
  store i8* %object, i8** %object.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %object.addr, metadata !3471, metadata !92), !dbg !3472
  %1 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.internal_hooks, %struct.internal_hooks* @global_hooks, i32 0, i32 1), align 8, !dbg !3473
  %2 = load i8*, i8** %object.addr, align 8, !dbg !3474
  call void %1(i8* %2), !dbg !3475
  ret void, !dbg !3476
}

; Function Attrs: noinline nounwind uwtable
define i8* @read_input() #0 !dbg !3477 {
  %counter = alloca i32, align 4
  %chars = alloca i8*, align 8
  %c = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i32* %counter, metadata !3480, metadata !92), !dbg !3481
  store i32 0, i32* %counter, align 4, !dbg !3481
  call void @llvm.dbg.declare(metadata i8** %chars, metadata !3482, metadata !92), !dbg !3483
  %call = call noalias i8* @malloc(i64 1000) #7, !dbg !3484
  store i8* %call, i8** %chars, align 8, !dbg !3483
  call void @llvm.dbg.declare(metadata i8* %c, metadata !3485, metadata !92), !dbg !3486
  store i8 0, i8* %c, align 1, !dbg !3486
  br label %1, !dbg !3487

; <label>:1:                                      ; preds = %6, %0
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !3488
  %call1 = call i32 @fgetc(%struct._IO_FILE* %2), !dbg !3490
  %conv = trunc i32 %call1 to i8, !dbg !3490
  store i8 %conv, i8* %c, align 1, !dbg !3491
  %conv2 = sext i8 %conv to i32, !dbg !3492
  %cmp = icmp ne i32 %conv2, -1, !dbg !3493
  br i1 %cmp, label %3, label %10, !dbg !3494

; <label>:3:                                      ; preds = %1
  %4 = load i32, i32* %counter, align 4, !dbg !3495
  %cmp4 = icmp eq i32 %4, 1000, !dbg !3498
  br i1 %cmp4, label %5, label %6, !dbg !3499

; <label>:5:                                      ; preds = %3
  call void @exit(i32 1) #9, !dbg !3500
  unreachable, !dbg !3500

; <label>:6:                                      ; preds = %3
  %7 = load i8, i8* %c, align 1, !dbg !3502
  %8 = load i8*, i8** %chars, align 8, !dbg !3503
  %9 = load i32, i32* %counter, align 4, !dbg !3504
  %inc = add nsw i32 %9, 1, !dbg !3504
  store i32 %inc, i32* %counter, align 4, !dbg !3504
  %idxprom = sext i32 %9 to i64, !dbg !3503
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom, !dbg !3503
  store i8 %7, i8* %arrayidx, align 1, !dbg !3505
  br label %1, !dbg !3506, !llvm.loop !3508

; <label>:10:                                     ; preds = %1
  %11 = load i8*, i8** %chars, align 8, !dbg !3510
  %12 = load i32, i32* %counter, align 4, !dbg !3511
  %idxprom6 = sext i32 %12 to i64, !dbg !3510
  %arrayidx7 = getelementptr inbounds i8, i8* %11, i64 %idxprom6, !dbg !3510
  store i8 0, i8* %arrayidx7, align 1, !dbg !3512
  %13 = load i8*, i8** %chars, align 8, !dbg !3513
  ret i8* %13, !dbg !3514
}

declare i32 @fgetc(%struct._IO_FILE*) #5

; Function Attrs: noreturn nounwind
declare void @exit(i32) #6

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 !dbg !3515 {
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %string = alloca i8*, align 8
  %json = alloca %struct.cJSON*, align 8
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !3518, metadata !92), !dbg !3519
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !3520, metadata !92), !dbg !3521
  call void @llvm.dbg.declare(metadata i8** %string, metadata !3522, metadata !92), !dbg !3523
  %call = call i8* @read_input(), !dbg !3524
  store i8* %call, i8** %string, align 8, !dbg !3523
  %1 = load i8*, i8** %string, align 8, !dbg !3525
  %call1 = call i32 (i8*, ...) @printf(i8* %1), !dbg !3526
  call void @llvm.dbg.declare(metadata %struct.cJSON** %json, metadata !3527, metadata !92), !dbg !3528
  %2 = load i8*, i8** %string, align 8, !dbg !3529
  %call2 = call %struct.cJSON* @cJSON_Parse(i8* %2), !dbg !3530
  store %struct.cJSON* %call2, %struct.cJSON** %json, align 8, !dbg !3528
  %3 = load %struct.cJSON*, %struct.cJSON** %json, align 8, !dbg !3531
  %cmp = icmp eq %struct.cJSON* %3, null, !dbg !3533
  br i1 %cmp, label %4, label %5, !dbg !3534

; <label>:4:                                      ; preds = %0
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0)), !dbg !3535
  call void @exit(i32 1) #9, !dbg !3537
  unreachable, !dbg !3537

; <label>:5:                                      ; preds = %0
  ret i32 0, !dbg !3538
}

declare i32 @printf(i8*, ...) #5

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define internal void @update_offset(%struct.printbuffer* %buffer) #0 !dbg !3539 {
  %buffer.addr = alloca %struct.printbuffer*, align 8
  %buffer_pointer = alloca i8*, align 8
  store %struct.printbuffer* %buffer, %struct.printbuffer** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.printbuffer** %buffer.addr, metadata !3542, metadata !92), !dbg !3543
  call void @llvm.dbg.declare(metadata i8** %buffer_pointer, metadata !3544, metadata !92), !dbg !3545
  store i8* null, i8** %buffer_pointer, align 8, !dbg !3545
  %1 = load %struct.printbuffer*, %struct.printbuffer** %buffer.addr, align 8, !dbg !3546
  %cmp = icmp eq %struct.printbuffer* %1, null, !dbg !3548
  br i1 %cmp, label %5, label %2, !dbg !3549

; <label>:2:                                      ; preds = %0
  %3 = load %struct.printbuffer*, %struct.printbuffer** %buffer.addr, align 8, !dbg !3550
  %buffer1 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i32 0, i32 0, !dbg !3552
  %4 = load i8*, i8** %buffer1, align 8, !dbg !3552
  %cmp2 = icmp eq i8* %4, null, !dbg !3553
  br i1 %cmp2, label %5, label %6, !dbg !3554

; <label>:5:                                      ; preds = %2, %0
  br label %14, !dbg !3556

; <label>:6:                                      ; preds = %2
  %7 = load %struct.printbuffer*, %struct.printbuffer** %buffer.addr, align 8, !dbg !3558
  %buffer3 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %7, i32 0, i32 0, !dbg !3559
  %8 = load i8*, i8** %buffer3, align 8, !dbg !3559
  %9 = load %struct.printbuffer*, %struct.printbuffer** %buffer.addr, align 8, !dbg !3560
  %offset = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %9, i32 0, i32 2, !dbg !3561
  %10 = load i64, i64* %offset, align 8, !dbg !3561
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %10, !dbg !3562
  store i8* %add.ptr, i8** %buffer_pointer, align 8, !dbg !3563
  %11 = load i8*, i8** %buffer_pointer, align 8, !dbg !3564
  %call = call i64 @strlen(i8* %11) #8, !dbg !3565
  %12 = load %struct.printbuffer*, %struct.printbuffer** %buffer.addr, align 8, !dbg !3566
  %offset4 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %12, i32 0, i32 2, !dbg !3567
  %13 = load i64, i64* %offset4, align 8, !dbg !3568
  %add = add i64 %13, %call, !dbg !3568
  store i64 %add, i64* %offset4, align 8, !dbg !3568
  br label %14, !dbg !3569

; <label>:14:                                     ; preds = %6, %5
  ret void, !dbg !3570
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @parse_string(%struct.cJSON* %item, %struct.parse_buffer* %input_buffer) #0 !dbg !3571 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %input_buffer.addr = alloca %struct.parse_buffer*, align 8
  %input_pointer = alloca i8*, align 8
  %input_end = alloca i8*, align 8
  %output_pointer = alloca i8*, align 8
  %output = alloca i8*, align 8
  %allocation_length = alloca i64, align 8
  %skipped_bytes = alloca i64, align 8
  %sequence_length = alloca i8, align 1
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3572, metadata !92), !dbg !3573
  store %struct.parse_buffer* %input_buffer, %struct.parse_buffer** %input_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.parse_buffer** %input_buffer.addr, metadata !3574, metadata !92), !dbg !3575
  call void @llvm.dbg.declare(metadata i8** %input_pointer, metadata !3576, metadata !92), !dbg !3577
  %1 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3578
  %content = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %1, i32 0, i32 0, !dbg !3578
  %2 = load i8*, i8** %content, align 8, !dbg !3578
  %3 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3578
  %offset = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %3, i32 0, i32 2, !dbg !3578
  %4 = load i64, i64* %offset, align 8, !dbg !3578
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %4, !dbg !3578
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 1, !dbg !3579
  store i8* %add.ptr1, i8** %input_pointer, align 8, !dbg !3577
  call void @llvm.dbg.declare(metadata i8** %input_end, metadata !3580, metadata !92), !dbg !3581
  %5 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3582
  %content2 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %5, i32 0, i32 0, !dbg !3582
  %6 = load i8*, i8** %content2, align 8, !dbg !3582
  %7 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3582
  %offset3 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %7, i32 0, i32 2, !dbg !3582
  %8 = load i64, i64* %offset3, align 8, !dbg !3582
  %add.ptr4 = getelementptr inbounds i8, i8* %6, i64 %8, !dbg !3582
  %add.ptr5 = getelementptr inbounds i8, i8* %add.ptr4, i64 1, !dbg !3583
  store i8* %add.ptr5, i8** %input_end, align 8, !dbg !3581
  call void @llvm.dbg.declare(metadata i8** %output_pointer, metadata !3584, metadata !92), !dbg !3585
  store i8* null, i8** %output_pointer, align 8, !dbg !3585
  call void @llvm.dbg.declare(metadata i8** %output, metadata !3586, metadata !92), !dbg !3587
  store i8* null, i8** %output, align 8, !dbg !3587
  %9 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3588
  %content6 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %9, i32 0, i32 0, !dbg !3588
  %10 = load i8*, i8** %content6, align 8, !dbg !3588
  %11 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3588
  %offset7 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %11, i32 0, i32 2, !dbg !3588
  %12 = load i64, i64* %offset7, align 8, !dbg !3588
  %add.ptr8 = getelementptr inbounds i8, i8* %10, i64 %12, !dbg !3588
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr8, i64 0, !dbg !3588
  %13 = load i8, i8* %arrayidx, align 1, !dbg !3588
  %conv = zext i8 %13 to i32, !dbg !3588
  %cmp = icmp ne i32 %conv, 34, !dbg !3590
  br i1 %cmp, label %14, label %15, !dbg !3591

; <label>:14:                                     ; preds = %0
  br label %119, !dbg !3592

; <label>:15:                                     ; preds = %0
  call void @llvm.dbg.declare(metadata i64* %allocation_length, metadata !3594, metadata !92), !dbg !3596
  store i64 0, i64* %allocation_length, align 8, !dbg !3596
  call void @llvm.dbg.declare(metadata i64* %skipped_bytes, metadata !3597, metadata !92), !dbg !3598
  store i64 0, i64* %skipped_bytes, align 8, !dbg !3598
  br label %16, !dbg !3599

; <label>:16:                                     ; preds = %40, %15
  %17 = load i8*, i8** %input_end, align 8, !dbg !3600
  %18 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3602
  %content10 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %18, i32 0, i32 0, !dbg !3603
  %19 = load i8*, i8** %content10, align 8, !dbg !3603
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64, !dbg !3604
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64, !dbg !3604
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3604
  %20 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3605
  %length = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %20, i32 0, i32 1, !dbg !3606
  %21 = load i64, i64* %length, align 8, !dbg !3606
  %cmp11 = icmp ult i64 %sub.ptr.sub, %21, !dbg !3607
  br i1 %cmp11, label %22, label %25, !dbg !3608

; <label>:22:                                     ; preds = %16
  %23 = load i8*, i8** %input_end, align 8, !dbg !3609
  %24 = load i8, i8* %23, align 1, !dbg !3611
  %conv13 = zext i8 %24 to i32, !dbg !3611
  %cmp14 = icmp ne i32 %conv13, 34, !dbg !3612
  br label %25

; <label>:25:                                     ; preds = %22, %16
  %26 = phi i1 [ false, %16 ], [ %cmp14, %22 ]
  br i1 %26, label %27, label %42, !dbg !3613

; <label>:27:                                     ; preds = %25
  %28 = load i8*, i8** %input_end, align 8, !dbg !3615
  %arrayidx16 = getelementptr inbounds i8, i8* %28, i64 0, !dbg !3615
  %29 = load i8, i8* %arrayidx16, align 1, !dbg !3615
  %conv17 = zext i8 %29 to i32, !dbg !3615
  %cmp18 = icmp eq i32 %conv17, 92, !dbg !3618
  br i1 %cmp18, label %30, label %40, !dbg !3619

; <label>:30:                                     ; preds = %27
  %31 = load i8*, i8** %input_end, align 8, !dbg !3620
  %add.ptr20 = getelementptr inbounds i8, i8* %31, i64 1, !dbg !3623
  %32 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3624
  %content21 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %32, i32 0, i32 0, !dbg !3625
  %33 = load i8*, i8** %content21, align 8, !dbg !3625
  %sub.ptr.lhs.cast22 = ptrtoint i8* %add.ptr20 to i64, !dbg !3626
  %sub.ptr.rhs.cast23 = ptrtoint i8* %33 to i64, !dbg !3626
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast22, %sub.ptr.rhs.cast23, !dbg !3626
  %34 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3627
  %length25 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %34, i32 0, i32 1, !dbg !3628
  %35 = load i64, i64* %length25, align 8, !dbg !3628
  %cmp26 = icmp uge i64 %sub.ptr.sub24, %35, !dbg !3629
  br i1 %cmp26, label %36, label %37, !dbg !3630

; <label>:36:                                     ; preds = %30
  br label %119, !dbg !3631

; <label>:37:                                     ; preds = %30
  %38 = load i64, i64* %skipped_bytes, align 8, !dbg !3633
  %inc = add i64 %38, 1, !dbg !3633
  store i64 %inc, i64* %skipped_bytes, align 8, !dbg !3633
  %39 = load i8*, i8** %input_end, align 8, !dbg !3634
  %incdec.ptr = getelementptr inbounds i8, i8* %39, i32 1, !dbg !3634
  store i8* %incdec.ptr, i8** %input_end, align 8, !dbg !3634
  br label %40, !dbg !3635

; <label>:40:                                     ; preds = %37, %27
  %41 = load i8*, i8** %input_end, align 8, !dbg !3636
  %incdec.ptr28 = getelementptr inbounds i8, i8* %41, i32 1, !dbg !3636
  store i8* %incdec.ptr28, i8** %input_end, align 8, !dbg !3636
  br label %16, !dbg !3637, !llvm.loop !3639

; <label>:42:                                     ; preds = %25
  %43 = load i8*, i8** %input_end, align 8, !dbg !3641
  %44 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3643
  %content29 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %44, i32 0, i32 0, !dbg !3644
  %45 = load i8*, i8** %content29, align 8, !dbg !3644
  %sub.ptr.lhs.cast30 = ptrtoint i8* %43 to i64, !dbg !3645
  %sub.ptr.rhs.cast31 = ptrtoint i8* %45 to i64, !dbg !3645
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31, !dbg !3645
  %46 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3646
  %length33 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %46, i32 0, i32 1, !dbg !3647
  %47 = load i64, i64* %length33, align 8, !dbg !3647
  %cmp34 = icmp uge i64 %sub.ptr.sub32, %47, !dbg !3648
  br i1 %cmp34, label %51, label %48, !dbg !3649

; <label>:48:                                     ; preds = %42
  %49 = load i8*, i8** %input_end, align 8, !dbg !3650
  %50 = load i8, i8* %49, align 1, !dbg !3652
  %conv36 = zext i8 %50 to i32, !dbg !3652
  %cmp37 = icmp ne i32 %conv36, 34, !dbg !3653
  br i1 %cmp37, label %51, label %52, !dbg !3654

; <label>:51:                                     ; preds = %48, %42
  br label %119, !dbg !3655

; <label>:52:                                     ; preds = %48
  %53 = load i8*, i8** %input_end, align 8, !dbg !3657
  %54 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3658
  %content39 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %54, i32 0, i32 0, !dbg !3658
  %55 = load i8*, i8** %content39, align 8, !dbg !3658
  %56 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3658
  %offset40 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %56, i32 0, i32 2, !dbg !3658
  %57 = load i64, i64* %offset40, align 8, !dbg !3658
  %add.ptr41 = getelementptr inbounds i8, i8* %55, i64 %57, !dbg !3658
  %sub.ptr.lhs.cast42 = ptrtoint i8* %53 to i64, !dbg !3659
  %sub.ptr.rhs.cast43 = ptrtoint i8* %add.ptr41 to i64, !dbg !3659
  %sub.ptr.sub44 = sub i64 %sub.ptr.lhs.cast42, %sub.ptr.rhs.cast43, !dbg !3659
  %58 = load i64, i64* %skipped_bytes, align 8, !dbg !3660
  %sub = sub i64 %sub.ptr.sub44, %58, !dbg !3661
  store i64 %sub, i64* %allocation_length, align 8, !dbg !3662
  %59 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3663
  %hooks = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %59, i32 0, i32 4, !dbg !3664
  %allocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %hooks, i32 0, i32 0, !dbg !3665
  %60 = load i8* (i64)*, i8* (i64)** %allocate, align 8, !dbg !3665
  %61 = load i64, i64* %allocation_length, align 8, !dbg !3666
  %add = add i64 %61, 1, !dbg !3667
  %call = call i8* %60(i64 %add), !dbg !3663
  store i8* %call, i8** %output, align 8, !dbg !3668
  %62 = load i8*, i8** %output, align 8, !dbg !3669
  %cmp45 = icmp eq i8* %62, null, !dbg !3671
  br i1 %cmp45, label %63, label %64, !dbg !3672

; <label>:63:                                     ; preds = %52
  br label %119, !dbg !3673

; <label>:64:                                     ; preds = %52
  %65 = load i8*, i8** %output, align 8, !dbg !3675
  store i8* %65, i8** %output_pointer, align 8, !dbg !3676
  br label %66, !dbg !3677

; <label>:66:                                     ; preds = %107, %64
  %67 = load i8*, i8** %input_pointer, align 8, !dbg !3678
  %68 = load i8*, i8** %input_end, align 8, !dbg !3680
  %cmp47 = icmp ult i8* %67, %68, !dbg !3681
  br i1 %cmp47, label %69, label %108, !dbg !3682

; <label>:69:                                     ; preds = %66
  %70 = load i8*, i8** %input_pointer, align 8, !dbg !3683
  %71 = load i8, i8* %70, align 1, !dbg !3686
  %conv49 = zext i8 %71 to i32, !dbg !3686
  %cmp50 = icmp ne i32 %conv49, 92, !dbg !3687
  br i1 %cmp50, label %72, label %76, !dbg !3688

; <label>:72:                                     ; preds = %69
  %73 = load i8*, i8** %input_pointer, align 8, !dbg !3689
  %incdec.ptr52 = getelementptr inbounds i8, i8* %73, i32 1, !dbg !3689
  store i8* %incdec.ptr52, i8** %input_pointer, align 8, !dbg !3689
  %74 = load i8, i8* %73, align 1, !dbg !3691
  %75 = load i8*, i8** %output_pointer, align 8, !dbg !3692
  %incdec.ptr53 = getelementptr inbounds i8, i8* %75, i32 1, !dbg !3692
  store i8* %incdec.ptr53, i8** %output_pointer, align 8, !dbg !3692
  store i8 %74, i8* %75, align 1, !dbg !3693
  br label %107, !dbg !3694

; <label>:76:                                     ; preds = %69
  call void @llvm.dbg.declare(metadata i8* %sequence_length, metadata !3695, metadata !92), !dbg !3697
  store i8 2, i8* %sequence_length, align 1, !dbg !3697
  %77 = load i8*, i8** %input_end, align 8, !dbg !3698
  %78 = load i8*, i8** %input_pointer, align 8, !dbg !3700
  %sub.ptr.lhs.cast54 = ptrtoint i8* %77 to i64, !dbg !3701
  %sub.ptr.rhs.cast55 = ptrtoint i8* %78 to i64, !dbg !3701
  %sub.ptr.sub56 = sub i64 %sub.ptr.lhs.cast54, %sub.ptr.rhs.cast55, !dbg !3701
  %cmp57 = icmp slt i64 %sub.ptr.sub56, 1, !dbg !3702
  br i1 %cmp57, label %79, label %80, !dbg !3703

; <label>:79:                                     ; preds = %76
  br label %119, !dbg !3704

; <label>:80:                                     ; preds = %76
  %81 = load i8*, i8** %input_pointer, align 8, !dbg !3706
  %arrayidx59 = getelementptr inbounds i8, i8* %81, i64 1, !dbg !3706
  %82 = load i8, i8* %arrayidx59, align 1, !dbg !3706
  %conv60 = zext i8 %82 to i32, !dbg !3706
  switch i32 %conv60, label %103 [
    i32 98, label %83
    i32 102, label %85
    i32 110, label %87
    i32 114, label %89
    i32 116, label %91
    i32 34, label %93
    i32 92, label %93
    i32 47, label %93
    i32 117, label %97
  ], !dbg !3707

; <label>:83:                                     ; preds = %80
  %84 = load i8*, i8** %output_pointer, align 8, !dbg !3708
  %incdec.ptr61 = getelementptr inbounds i8, i8* %84, i32 1, !dbg !3708
  store i8* %incdec.ptr61, i8** %output_pointer, align 8, !dbg !3708
  store i8 8, i8* %84, align 1, !dbg !3710
  br label %104, !dbg !3711

; <label>:85:                                     ; preds = %80
  %86 = load i8*, i8** %output_pointer, align 8, !dbg !3712
  %incdec.ptr62 = getelementptr inbounds i8, i8* %86, i32 1, !dbg !3712
  store i8* %incdec.ptr62, i8** %output_pointer, align 8, !dbg !3712
  store i8 12, i8* %86, align 1, !dbg !3713
  br label %104, !dbg !3714

; <label>:87:                                     ; preds = %80
  %88 = load i8*, i8** %output_pointer, align 8, !dbg !3715
  %incdec.ptr63 = getelementptr inbounds i8, i8* %88, i32 1, !dbg !3715
  store i8* %incdec.ptr63, i8** %output_pointer, align 8, !dbg !3715
  store i8 10, i8* %88, align 1, !dbg !3716
  br label %104, !dbg !3717

; <label>:89:                                     ; preds = %80
  %90 = load i8*, i8** %output_pointer, align 8, !dbg !3718
  %incdec.ptr64 = getelementptr inbounds i8, i8* %90, i32 1, !dbg !3718
  store i8* %incdec.ptr64, i8** %output_pointer, align 8, !dbg !3718
  store i8 13, i8* %90, align 1, !dbg !3719
  br label %104, !dbg !3720

; <label>:91:                                     ; preds = %80
  %92 = load i8*, i8** %output_pointer, align 8, !dbg !3721
  %incdec.ptr65 = getelementptr inbounds i8, i8* %92, i32 1, !dbg !3721
  store i8* %incdec.ptr65, i8** %output_pointer, align 8, !dbg !3721
  store i8 9, i8* %92, align 1, !dbg !3722
  br label %104, !dbg !3723

; <label>:93:                                     ; preds = %80, %80, %80
  %94 = load i8*, i8** %input_pointer, align 8, !dbg !3724
  %arrayidx66 = getelementptr inbounds i8, i8* %94, i64 1, !dbg !3724
  %95 = load i8, i8* %arrayidx66, align 1, !dbg !3724
  %96 = load i8*, i8** %output_pointer, align 8, !dbg !3725
  %incdec.ptr67 = getelementptr inbounds i8, i8* %96, i32 1, !dbg !3725
  store i8* %incdec.ptr67, i8** %output_pointer, align 8, !dbg !3725
  store i8 %95, i8* %96, align 1, !dbg !3726
  br label %104, !dbg !3727

; <label>:97:                                     ; preds = %80
  %98 = load i8*, i8** %input_pointer, align 8, !dbg !3728
  %99 = load i8*, i8** %input_end, align 8, !dbg !3729
  %call68 = call zeroext i8 @utf16_literal_to_utf8(i8* %98, i8* %99, i8** %output_pointer), !dbg !3730
  store i8 %call68, i8* %sequence_length, align 1, !dbg !3731
  %100 = load i8, i8* %sequence_length, align 1, !dbg !3732
  %conv69 = zext i8 %100 to i32, !dbg !3732
  %cmp70 = icmp eq i32 %conv69, 0, !dbg !3734
  br i1 %cmp70, label %101, label %102, !dbg !3735

; <label>:101:                                    ; preds = %97
  br label %119, !dbg !3736

; <label>:102:                                    ; preds = %97
  br label %104, !dbg !3738

; <label>:103:                                    ; preds = %80
  br label %119, !dbg !3739

; <label>:104:                                    ; preds = %102, %93, %91, %89, %87, %85, %83
  %105 = load i8, i8* %sequence_length, align 1, !dbg !3740
  %conv72 = zext i8 %105 to i32, !dbg !3740
  %106 = load i8*, i8** %input_pointer, align 8, !dbg !3741
  %idx.ext = sext i32 %conv72 to i64, !dbg !3741
  %add.ptr73 = getelementptr inbounds i8, i8* %106, i64 %idx.ext, !dbg !3741
  store i8* %add.ptr73, i8** %input_pointer, align 8, !dbg !3741
  br label %107

; <label>:107:                                    ; preds = %104, %72
  br label %66, !dbg !3742, !llvm.loop !3744

; <label>:108:                                    ; preds = %66
  %109 = load i8*, i8** %output_pointer, align 8, !dbg !3746
  store i8 0, i8* %109, align 1, !dbg !3747
  %110 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3748
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %110, i32 0, i32 3, !dbg !3749
  store i32 16, i32* %type, align 8, !dbg !3750
  %111 = load i8*, i8** %output, align 8, !dbg !3751
  %112 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3752
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %112, i32 0, i32 4, !dbg !3753
  store i8* %111, i8** %valuestring, align 8, !dbg !3754
  %113 = load i8*, i8** %input_end, align 8, !dbg !3755
  %114 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3756
  %content74 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %114, i32 0, i32 0, !dbg !3757
  %115 = load i8*, i8** %content74, align 8, !dbg !3757
  %sub.ptr.lhs.cast75 = ptrtoint i8* %113 to i64, !dbg !3758
  %sub.ptr.rhs.cast76 = ptrtoint i8* %115 to i64, !dbg !3758
  %sub.ptr.sub77 = sub i64 %sub.ptr.lhs.cast75, %sub.ptr.rhs.cast76, !dbg !3758
  %116 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3759
  %offset78 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %116, i32 0, i32 2, !dbg !3760
  store i64 %sub.ptr.sub77, i64* %offset78, align 8, !dbg !3761
  %117 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3762
  %offset79 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %117, i32 0, i32 2, !dbg !3763
  %118 = load i64, i64* %offset79, align 8, !dbg !3764
  %inc80 = add i64 %118, 1, !dbg !3764
  store i64 %inc80, i64* %offset79, align 8, !dbg !3764
  store i32 1, i32* %retval, align 4, !dbg !3765
  br label %133, !dbg !3765

; <label>:119:                                    ; preds = %103, %101, %79, %63, %51, %36, %14
  %120 = load i8*, i8** %output, align 8, !dbg !3766
  %cmp81 = icmp ne i8* %120, null, !dbg !3768
  br i1 %cmp81, label %121, label %125, !dbg !3769

; <label>:121:                                    ; preds = %119
  %122 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3770
  %hooks83 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %122, i32 0, i32 4, !dbg !3772
  %deallocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %hooks83, i32 0, i32 1, !dbg !3773
  %123 = load void (i8*)*, void (i8*)** %deallocate, align 8, !dbg !3773
  %124 = load i8*, i8** %output, align 8, !dbg !3774
  call void %123(i8* %124), !dbg !3770
  br label %125, !dbg !3775

; <label>:125:                                    ; preds = %121, %119
  %126 = load i8*, i8** %input_pointer, align 8, !dbg !3776
  %cmp84 = icmp ne i8* %126, null, !dbg !3778
  br i1 %cmp84, label %127, label %132, !dbg !3779

; <label>:127:                                    ; preds = %125
  %128 = load i8*, i8** %input_pointer, align 8, !dbg !3780
  %129 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3782
  %content86 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %129, i32 0, i32 0, !dbg !3783
  %130 = load i8*, i8** %content86, align 8, !dbg !3783
  %sub.ptr.lhs.cast87 = ptrtoint i8* %128 to i64, !dbg !3784
  %sub.ptr.rhs.cast88 = ptrtoint i8* %130 to i64, !dbg !3784
  %sub.ptr.sub89 = sub i64 %sub.ptr.lhs.cast87, %sub.ptr.rhs.cast88, !dbg !3784
  %131 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3785
  %offset90 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %131, i32 0, i32 2, !dbg !3786
  store i64 %sub.ptr.sub89, i64* %offset90, align 8, !dbg !3787
  br label %132, !dbg !3788

; <label>:132:                                    ; preds = %127, %125
  store i32 0, i32* %retval, align 4, !dbg !3789
  br label %133, !dbg !3789

; <label>:133:                                    ; preds = %132, %108
  %134 = load i32, i32* %retval, align 4, !dbg !3790
  ret i32 %134, !dbg !3790
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @parse_number(%struct.cJSON* %item, %struct.parse_buffer* %input_buffer) #0 !dbg !3791 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %input_buffer.addr = alloca %struct.parse_buffer*, align 8
  %number = alloca double, align 8
  %after_end = alloca i8*, align 8
  %number_c_string = alloca [64 x i8], align 16
  %decimal_point = alloca i8, align 1
  %i = alloca i64, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3792, metadata !92), !dbg !3793
  store %struct.parse_buffer* %input_buffer, %struct.parse_buffer** %input_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.parse_buffer** %input_buffer.addr, metadata !3794, metadata !92), !dbg !3795
  call void @llvm.dbg.declare(metadata double* %number, metadata !3796, metadata !92), !dbg !3797
  store double 0.000000e+00, double* %number, align 8, !dbg !3797
  call void @llvm.dbg.declare(metadata i8** %after_end, metadata !3798, metadata !92), !dbg !3799
  store i8* null, i8** %after_end, align 8, !dbg !3799
  call void @llvm.dbg.declare(metadata [64 x i8]* %number_c_string, metadata !3800, metadata !92), !dbg !3804
  call void @llvm.dbg.declare(metadata i8* %decimal_point, metadata !3805, metadata !92), !dbg !3806
  %call = call zeroext i8 @get_decimal_point(), !dbg !3807
  store i8 %call, i8* %decimal_point, align 1, !dbg !3806
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3808, metadata !92), !dbg !3809
  store i64 0, i64* %i, align 8, !dbg !3809
  %1 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3810
  %cmp = icmp eq %struct.parse_buffer* %1, null, !dbg !3812
  br i1 %cmp, label %5, label %2, !dbg !3813

; <label>:2:                                      ; preds = %0
  %3 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3814
  %content = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %3, i32 0, i32 0, !dbg !3816
  %4 = load i8*, i8** %content, align 8, !dbg !3816
  %cmp1 = icmp eq i8* %4, null, !dbg !3817
  br i1 %cmp1, label %5, label %6, !dbg !3818

; <label>:5:                                      ; preds = %2, %0
  store i32 0, i32* %retval, align 4, !dbg !3820
  br label %67, !dbg !3820

; <label>:6:                                      ; preds = %2
  store i64 0, i64* %i, align 8, !dbg !3822
  br label %7, !dbg !3824

; <label>:7:                                      ; preds = %41, %6
  %8 = load i64, i64* %i, align 8, !dbg !3825
  %cmp2 = icmp ult i64 %8, 63, !dbg !3828
  br i1 %cmp2, label %9, label %19, !dbg !3829

; <label>:9:                                      ; preds = %7
  %10 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3830
  %cmp3 = icmp ne %struct.parse_buffer* %10, null, !dbg !3830
  br i1 %cmp3, label %11, label %17, !dbg !3830

; <label>:11:                                     ; preds = %9
  %12 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3832
  %offset = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %12, i32 0, i32 2, !dbg !3832
  %13 = load i64, i64* %offset, align 8, !dbg !3832
  %14 = load i64, i64* %i, align 8, !dbg !3832
  %add = add i64 %13, %14, !dbg !3832
  %15 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3832
  %length = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %15, i32 0, i32 1, !dbg !3832
  %16 = load i64, i64* %length, align 8, !dbg !3832
  %cmp4 = icmp ult i64 %add, %16, !dbg !3832
  br label %17

; <label>:17:                                     ; preds = %11, %9
  %18 = phi i1 [ false, %9 ], [ %cmp4, %11 ]
  br label %19

; <label>:19:                                     ; preds = %17, %7
  %20 = phi i1 [ false, %7 ], [ %18, %17 ]
  br i1 %20, label %21, label %43, !dbg !3834

; <label>:21:                                     ; preds = %19
  %22 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3836
  %content5 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %22, i32 0, i32 0, !dbg !3836
  %23 = load i8*, i8** %content5, align 8, !dbg !3836
  %24 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3836
  %offset6 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %24, i32 0, i32 2, !dbg !3836
  %25 = load i64, i64* %offset6, align 8, !dbg !3836
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 %25, !dbg !3836
  %26 = load i64, i64* %i, align 8, !dbg !3838
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 %26, !dbg !3836
  %27 = load i8, i8* %arrayidx, align 1, !dbg !3836
  %conv = zext i8 %27 to i32, !dbg !3836
  switch i32 %conv, label %39 [
    i32 48, label %28
    i32 49, label %28
    i32 50, label %28
    i32 51, label %28
    i32 52, label %28
    i32 53, label %28
    i32 54, label %28
    i32 55, label %28
    i32 56, label %28
    i32 57, label %28
    i32 43, label %28
    i32 45, label %28
    i32 101, label %28
    i32 69, label %28
    i32 46, label %36
  ], !dbg !3839

; <label>:28:                                     ; preds = %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21
  %29 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3840
  %content7 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %29, i32 0, i32 0, !dbg !3840
  %30 = load i8*, i8** %content7, align 8, !dbg !3840
  %31 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3840
  %offset8 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %31, i32 0, i32 2, !dbg !3840
  %32 = load i64, i64* %offset8, align 8, !dbg !3840
  %add.ptr9 = getelementptr inbounds i8, i8* %30, i64 %32, !dbg !3840
  %33 = load i64, i64* %i, align 8, !dbg !3842
  %arrayidx10 = getelementptr inbounds i8, i8* %add.ptr9, i64 %33, !dbg !3840
  %34 = load i8, i8* %arrayidx10, align 1, !dbg !3840
  %35 = load i64, i64* %i, align 8, !dbg !3843
  %arrayidx11 = getelementptr inbounds [64 x i8], [64 x i8]* %number_c_string, i64 0, i64 %35, !dbg !3844
  store i8 %34, i8* %arrayidx11, align 1, !dbg !3845
  br label %40, !dbg !3846

; <label>:36:                                     ; preds = %21
  %37 = load i8, i8* %decimal_point, align 1, !dbg !3847
  %38 = load i64, i64* %i, align 8, !dbg !3848
  %arrayidx12 = getelementptr inbounds [64 x i8], [64 x i8]* %number_c_string, i64 0, i64 %38, !dbg !3849
  store i8 %37, i8* %arrayidx12, align 1, !dbg !3850
  br label %40, !dbg !3851

; <label>:39:                                     ; preds = %21
  br label %44, !dbg !3852

; <label>:40:                                     ; preds = %36, %28
  br label %41, !dbg !3853

; <label>:41:                                     ; preds = %40
  %42 = load i64, i64* %i, align 8, !dbg !3854
  %inc = add i64 %42, 1, !dbg !3854
  store i64 %inc, i64* %i, align 8, !dbg !3854
  br label %7, !dbg !3856, !llvm.loop !3857

; <label>:43:                                     ; preds = %19
  br label %44, !dbg !3860

; <label>:44:                                     ; preds = %43, %39
  %45 = load i64, i64* %i, align 8, !dbg !3862
  %arrayidx13 = getelementptr inbounds [64 x i8], [64 x i8]* %number_c_string, i64 0, i64 %45, !dbg !3863
  store i8 0, i8* %arrayidx13, align 1, !dbg !3864
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %number_c_string, i32 0, i32 0, !dbg !3865
  %call14 = call double @strtod(i8* %arraydecay, i8** %after_end) #7, !dbg !3866
  store double %call14, double* %number, align 8, !dbg !3867
  %arraydecay15 = getelementptr inbounds [64 x i8], [64 x i8]* %number_c_string, i32 0, i32 0, !dbg !3868
  %46 = load i8*, i8** %after_end, align 8, !dbg !3870
  %cmp16 = icmp eq i8* %arraydecay15, %46, !dbg !3871
  br i1 %cmp16, label %47, label %48, !dbg !3872

; <label>:47:                                     ; preds = %44
  store i32 0, i32* %retval, align 4, !dbg !3873
  br label %67, !dbg !3873

; <label>:48:                                     ; preds = %44
  %49 = load double, double* %number, align 8, !dbg !3875
  %50 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3876
  %valuedouble = getelementptr inbounds %struct.cJSON, %struct.cJSON* %50, i32 0, i32 6, !dbg !3877
  store double %49, double* %valuedouble, align 8, !dbg !3878
  %51 = load double, double* %number, align 8, !dbg !3879
  %cmp18 = fcmp oge double %51, 0x41DFFFFFFFC00000, !dbg !3881
  br i1 %cmp18, label %52, label %54, !dbg !3882

; <label>:52:                                     ; preds = %48
  %53 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3883
  %valueint = getelementptr inbounds %struct.cJSON, %struct.cJSON* %53, i32 0, i32 5, !dbg !3885
  store i32 2147483647, i32* %valueint, align 8, !dbg !3886
  br label %62, !dbg !3887

; <label>:54:                                     ; preds = %48
  %55 = load double, double* %number, align 8, !dbg !3888
  %cmp20 = fcmp ole double %55, 0xC1E0000000000000, !dbg !3890
  br i1 %cmp20, label %56, label %58, !dbg !3891

; <label>:56:                                     ; preds = %54
  %57 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3892
  %valueint22 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %57, i32 0, i32 5, !dbg !3894
  store i32 -2147483648, i32* %valueint22, align 8, !dbg !3895
  br label %61, !dbg !3896

; <label>:58:                                     ; preds = %54
  %59 = load double, double* %number, align 8, !dbg !3897
  %conv23 = fptosi double %59 to i32, !dbg !3899
  %60 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3900
  %valueint24 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %60, i32 0, i32 5, !dbg !3901
  store i32 %conv23, i32* %valueint24, align 8, !dbg !3902
  br label %61

; <label>:61:                                     ; preds = %58, %56
  br label %62

; <label>:62:                                     ; preds = %61, %52
  %63 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !3903
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %63, i32 0, i32 3, !dbg !3904
  store i32 8, i32* %type, align 8, !dbg !3905
  %64 = load i8*, i8** %after_end, align 8, !dbg !3906
  %arraydecay25 = getelementptr inbounds [64 x i8], [64 x i8]* %number_c_string, i32 0, i32 0, !dbg !3907
  %sub.ptr.lhs.cast = ptrtoint i8* %64 to i64, !dbg !3908
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay25 to i64, !dbg !3908
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3908
  %65 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3909
  %offset26 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %65, i32 0, i32 2, !dbg !3910
  %66 = load i64, i64* %offset26, align 8, !dbg !3911
  %add27 = add i64 %66, %sub.ptr.sub, !dbg !3911
  store i64 %add27, i64* %offset26, align 8, !dbg !3911
  store i32 1, i32* %retval, align 4, !dbg !3912
  br label %67, !dbg !3912

; <label>:67:                                     ; preds = %62, %47, %5
  %68 = load i32, i32* %retval, align 4, !dbg !3913
  ret i32 %68, !dbg !3913
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @parse_array(%struct.cJSON* %item, %struct.parse_buffer* %input_buffer) #0 !dbg !3914 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %input_buffer.addr = alloca %struct.parse_buffer*, align 8
  %head = alloca %struct.cJSON*, align 8
  %current_item = alloca %struct.cJSON*, align 8
  %new_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !3915, metadata !92), !dbg !3916
  store %struct.parse_buffer* %input_buffer, %struct.parse_buffer** %input_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.parse_buffer** %input_buffer.addr, metadata !3917, metadata !92), !dbg !3918
  call void @llvm.dbg.declare(metadata %struct.cJSON** %head, metadata !3919, metadata !92), !dbg !3920
  store %struct.cJSON* null, %struct.cJSON** %head, align 8, !dbg !3920
  call void @llvm.dbg.declare(metadata %struct.cJSON** %current_item, metadata !3921, metadata !92), !dbg !3922
  store %struct.cJSON* null, %struct.cJSON** %current_item, align 8, !dbg !3922
  %1 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3923
  %depth = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %1, i32 0, i32 3, !dbg !3925
  %2 = load i64, i64* %depth, align 8, !dbg !3925
  %cmp = icmp uge i64 %2, 1000, !dbg !3926
  br i1 %cmp, label %3, label %4, !dbg !3927

; <label>:3:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !3928
  br label %109, !dbg !3928

; <label>:4:                                      ; preds = %0
  %5 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3930
  %depth1 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %5, i32 0, i32 3, !dbg !3931
  %6 = load i64, i64* %depth1, align 8, !dbg !3932
  %inc = add i64 %6, 1, !dbg !3932
  store i64 %inc, i64* %depth1, align 8, !dbg !3932
  %7 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3933
  %content = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %7, i32 0, i32 0, !dbg !3933
  %8 = load i8*, i8** %content, align 8, !dbg !3933
  %9 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3933
  %offset = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %9, i32 0, i32 2, !dbg !3933
  %10 = load i64, i64* %offset, align 8, !dbg !3933
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %10, !dbg !3933
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 0, !dbg !3933
  %11 = load i8, i8* %arrayidx, align 1, !dbg !3933
  %conv = zext i8 %11 to i32, !dbg !3933
  %cmp2 = icmp ne i32 %conv, 91, !dbg !3935
  br i1 %cmp2, label %12, label %13, !dbg !3936

; <label>:12:                                     ; preds = %4
  br label %104, !dbg !3937

; <label>:13:                                     ; preds = %4
  %14 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3939
  %offset4 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %14, i32 0, i32 2, !dbg !3940
  %15 = load i64, i64* %offset4, align 8, !dbg !3941
  %inc5 = add i64 %15, 1, !dbg !3941
  store i64 %inc5, i64* %offset4, align 8, !dbg !3941
  %16 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3942
  %call = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %16), !dbg !3943
  %17 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3944
  %cmp6 = icmp ne %struct.parse_buffer* %17, null, !dbg !3944
  br i1 %cmp6, label %18, label %30, !dbg !3944

; <label>:18:                                     ; preds = %13
  %19 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3946
  %offset8 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %19, i32 0, i32 2, !dbg !3946
  %20 = load i64, i64* %offset8, align 8, !dbg !3946
  %add = add i64 %20, 0, !dbg !3946
  %21 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3946
  %length = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %21, i32 0, i32 1, !dbg !3946
  %22 = load i64, i64* %length, align 8, !dbg !3946
  %cmp9 = icmp ult i64 %add, %22, !dbg !3946
  br i1 %cmp9, label %23, label %30, !dbg !3948

; <label>:23:                                     ; preds = %18
  %24 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3949
  %content11 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %24, i32 0, i32 0, !dbg !3949
  %25 = load i8*, i8** %content11, align 8, !dbg !3949
  %26 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3949
  %offset12 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %26, i32 0, i32 2, !dbg !3949
  %27 = load i64, i64* %offset12, align 8, !dbg !3949
  %add.ptr13 = getelementptr inbounds i8, i8* %25, i64 %27, !dbg !3949
  %arrayidx14 = getelementptr inbounds i8, i8* %add.ptr13, i64 0, !dbg !3949
  %28 = load i8, i8* %arrayidx14, align 1, !dbg !3949
  %conv15 = zext i8 %28 to i32, !dbg !3949
  %cmp16 = icmp eq i32 %conv15, 93, !dbg !3951
  br i1 %cmp16, label %29, label %30, !dbg !3952

; <label>:29:                                     ; preds = %23
  br label %96, !dbg !3954

; <label>:30:                                     ; preds = %23, %18, %13
  %31 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3956
  %cmp18 = icmp ne %struct.parse_buffer* %31, null, !dbg !3956
  br i1 %cmp18, label %32, label %37, !dbg !3956

; <label>:32:                                     ; preds = %30
  %33 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3958
  %offset20 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %33, i32 0, i32 2, !dbg !3958
  %34 = load i64, i64* %offset20, align 8, !dbg !3958
  %add21 = add i64 %34, 0, !dbg !3958
  %35 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3958
  %length22 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %35, i32 0, i32 1, !dbg !3958
  %36 = load i64, i64* %length22, align 8, !dbg !3958
  %cmp23 = icmp ult i64 %add21, %36, !dbg !3958
  br i1 %cmp23, label %40, label %37, !dbg !3960

; <label>:37:                                     ; preds = %32, %30
  %38 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3962
  %offset25 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %38, i32 0, i32 2, !dbg !3964
  %39 = load i64, i64* %offset25, align 8, !dbg !3965
  %dec = add i64 %39, -1, !dbg !3965
  store i64 %dec, i64* %offset25, align 8, !dbg !3965
  br label %104, !dbg !3966

; <label>:40:                                     ; preds = %32
  %41 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3967
  %offset26 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %41, i32 0, i32 2, !dbg !3968
  %42 = load i64, i64* %offset26, align 8, !dbg !3969
  %dec27 = add i64 %42, -1, !dbg !3969
  store i64 %dec27, i64* %offset26, align 8, !dbg !3969
  br label %43, !dbg !3970, !llvm.loop !3971

; <label>:43:                                     ; preds = %79, %40
  call void @llvm.dbg.declare(metadata %struct.cJSON** %new_item, metadata !3973, metadata !92), !dbg !3975
  %44 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !3976
  %hooks = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %44, i32 0, i32 4, !dbg !3977
  %call28 = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* %hooks), !dbg !3978
  store %struct.cJSON* %call28, %struct.cJSON** %new_item, align 8, !dbg !3975
  %45 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !3979
  %cmp29 = icmp eq %struct.cJSON* %45, null, !dbg !3981
  br i1 %cmp29, label %46, label %47, !dbg !3982

; <label>:46:                                     ; preds = %43
  br label %104, !dbg !3983

; <label>:47:                                     ; preds = %43
  %48 = load %struct.cJSON*, %struct.cJSON** %head, align 8, !dbg !3985
  %cmp31 = icmp eq %struct.cJSON* %48, null, !dbg !3987
  br i1 %cmp31, label %49, label %51, !dbg !3988

; <label>:49:                                     ; preds = %47
  %50 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !3989
  store %struct.cJSON* %50, %struct.cJSON** %head, align 8, !dbg !3991
  store %struct.cJSON* %50, %struct.cJSON** %current_item, align 8, !dbg !3992
  br label %57, !dbg !3993

; <label>:51:                                     ; preds = %47
  %52 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !3994
  %53 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !3996
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %53, i32 0, i32 0, !dbg !3997
  store %struct.cJSON* %52, %struct.cJSON** %next, align 8, !dbg !3998
  %54 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !3999
  %55 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !4000
  %prev = getelementptr inbounds %struct.cJSON, %struct.cJSON* %55, i32 0, i32 1, !dbg !4001
  store %struct.cJSON* %54, %struct.cJSON** %prev, align 8, !dbg !4002
  %56 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !4003
  store %struct.cJSON* %56, %struct.cJSON** %current_item, align 8, !dbg !4004
  br label %57

; <label>:57:                                     ; preds = %51, %49
  %58 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4005
  %offset33 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %58, i32 0, i32 2, !dbg !4006
  %59 = load i64, i64* %offset33, align 8, !dbg !4007
  %inc34 = add i64 %59, 1, !dbg !4007
  store i64 %inc34, i64* %offset33, align 8, !dbg !4007
  %60 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4008
  %call35 = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %60), !dbg !4009
  %61 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !4010
  %62 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4012
  %call36 = call i32 @parse_value(%struct.cJSON* %61, %struct.parse_buffer* %62), !dbg !4013
  %tobool = icmp ne i32 %call36, 0, !dbg !4013
  br i1 %tobool, label %64, label %63, !dbg !4014

; <label>:63:                                     ; preds = %57
  br label %104, !dbg !4015

; <label>:64:                                     ; preds = %57
  %65 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4017
  %call37 = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %65), !dbg !4018
  br label %66, !dbg !4019

; <label>:66:                                     ; preds = %64
  %67 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4020
  %cmp38 = icmp ne %struct.parse_buffer* %67, null, !dbg !4020
  br i1 %cmp38, label %68, label %79, !dbg !4020

; <label>:68:                                     ; preds = %66
  %69 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4021
  %offset40 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %69, i32 0, i32 2, !dbg !4021
  %70 = load i64, i64* %offset40, align 8, !dbg !4021
  %add41 = add i64 %70, 0, !dbg !4021
  %71 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4021
  %length42 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %71, i32 0, i32 1, !dbg !4021
  %72 = load i64, i64* %length42, align 8, !dbg !4021
  %cmp43 = icmp ult i64 %add41, %72, !dbg !4021
  br i1 %cmp43, label %73, label %79, !dbg !4022

; <label>:73:                                     ; preds = %68
  %74 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4023
  %content45 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %74, i32 0, i32 0, !dbg !4023
  %75 = load i8*, i8** %content45, align 8, !dbg !4023
  %76 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4023
  %offset46 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %76, i32 0, i32 2, !dbg !4023
  %77 = load i64, i64* %offset46, align 8, !dbg !4023
  %add.ptr47 = getelementptr inbounds i8, i8* %75, i64 %77, !dbg !4023
  %arrayidx48 = getelementptr inbounds i8, i8* %add.ptr47, i64 0, !dbg !4023
  %78 = load i8, i8* %arrayidx48, align 1, !dbg !4023
  %conv49 = zext i8 %78 to i32, !dbg !4023
  %cmp50 = icmp eq i32 %conv49, 44, !dbg !4024
  br label %79

; <label>:79:                                     ; preds = %73, %68, %66
  %80 = phi i1 [ false, %68 ], [ false, %66 ], [ %cmp50, %73 ]
  br i1 %80, label %43, label %81, !dbg !4025, !llvm.loop !3971

; <label>:81:                                     ; preds = %79
  %82 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4027
  %cmp52 = icmp ne %struct.parse_buffer* %82, null, !dbg !4027
  br i1 %cmp52, label %83, label %94, !dbg !4027

; <label>:83:                                     ; preds = %81
  %84 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4029
  %offset54 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %84, i32 0, i32 2, !dbg !4029
  %85 = load i64, i64* %offset54, align 8, !dbg !4029
  %add55 = add i64 %85, 0, !dbg !4029
  %86 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4029
  %length56 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %86, i32 0, i32 1, !dbg !4029
  %87 = load i64, i64* %length56, align 8, !dbg !4029
  %cmp57 = icmp ult i64 %add55, %87, !dbg !4029
  br i1 %cmp57, label %88, label %94, !dbg !4031

; <label>:88:                                     ; preds = %83
  %89 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4032
  %content59 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %89, i32 0, i32 0, !dbg !4032
  %90 = load i8*, i8** %content59, align 8, !dbg !4032
  %91 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4032
  %offset60 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %91, i32 0, i32 2, !dbg !4032
  %92 = load i64, i64* %offset60, align 8, !dbg !4032
  %add.ptr61 = getelementptr inbounds i8, i8* %90, i64 %92, !dbg !4032
  %arrayidx62 = getelementptr inbounds i8, i8* %add.ptr61, i64 0, !dbg !4032
  %93 = load i8, i8* %arrayidx62, align 1, !dbg !4032
  %conv63 = zext i8 %93 to i32, !dbg !4032
  %cmp64 = icmp ne i32 %conv63, 93, !dbg !4034
  br i1 %cmp64, label %94, label %95, !dbg !4035

; <label>:94:                                     ; preds = %88, %83, %81
  br label %104, !dbg !4036

; <label>:95:                                     ; preds = %88
  br label %96, !dbg !4038

; <label>:96:                                     ; preds = %95, %29
  %97 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4040
  %depth66 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %97, i32 0, i32 3, !dbg !4041
  %98 = load i64, i64* %depth66, align 8, !dbg !4042
  %dec67 = add i64 %98, -1, !dbg !4042
  store i64 %dec67, i64* %depth66, align 8, !dbg !4042
  %99 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !4043
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %99, i32 0, i32 3, !dbg !4044
  store i32 32, i32* %type, align 8, !dbg !4045
  %100 = load %struct.cJSON*, %struct.cJSON** %head, align 8, !dbg !4046
  %101 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !4047
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %101, i32 0, i32 2, !dbg !4048
  store %struct.cJSON* %100, %struct.cJSON** %child, align 8, !dbg !4049
  %102 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4050
  %offset68 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %102, i32 0, i32 2, !dbg !4051
  %103 = load i64, i64* %offset68, align 8, !dbg !4052
  %inc69 = add i64 %103, 1, !dbg !4052
  store i64 %inc69, i64* %offset68, align 8, !dbg !4052
  store i32 1, i32* %retval, align 4, !dbg !4053
  br label %109, !dbg !4053

; <label>:104:                                    ; preds = %94, %63, %46, %37, %12
  %105 = load %struct.cJSON*, %struct.cJSON** %head, align 8, !dbg !4054
  %cmp70 = icmp ne %struct.cJSON* %105, null, !dbg !4056
  br i1 %cmp70, label %106, label %108, !dbg !4057

; <label>:106:                                    ; preds = %104
  %107 = load %struct.cJSON*, %struct.cJSON** %head, align 8, !dbg !4058
  call void @cJSON_Delete(%struct.cJSON* %107), !dbg !4060
  br label %108, !dbg !4061

; <label>:108:                                    ; preds = %106, %104
  store i32 0, i32* %retval, align 4, !dbg !4062
  br label %109, !dbg !4062

; <label>:109:                                    ; preds = %108, %96, %3
  %110 = load i32, i32* %retval, align 4, !dbg !4063
  ret i32 %110, !dbg !4063
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @parse_object(%struct.cJSON* %item, %struct.parse_buffer* %input_buffer) #0 !dbg !4064 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %input_buffer.addr = alloca %struct.parse_buffer*, align 8
  %head = alloca %struct.cJSON*, align 8
  %current_item = alloca %struct.cJSON*, align 8
  %new_item = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !4065, metadata !92), !dbg !4066
  store %struct.parse_buffer* %input_buffer, %struct.parse_buffer** %input_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.parse_buffer** %input_buffer.addr, metadata !4067, metadata !92), !dbg !4068
  call void @llvm.dbg.declare(metadata %struct.cJSON** %head, metadata !4069, metadata !92), !dbg !4070
  store %struct.cJSON* null, %struct.cJSON** %head, align 8, !dbg !4070
  call void @llvm.dbg.declare(metadata %struct.cJSON** %current_item, metadata !4071, metadata !92), !dbg !4072
  store %struct.cJSON* null, %struct.cJSON** %current_item, align 8, !dbg !4072
  %1 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4073
  %depth = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %1, i32 0, i32 3, !dbg !4075
  %2 = load i64, i64* %depth, align 8, !dbg !4075
  %cmp = icmp uge i64 %2, 1000, !dbg !4076
  br i1 %cmp, label %3, label %4, !dbg !4077

; <label>:3:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !4078
  br label %142, !dbg !4078

; <label>:4:                                      ; preds = %0
  %5 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4080
  %depth1 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %5, i32 0, i32 3, !dbg !4081
  %6 = load i64, i64* %depth1, align 8, !dbg !4082
  %inc = add i64 %6, 1, !dbg !4082
  store i64 %inc, i64* %depth1, align 8, !dbg !4082
  %7 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4083
  %cmp2 = icmp ne %struct.parse_buffer* %7, null, !dbg !4083
  br i1 %cmp2, label %8, label %19, !dbg !4083

; <label>:8:                                      ; preds = %4
  %9 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4085
  %offset = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %9, i32 0, i32 2, !dbg !4085
  %10 = load i64, i64* %offset, align 8, !dbg !4085
  %add = add i64 %10, 0, !dbg !4085
  %11 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4085
  %length = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %11, i32 0, i32 1, !dbg !4085
  %12 = load i64, i64* %length, align 8, !dbg !4085
  %cmp3 = icmp ult i64 %add, %12, !dbg !4085
  br i1 %cmp3, label %13, label %19, !dbg !4087

; <label>:13:                                     ; preds = %8
  %14 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4088
  %content = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %14, i32 0, i32 0, !dbg !4088
  %15 = load i8*, i8** %content, align 8, !dbg !4088
  %16 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4088
  %offset4 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %16, i32 0, i32 2, !dbg !4088
  %17 = load i64, i64* %offset4, align 8, !dbg !4088
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %17, !dbg !4088
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 0, !dbg !4088
  %18 = load i8, i8* %arrayidx, align 1, !dbg !4088
  %conv = zext i8 %18 to i32, !dbg !4088
  %cmp5 = icmp ne i32 %conv, 123, !dbg !4090
  br i1 %cmp5, label %19, label %20, !dbg !4091

; <label>:19:                                     ; preds = %13, %8, %4
  br label %137, !dbg !4093

; <label>:20:                                     ; preds = %13
  %21 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4095
  %offset7 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %21, i32 0, i32 2, !dbg !4096
  %22 = load i64, i64* %offset7, align 8, !dbg !4097
  %inc8 = add i64 %22, 1, !dbg !4097
  store i64 %inc8, i64* %offset7, align 8, !dbg !4097
  %23 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4098
  %call = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %23), !dbg !4099
  %24 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4100
  %cmp9 = icmp ne %struct.parse_buffer* %24, null, !dbg !4100
  br i1 %cmp9, label %25, label %37, !dbg !4100

; <label>:25:                                     ; preds = %20
  %26 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4102
  %offset11 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %26, i32 0, i32 2, !dbg !4102
  %27 = load i64, i64* %offset11, align 8, !dbg !4102
  %add12 = add i64 %27, 0, !dbg !4102
  %28 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4102
  %length13 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %28, i32 0, i32 1, !dbg !4102
  %29 = load i64, i64* %length13, align 8, !dbg !4102
  %cmp14 = icmp ult i64 %add12, %29, !dbg !4102
  br i1 %cmp14, label %30, label %37, !dbg !4104

; <label>:30:                                     ; preds = %25
  %31 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4105
  %content16 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %31, i32 0, i32 0, !dbg !4105
  %32 = load i8*, i8** %content16, align 8, !dbg !4105
  %33 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4105
  %offset17 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %33, i32 0, i32 2, !dbg !4105
  %34 = load i64, i64* %offset17, align 8, !dbg !4105
  %add.ptr18 = getelementptr inbounds i8, i8* %32, i64 %34, !dbg !4105
  %arrayidx19 = getelementptr inbounds i8, i8* %add.ptr18, i64 0, !dbg !4105
  %35 = load i8, i8* %arrayidx19, align 1, !dbg !4105
  %conv20 = zext i8 %35 to i32, !dbg !4105
  %cmp21 = icmp eq i32 %conv20, 125, !dbg !4107
  br i1 %cmp21, label %36, label %37, !dbg !4108

; <label>:36:                                     ; preds = %30
  br label %129, !dbg !4109

; <label>:37:                                     ; preds = %30, %25, %20
  %38 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4111
  %cmp23 = icmp ne %struct.parse_buffer* %38, null, !dbg !4111
  br i1 %cmp23, label %39, label %44, !dbg !4111

; <label>:39:                                     ; preds = %37
  %40 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4113
  %offset25 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %40, i32 0, i32 2, !dbg !4113
  %41 = load i64, i64* %offset25, align 8, !dbg !4113
  %add26 = add i64 %41, 0, !dbg !4113
  %42 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4113
  %length27 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %42, i32 0, i32 1, !dbg !4113
  %43 = load i64, i64* %length27, align 8, !dbg !4113
  %cmp28 = icmp ult i64 %add26, %43, !dbg !4113
  br i1 %cmp28, label %47, label %44, !dbg !4115

; <label>:44:                                     ; preds = %39, %37
  %45 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4117
  %offset30 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %45, i32 0, i32 2, !dbg !4119
  %46 = load i64, i64* %offset30, align 8, !dbg !4120
  %dec = add i64 %46, -1, !dbg !4120
  store i64 %dec, i64* %offset30, align 8, !dbg !4120
  br label %137, !dbg !4121

; <label>:47:                                     ; preds = %39
  %48 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4122
  %offset31 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %48, i32 0, i32 2, !dbg !4123
  %49 = load i64, i64* %offset31, align 8, !dbg !4124
  %dec32 = add i64 %49, -1, !dbg !4124
  store i64 %dec32, i64* %offset31, align 8, !dbg !4124
  br label %50, !dbg !4125, !llvm.loop !4126

; <label>:50:                                     ; preds = %112, %47
  call void @llvm.dbg.declare(metadata %struct.cJSON** %new_item, metadata !4128, metadata !92), !dbg !4130
  %51 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4131
  %hooks = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %51, i32 0, i32 4, !dbg !4132
  %call33 = call %struct.cJSON* @cJSON_New_Item(%struct.internal_hooks* %hooks), !dbg !4133
  store %struct.cJSON* %call33, %struct.cJSON** %new_item, align 8, !dbg !4130
  %52 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !4134
  %cmp34 = icmp eq %struct.cJSON* %52, null, !dbg !4136
  br i1 %cmp34, label %53, label %54, !dbg !4137

; <label>:53:                                     ; preds = %50
  br label %137, !dbg !4138

; <label>:54:                                     ; preds = %50
  %55 = load %struct.cJSON*, %struct.cJSON** %head, align 8, !dbg !4140
  %cmp36 = icmp eq %struct.cJSON* %55, null, !dbg !4142
  br i1 %cmp36, label %56, label %58, !dbg !4143

; <label>:56:                                     ; preds = %54
  %57 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !4144
  store %struct.cJSON* %57, %struct.cJSON** %head, align 8, !dbg !4146
  store %struct.cJSON* %57, %struct.cJSON** %current_item, align 8, !dbg !4147
  br label %64, !dbg !4148

; <label>:58:                                     ; preds = %54
  %59 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !4149
  %60 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !4151
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %60, i32 0, i32 0, !dbg !4152
  store %struct.cJSON* %59, %struct.cJSON** %next, align 8, !dbg !4153
  %61 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !4154
  %62 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !4155
  %prev = getelementptr inbounds %struct.cJSON, %struct.cJSON* %62, i32 0, i32 1, !dbg !4156
  store %struct.cJSON* %61, %struct.cJSON** %prev, align 8, !dbg !4157
  %63 = load %struct.cJSON*, %struct.cJSON** %new_item, align 8, !dbg !4158
  store %struct.cJSON* %63, %struct.cJSON** %current_item, align 8, !dbg !4159
  br label %64

; <label>:64:                                     ; preds = %58, %56
  %65 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4160
  %offset38 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %65, i32 0, i32 2, !dbg !4161
  %66 = load i64, i64* %offset38, align 8, !dbg !4162
  %inc39 = add i64 %66, 1, !dbg !4162
  store i64 %inc39, i64* %offset38, align 8, !dbg !4162
  %67 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4163
  %call40 = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %67), !dbg !4164
  %68 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !4165
  %69 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4167
  %call41 = call i32 @parse_string(%struct.cJSON* %68, %struct.parse_buffer* %69), !dbg !4168
  %tobool = icmp ne i32 %call41, 0, !dbg !4168
  br i1 %tobool, label %71, label %70, !dbg !4169

; <label>:70:                                     ; preds = %64
  br label %137, !dbg !4170

; <label>:71:                                     ; preds = %64
  %72 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4172
  %call42 = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %72), !dbg !4173
  %73 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !4174
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %73, i32 0, i32 4, !dbg !4175
  %74 = load i8*, i8** %valuestring, align 8, !dbg !4175
  %75 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !4176
  %string = getelementptr inbounds %struct.cJSON, %struct.cJSON* %75, i32 0, i32 7, !dbg !4177
  store i8* %74, i8** %string, align 8, !dbg !4178
  %76 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !4179
  %valuestring43 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %76, i32 0, i32 4, !dbg !4180
  store i8* null, i8** %valuestring43, align 8, !dbg !4181
  %77 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4182
  %cmp44 = icmp ne %struct.parse_buffer* %77, null, !dbg !4182
  br i1 %cmp44, label %78, label %89, !dbg !4182

; <label>:78:                                     ; preds = %71
  %79 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4184
  %offset46 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %79, i32 0, i32 2, !dbg !4184
  %80 = load i64, i64* %offset46, align 8, !dbg !4184
  %add47 = add i64 %80, 0, !dbg !4184
  %81 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4184
  %length48 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %81, i32 0, i32 1, !dbg !4184
  %82 = load i64, i64* %length48, align 8, !dbg !4184
  %cmp49 = icmp ult i64 %add47, %82, !dbg !4184
  br i1 %cmp49, label %83, label %89, !dbg !4186

; <label>:83:                                     ; preds = %78
  %84 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4187
  %content51 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %84, i32 0, i32 0, !dbg !4187
  %85 = load i8*, i8** %content51, align 8, !dbg !4187
  %86 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4187
  %offset52 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %86, i32 0, i32 2, !dbg !4187
  %87 = load i64, i64* %offset52, align 8, !dbg !4187
  %add.ptr53 = getelementptr inbounds i8, i8* %85, i64 %87, !dbg !4187
  %arrayidx54 = getelementptr inbounds i8, i8* %add.ptr53, i64 0, !dbg !4187
  %88 = load i8, i8* %arrayidx54, align 1, !dbg !4187
  %conv55 = zext i8 %88 to i32, !dbg !4187
  %cmp56 = icmp ne i32 %conv55, 58, !dbg !4189
  br i1 %cmp56, label %89, label %90, !dbg !4190

; <label>:89:                                     ; preds = %83, %78, %71
  br label %137, !dbg !4192

; <label>:90:                                     ; preds = %83
  %91 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4194
  %offset58 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %91, i32 0, i32 2, !dbg !4195
  %92 = load i64, i64* %offset58, align 8, !dbg !4196
  %inc59 = add i64 %92, 1, !dbg !4196
  store i64 %inc59, i64* %offset58, align 8, !dbg !4196
  %93 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4197
  %call60 = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %93), !dbg !4198
  %94 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !4199
  %95 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4201
  %call61 = call i32 @parse_value(%struct.cJSON* %94, %struct.parse_buffer* %95), !dbg !4202
  %tobool62 = icmp ne i32 %call61, 0, !dbg !4202
  br i1 %tobool62, label %97, label %96, !dbg !4203

; <label>:96:                                     ; preds = %90
  br label %137, !dbg !4204

; <label>:97:                                     ; preds = %90
  %98 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4206
  %call63 = call %struct.parse_buffer* @buffer_skip_whitespace(%struct.parse_buffer* %98), !dbg !4207
  br label %99, !dbg !4208

; <label>:99:                                     ; preds = %97
  %100 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4209
  %cmp64 = icmp ne %struct.parse_buffer* %100, null, !dbg !4209
  br i1 %cmp64, label %101, label %112, !dbg !4209

; <label>:101:                                    ; preds = %99
  %102 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4210
  %offset66 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %102, i32 0, i32 2, !dbg !4210
  %103 = load i64, i64* %offset66, align 8, !dbg !4210
  %add67 = add i64 %103, 0, !dbg !4210
  %104 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4210
  %length68 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %104, i32 0, i32 1, !dbg !4210
  %105 = load i64, i64* %length68, align 8, !dbg !4210
  %cmp69 = icmp ult i64 %add67, %105, !dbg !4210
  br i1 %cmp69, label %106, label %112, !dbg !4211

; <label>:106:                                    ; preds = %101
  %107 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4212
  %content71 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %107, i32 0, i32 0, !dbg !4212
  %108 = load i8*, i8** %content71, align 8, !dbg !4212
  %109 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4212
  %offset72 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %109, i32 0, i32 2, !dbg !4212
  %110 = load i64, i64* %offset72, align 8, !dbg !4212
  %add.ptr73 = getelementptr inbounds i8, i8* %108, i64 %110, !dbg !4212
  %arrayidx74 = getelementptr inbounds i8, i8* %add.ptr73, i64 0, !dbg !4212
  %111 = load i8, i8* %arrayidx74, align 1, !dbg !4212
  %conv75 = zext i8 %111 to i32, !dbg !4212
  %cmp76 = icmp eq i32 %conv75, 44, !dbg !4213
  br label %112

; <label>:112:                                    ; preds = %106, %101, %99
  %113 = phi i1 [ false, %101 ], [ false, %99 ], [ %cmp76, %106 ]
  br i1 %113, label %50, label %114, !dbg !4214, !llvm.loop !4126

; <label>:114:                                    ; preds = %112
  %115 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4216
  %cmp78 = icmp ne %struct.parse_buffer* %115, null, !dbg !4216
  br i1 %cmp78, label %116, label %127, !dbg !4216

; <label>:116:                                    ; preds = %114
  %117 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4218
  %offset80 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %117, i32 0, i32 2, !dbg !4218
  %118 = load i64, i64* %offset80, align 8, !dbg !4218
  %add81 = add i64 %118, 0, !dbg !4218
  %119 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4218
  %length82 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %119, i32 0, i32 1, !dbg !4218
  %120 = load i64, i64* %length82, align 8, !dbg !4218
  %cmp83 = icmp ult i64 %add81, %120, !dbg !4218
  br i1 %cmp83, label %121, label %127, !dbg !4220

; <label>:121:                                    ; preds = %116
  %122 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4221
  %content85 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %122, i32 0, i32 0, !dbg !4221
  %123 = load i8*, i8** %content85, align 8, !dbg !4221
  %124 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4221
  %offset86 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %124, i32 0, i32 2, !dbg !4221
  %125 = load i64, i64* %offset86, align 8, !dbg !4221
  %add.ptr87 = getelementptr inbounds i8, i8* %123, i64 %125, !dbg !4221
  %arrayidx88 = getelementptr inbounds i8, i8* %add.ptr87, i64 0, !dbg !4221
  %126 = load i8, i8* %arrayidx88, align 1, !dbg !4221
  %conv89 = zext i8 %126 to i32, !dbg !4221
  %cmp90 = icmp ne i32 %conv89, 125, !dbg !4223
  br i1 %cmp90, label %127, label %128, !dbg !4224

; <label>:127:                                    ; preds = %121, %116, %114
  br label %137, !dbg !4225

; <label>:128:                                    ; preds = %121
  br label %129, !dbg !4227

; <label>:129:                                    ; preds = %128, %36
  %130 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4229
  %depth92 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %130, i32 0, i32 3, !dbg !4230
  %131 = load i64, i64* %depth92, align 8, !dbg !4231
  %dec93 = add i64 %131, -1, !dbg !4231
  store i64 %dec93, i64* %depth92, align 8, !dbg !4231
  %132 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !4232
  %type = getelementptr inbounds %struct.cJSON, %struct.cJSON* %132, i32 0, i32 3, !dbg !4233
  store i32 64, i32* %type, align 8, !dbg !4234
  %133 = load %struct.cJSON*, %struct.cJSON** %head, align 8, !dbg !4235
  %134 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !4236
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %134, i32 0, i32 2, !dbg !4237
  store %struct.cJSON* %133, %struct.cJSON** %child, align 8, !dbg !4238
  %135 = load %struct.parse_buffer*, %struct.parse_buffer** %input_buffer.addr, align 8, !dbg !4239
  %offset94 = getelementptr inbounds %struct.parse_buffer, %struct.parse_buffer* %135, i32 0, i32 2, !dbg !4240
  %136 = load i64, i64* %offset94, align 8, !dbg !4241
  %inc95 = add i64 %136, 1, !dbg !4241
  store i64 %inc95, i64* %offset94, align 8, !dbg !4241
  store i32 1, i32* %retval, align 4, !dbg !4242
  br label %142, !dbg !4242

; <label>:137:                                    ; preds = %127, %96, %89, %70, %53, %44, %19
  %138 = load %struct.cJSON*, %struct.cJSON** %head, align 8, !dbg !4243
  %cmp96 = icmp ne %struct.cJSON* %138, null, !dbg !4245
  br i1 %cmp96, label %139, label %141, !dbg !4246

; <label>:139:                                    ; preds = %137
  %140 = load %struct.cJSON*, %struct.cJSON** %head, align 8, !dbg !4247
  call void @cJSON_Delete(%struct.cJSON* %140), !dbg !4249
  br label %141, !dbg !4250

; <label>:141:                                    ; preds = %139, %137
  store i32 0, i32* %retval, align 4, !dbg !4251
  br label %142, !dbg !4251

; <label>:142:                                    ; preds = %141, %129, %3
  %143 = load i32, i32* %retval, align 4, !dbg !4252
  ret i32 %143, !dbg !4252
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @utf16_literal_to_utf8(i8* %input_pointer, i8* %input_end, i8** %output_pointer) #0 !dbg !4253 {
  %retval = alloca i8, align 1
  %input_pointer.addr = alloca i8*, align 8
  %input_end.addr = alloca i8*, align 8
  %output_pointer.addr = alloca i8**, align 8
  %codepoint = alloca i64, align 8
  %first_code = alloca i32, align 4
  %first_sequence = alloca i8*, align 8
  %utf8_length = alloca i8, align 1
  %utf8_position = alloca i8, align 1
  %sequence_length = alloca i8, align 1
  %first_byte_mark = alloca i8, align 1
  %second_sequence = alloca i8*, align 8
  %second_code = alloca i32, align 4
  store i8* %input_pointer, i8** %input_pointer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input_pointer.addr, metadata !4258, metadata !92), !dbg !4259
  store i8* %input_end, i8** %input_end.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input_end.addr, metadata !4260, metadata !92), !dbg !4261
  store i8** %output_pointer, i8*** %output_pointer.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %output_pointer.addr, metadata !4262, metadata !92), !dbg !4263
  call void @llvm.dbg.declare(metadata i64* %codepoint, metadata !4264, metadata !92), !dbg !4265
  store i64 0, i64* %codepoint, align 8, !dbg !4265
  call void @llvm.dbg.declare(metadata i32* %first_code, metadata !4266, metadata !92), !dbg !4267
  store i32 0, i32* %first_code, align 4, !dbg !4267
  call void @llvm.dbg.declare(metadata i8** %first_sequence, metadata !4268, metadata !92), !dbg !4269
  %1 = load i8*, i8** %input_pointer.addr, align 8, !dbg !4270
  store i8* %1, i8** %first_sequence, align 8, !dbg !4269
  call void @llvm.dbg.declare(metadata i8* %utf8_length, metadata !4271, metadata !92), !dbg !4272
  store i8 0, i8* %utf8_length, align 1, !dbg !4272
  call void @llvm.dbg.declare(metadata i8* %utf8_position, metadata !4273, metadata !92), !dbg !4274
  store i8 0, i8* %utf8_position, align 1, !dbg !4274
  call void @llvm.dbg.declare(metadata i8* %sequence_length, metadata !4275, metadata !92), !dbg !4276
  store i8 0, i8* %sequence_length, align 1, !dbg !4276
  call void @llvm.dbg.declare(metadata i8* %first_byte_mark, metadata !4277, metadata !92), !dbg !4278
  store i8 0, i8* %first_byte_mark, align 1, !dbg !4278
  %2 = load i8*, i8** %input_end.addr, align 8, !dbg !4279
  %3 = load i8*, i8** %first_sequence, align 8, !dbg !4281
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !4282
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64, !dbg !4282
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4282
  %cmp = icmp slt i64 %sub.ptr.sub, 6, !dbg !4283
  br i1 %cmp, label %4, label %5, !dbg !4284

; <label>:4:                                      ; preds = %0
  br label %82, !dbg !4285

; <label>:5:                                      ; preds = %0
  %6 = load i8*, i8** %first_sequence, align 8, !dbg !4287
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 2, !dbg !4288
  %call = call i32 @parse_hex4(i8* %add.ptr), !dbg !4289
  store i32 %call, i32* %first_code, align 4, !dbg !4290
  %7 = load i32, i32* %first_code, align 4, !dbg !4291
  %cmp1 = icmp uge i32 %7, 56320, !dbg !4293
  br i1 %cmp1, label %8, label %11, !dbg !4294

; <label>:8:                                      ; preds = %5
  %9 = load i32, i32* %first_code, align 4, !dbg !4295
  %cmp2 = icmp ule i32 %9, 57343, !dbg !4297
  br i1 %cmp2, label %10, label %11, !dbg !4298

; <label>:10:                                     ; preds = %8
  br label %82, !dbg !4300

; <label>:11:                                     ; preds = %8, %5
  %12 = load i32, i32* %first_code, align 4, !dbg !4302
  %cmp3 = icmp uge i32 %12, 55296, !dbg !4304
  br i1 %cmp3, label %13, label %36, !dbg !4305

; <label>:13:                                     ; preds = %11
  %14 = load i32, i32* %first_code, align 4, !dbg !4306
  %cmp4 = icmp ule i32 %14, 56319, !dbg !4308
  br i1 %cmp4, label %15, label %36, !dbg !4309

; <label>:15:                                     ; preds = %13
  call void @llvm.dbg.declare(metadata i8** %second_sequence, metadata !4310, metadata !92), !dbg !4312
  %16 = load i8*, i8** %first_sequence, align 8, !dbg !4313
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 6, !dbg !4314
  store i8* %add.ptr5, i8** %second_sequence, align 8, !dbg !4312
  call void @llvm.dbg.declare(metadata i32* %second_code, metadata !4315, metadata !92), !dbg !4316
  store i32 0, i32* %second_code, align 4, !dbg !4316
  store i8 12, i8* %sequence_length, align 1, !dbg !4317
  %17 = load i8*, i8** %input_end.addr, align 8, !dbg !4318
  %18 = load i8*, i8** %second_sequence, align 8, !dbg !4320
  %sub.ptr.lhs.cast6 = ptrtoint i8* %17 to i64, !dbg !4321
  %sub.ptr.rhs.cast7 = ptrtoint i8* %18 to i64, !dbg !4321
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast6, %sub.ptr.rhs.cast7, !dbg !4321
  %cmp9 = icmp slt i64 %sub.ptr.sub8, 6, !dbg !4322
  br i1 %cmp9, label %19, label %20, !dbg !4323

; <label>:19:                                     ; preds = %15
  br label %82, !dbg !4324

; <label>:20:                                     ; preds = %15
  %21 = load i8*, i8** %second_sequence, align 8, !dbg !4326
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 0, !dbg !4326
  %22 = load i8, i8* %arrayidx, align 1, !dbg !4326
  %conv = zext i8 %22 to i32, !dbg !4326
  %cmp10 = icmp ne i32 %conv, 92, !dbg !4328
  br i1 %cmp10, label %26, label %23, !dbg !4329

; <label>:23:                                     ; preds = %20
  %24 = load i8*, i8** %second_sequence, align 8, !dbg !4330
  %arrayidx12 = getelementptr inbounds i8, i8* %24, i64 1, !dbg !4330
  %25 = load i8, i8* %arrayidx12, align 1, !dbg !4330
  %conv13 = zext i8 %25 to i32, !dbg !4330
  %cmp14 = icmp ne i32 %conv13, 117, !dbg !4332
  br i1 %cmp14, label %26, label %27, !dbg !4333

; <label>:26:                                     ; preds = %23, %20
  br label %82, !dbg !4335

; <label>:27:                                     ; preds = %23
  %28 = load i8*, i8** %second_sequence, align 8, !dbg !4337
  %add.ptr16 = getelementptr inbounds i8, i8* %28, i64 2, !dbg !4338
  %call17 = call i32 @parse_hex4(i8* %add.ptr16), !dbg !4339
  store i32 %call17, i32* %second_code, align 4, !dbg !4340
  %29 = load i32, i32* %second_code, align 4, !dbg !4341
  %cmp18 = icmp ult i32 %29, 56320, !dbg !4343
  br i1 %cmp18, label %32, label %30, !dbg !4344

; <label>:30:                                     ; preds = %27
  %31 = load i32, i32* %second_code, align 4, !dbg !4345
  %cmp20 = icmp ugt i32 %31, 57343, !dbg !4347
  br i1 %cmp20, label %32, label %33, !dbg !4348

; <label>:32:                                     ; preds = %30, %27
  br label %82, !dbg !4349

; <label>:33:                                     ; preds = %30
  %34 = load i32, i32* %first_code, align 4, !dbg !4351
  %and = and i32 %34, 1023, !dbg !4352
  %shl = shl i32 %and, 10, !dbg !4353
  %35 = load i32, i32* %second_code, align 4, !dbg !4354
  %and22 = and i32 %35, 1023, !dbg !4355
  %or = or i32 %shl, %and22, !dbg !4356
  %add = add i32 65536, %or, !dbg !4357
  %conv23 = zext i32 %add to i64, !dbg !4358
  store i64 %conv23, i64* %codepoint, align 8, !dbg !4359
  br label %38, !dbg !4360

; <label>:36:                                     ; preds = %13, %11
  store i8 6, i8* %sequence_length, align 1, !dbg !4361
  %37 = load i32, i32* %first_code, align 4, !dbg !4363
  %conv24 = zext i32 %37 to i64, !dbg !4363
  store i64 %conv24, i64* %codepoint, align 8, !dbg !4364
  br label %38

; <label>:38:                                     ; preds = %36, %33
  %39 = load i64, i64* %codepoint, align 8, !dbg !4365
  %cmp25 = icmp ult i64 %39, 128, !dbg !4367
  br i1 %cmp25, label %40, label %41, !dbg !4368

; <label>:40:                                     ; preds = %38
  store i8 1, i8* %utf8_length, align 1, !dbg !4369
  br label %54, !dbg !4371

; <label>:41:                                     ; preds = %38
  %42 = load i64, i64* %codepoint, align 8, !dbg !4372
  %cmp27 = icmp ult i64 %42, 2048, !dbg !4374
  br i1 %cmp27, label %43, label %44, !dbg !4375

; <label>:43:                                     ; preds = %41
  store i8 2, i8* %utf8_length, align 1, !dbg !4376
  store i8 -64, i8* %first_byte_mark, align 1, !dbg !4378
  br label %53, !dbg !4379

; <label>:44:                                     ; preds = %41
  %45 = load i64, i64* %codepoint, align 8, !dbg !4380
  %cmp29 = icmp ult i64 %45, 65536, !dbg !4382
  br i1 %cmp29, label %46, label %47, !dbg !4383

; <label>:46:                                     ; preds = %44
  store i8 3, i8* %utf8_length, align 1, !dbg !4384
  store i8 -32, i8* %first_byte_mark, align 1, !dbg !4386
  br label %52, !dbg !4387

; <label>:47:                                     ; preds = %44
  %48 = load i64, i64* %codepoint, align 8, !dbg !4388
  %cmp31 = icmp ule i64 %48, 1114111, !dbg !4390
  br i1 %cmp31, label %49, label %50, !dbg !4391

; <label>:49:                                     ; preds = %47
  store i8 4, i8* %utf8_length, align 1, !dbg !4392
  store i8 -16, i8* %first_byte_mark, align 1, !dbg !4394
  br label %51, !dbg !4395

; <label>:50:                                     ; preds = %47
  br label %82, !dbg !4396

; <label>:51:                                     ; preds = %49
  br label %52

; <label>:52:                                     ; preds = %51, %46
  br label %53

; <label>:53:                                     ; preds = %52, %43
  br label %54

; <label>:54:                                     ; preds = %53, %40
  %55 = load i8, i8* %utf8_length, align 1, !dbg !4398
  %conv33 = zext i8 %55 to i32, !dbg !4398
  %sub = sub nsw i32 %conv33, 1, !dbg !4400
  %conv34 = trunc i32 %sub to i8, !dbg !4401
  store i8 %conv34, i8* %utf8_position, align 1, !dbg !4402
  br label %56, !dbg !4403

; <label>:56:                                     ; preds = %64, %54
  %57 = load i8, i8* %utf8_position, align 1, !dbg !4404
  %conv35 = zext i8 %57 to i32, !dbg !4404
  %cmp36 = icmp sgt i32 %conv35, 0, !dbg !4407
  br i1 %cmp36, label %58, label %66, !dbg !4408

; <label>:58:                                     ; preds = %56
  %59 = load i64, i64* %codepoint, align 8, !dbg !4410
  %or38 = or i64 %59, 128, !dbg !4412
  %and39 = and i64 %or38, 191, !dbg !4413
  %conv40 = trunc i64 %and39 to i8, !dbg !4414
  %60 = load i8**, i8*** %output_pointer.addr, align 8, !dbg !4415
  %61 = load i8*, i8** %60, align 8, !dbg !4416
  %62 = load i8, i8* %utf8_position, align 1, !dbg !4417
  %idxprom = zext i8 %62 to i64, !dbg !4418
  %arrayidx41 = getelementptr inbounds i8, i8* %61, i64 %idxprom, !dbg !4418
  store i8 %conv40, i8* %arrayidx41, align 1, !dbg !4419
  %63 = load i64, i64* %codepoint, align 8, !dbg !4420
  %shr = lshr i64 %63, 6, !dbg !4420
  store i64 %shr, i64* %codepoint, align 8, !dbg !4420
  br label %64, !dbg !4421

; <label>:64:                                     ; preds = %58
  %65 = load i8, i8* %utf8_position, align 1, !dbg !4422
  %dec = add i8 %65, -1, !dbg !4422
  store i8 %dec, i8* %utf8_position, align 1, !dbg !4422
  br label %56, !dbg !4424, !llvm.loop !4425

; <label>:66:                                     ; preds = %56
  %67 = load i8, i8* %utf8_length, align 1, !dbg !4428
  %conv42 = zext i8 %67 to i32, !dbg !4428
  %cmp43 = icmp sgt i32 %conv42, 1, !dbg !4430
  br i1 %cmp43, label %68, label %73, !dbg !4431

; <label>:68:                                     ; preds = %66
  %69 = load i64, i64* %codepoint, align 8, !dbg !4432
  %70 = load i8, i8* %first_byte_mark, align 1, !dbg !4434
  %conv45 = zext i8 %70 to i64, !dbg !4434
  %or46 = or i64 %69, %conv45, !dbg !4435
  %and47 = and i64 %or46, 255, !dbg !4436
  %conv48 = trunc i64 %and47 to i8, !dbg !4437
  %71 = load i8**, i8*** %output_pointer.addr, align 8, !dbg !4438
  %72 = load i8*, i8** %71, align 8, !dbg !4439
  %arrayidx49 = getelementptr inbounds i8, i8* %72, i64 0, !dbg !4440
  store i8 %conv48, i8* %arrayidx49, align 1, !dbg !4441
  br label %77, !dbg !4442

; <label>:73:                                     ; preds = %66
  %74 = load i64, i64* %codepoint, align 8, !dbg !4443
  %and50 = and i64 %74, 127, !dbg !4445
  %conv51 = trunc i64 %and50 to i8, !dbg !4446
  %75 = load i8**, i8*** %output_pointer.addr, align 8, !dbg !4447
  %76 = load i8*, i8** %75, align 8, !dbg !4448
  %arrayidx52 = getelementptr inbounds i8, i8* %76, i64 0, !dbg !4449
  store i8 %conv51, i8* %arrayidx52, align 1, !dbg !4450
  br label %77

; <label>:77:                                     ; preds = %73, %68
  %78 = load i8, i8* %utf8_length, align 1, !dbg !4451
  %conv53 = zext i8 %78 to i32, !dbg !4451
  %79 = load i8**, i8*** %output_pointer.addr, align 8, !dbg !4452
  %80 = load i8*, i8** %79, align 8, !dbg !4453
  %idx.ext = sext i32 %conv53 to i64, !dbg !4453
  %add.ptr54 = getelementptr inbounds i8, i8* %80, i64 %idx.ext, !dbg !4453
  store i8* %add.ptr54, i8** %79, align 8, !dbg !4453
  %81 = load i8, i8* %sequence_length, align 1, !dbg !4454
  store i8 %81, i8* %retval, align 1, !dbg !4455
  br label %83, !dbg !4455

; <label>:82:                                     ; preds = %50, %32, %26, %19, %10, %4
  store i8 0, i8* %retval, align 1, !dbg !4456
  br label %83, !dbg !4456

; <label>:83:                                     ; preds = %82, %77
  %84 = load i8, i8* %retval, align 1, !dbg !4457
  ret i8 %84, !dbg !4457
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @parse_hex4(i8* %input) #0 !dbg !4458 {
  %retval = alloca i32, align 4
  %input.addr = alloca i8*, align 8
  %h = alloca i32, align 4
  %i = alloca i64, align 8
  store i8* %input, i8** %input.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input.addr, metadata !4461, metadata !92), !dbg !4462
  call void @llvm.dbg.declare(metadata i32* %h, metadata !4463, metadata !92), !dbg !4464
  store i32 0, i32* %h, align 4, !dbg !4464
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4465, metadata !92), !dbg !4466
  store i64 0, i64* %i, align 8, !dbg !4466
  store i64 0, i64* %i, align 8, !dbg !4467
  br label %1, !dbg !4469

; <label>:1:                                      ; preds = %50, %0
  %2 = load i64, i64* %i, align 8, !dbg !4470
  %cmp = icmp ult i64 %2, 4, !dbg !4473
  br i1 %cmp, label %3, label %52, !dbg !4474

; <label>:3:                                      ; preds = %1
  %4 = load i8*, i8** %input.addr, align 8, !dbg !4476
  %5 = load i64, i64* %i, align 8, !dbg !4479
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !4476
  %6 = load i8, i8* %arrayidx, align 1, !dbg !4476
  %conv = zext i8 %6 to i32, !dbg !4476
  %cmp1 = icmp sge i32 %conv, 48, !dbg !4480
  br i1 %cmp1, label %7, label %16, !dbg !4481

; <label>:7:                                      ; preds = %3
  %8 = load i8*, i8** %input.addr, align 8, !dbg !4482
  %9 = load i64, i64* %i, align 8, !dbg !4484
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !4482
  %10 = load i8, i8* %arrayidx3, align 1, !dbg !4482
  %conv4 = zext i8 %10 to i32, !dbg !4482
  %cmp5 = icmp sle i32 %conv4, 57, !dbg !4485
  br i1 %cmp5, label %11, label %16, !dbg !4486

; <label>:11:                                     ; preds = %7
  %12 = load i8*, i8** %input.addr, align 8, !dbg !4488
  %13 = load i64, i64* %i, align 8, !dbg !4490
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 %13, !dbg !4488
  %14 = load i8, i8* %arrayidx7, align 1, !dbg !4488
  %conv8 = zext i8 %14 to i32, !dbg !4491
  %sub = sub i32 %conv8, 48, !dbg !4492
  %15 = load i32, i32* %h, align 4, !dbg !4493
  %add = add i32 %15, %sub, !dbg !4493
  store i32 %add, i32* %h, align 4, !dbg !4493
  br label %45, !dbg !4494

; <label>:16:                                     ; preds = %7, %3
  %17 = load i8*, i8** %input.addr, align 8, !dbg !4495
  %18 = load i64, i64* %i, align 8, !dbg !4497
  %arrayidx9 = getelementptr inbounds i8, i8* %17, i64 %18, !dbg !4495
  %19 = load i8, i8* %arrayidx9, align 1, !dbg !4495
  %conv10 = zext i8 %19 to i32, !dbg !4495
  %cmp11 = icmp sge i32 %conv10, 65, !dbg !4498
  br i1 %cmp11, label %20, label %29, !dbg !4499

; <label>:20:                                     ; preds = %16
  %21 = load i8*, i8** %input.addr, align 8, !dbg !4500
  %22 = load i64, i64* %i, align 8, !dbg !4502
  %arrayidx13 = getelementptr inbounds i8, i8* %21, i64 %22, !dbg !4500
  %23 = load i8, i8* %arrayidx13, align 1, !dbg !4500
  %conv14 = zext i8 %23 to i32, !dbg !4500
  %cmp15 = icmp sle i32 %conv14, 70, !dbg !4503
  br i1 %cmp15, label %24, label %29, !dbg !4504

; <label>:24:                                     ; preds = %20
  %25 = load i8*, i8** %input.addr, align 8, !dbg !4505
  %26 = load i64, i64* %i, align 8, !dbg !4507
  %arrayidx17 = getelementptr inbounds i8, i8* %25, i64 %26, !dbg !4505
  %27 = load i8, i8* %arrayidx17, align 1, !dbg !4505
  %conv18 = zext i8 %27 to i32, !dbg !4505
  %add19 = add i32 10, %conv18, !dbg !4508
  %sub20 = sub i32 %add19, 65, !dbg !4509
  %28 = load i32, i32* %h, align 4, !dbg !4510
  %add21 = add i32 %28, %sub20, !dbg !4510
  store i32 %add21, i32* %h, align 4, !dbg !4510
  br label %44, !dbg !4511

; <label>:29:                                     ; preds = %20, %16
  %30 = load i8*, i8** %input.addr, align 8, !dbg !4512
  %31 = load i64, i64* %i, align 8, !dbg !4514
  %arrayidx22 = getelementptr inbounds i8, i8* %30, i64 %31, !dbg !4512
  %32 = load i8, i8* %arrayidx22, align 1, !dbg !4512
  %conv23 = zext i8 %32 to i32, !dbg !4512
  %cmp24 = icmp sge i32 %conv23, 97, !dbg !4515
  br i1 %cmp24, label %33, label %42, !dbg !4516

; <label>:33:                                     ; preds = %29
  %34 = load i8*, i8** %input.addr, align 8, !dbg !4517
  %35 = load i64, i64* %i, align 8, !dbg !4519
  %arrayidx26 = getelementptr inbounds i8, i8* %34, i64 %35, !dbg !4517
  %36 = load i8, i8* %arrayidx26, align 1, !dbg !4517
  %conv27 = zext i8 %36 to i32, !dbg !4517
  %cmp28 = icmp sle i32 %conv27, 102, !dbg !4520
  br i1 %cmp28, label %37, label %42, !dbg !4521

; <label>:37:                                     ; preds = %33
  %38 = load i8*, i8** %input.addr, align 8, !dbg !4522
  %39 = load i64, i64* %i, align 8, !dbg !4524
  %arrayidx30 = getelementptr inbounds i8, i8* %38, i64 %39, !dbg !4522
  %40 = load i8, i8* %arrayidx30, align 1, !dbg !4522
  %conv31 = zext i8 %40 to i32, !dbg !4522
  %add32 = add i32 10, %conv31, !dbg !4525
  %sub33 = sub i32 %add32, 97, !dbg !4526
  %41 = load i32, i32* %h, align 4, !dbg !4527
  %add34 = add i32 %41, %sub33, !dbg !4527
  store i32 %add34, i32* %h, align 4, !dbg !4527
  br label %43, !dbg !4528

; <label>:42:                                     ; preds = %33, %29
  store i32 0, i32* %retval, align 4, !dbg !4529
  br label %54, !dbg !4529

; <label>:43:                                     ; preds = %37
  br label %44

; <label>:44:                                     ; preds = %43, %24
  br label %45

; <label>:45:                                     ; preds = %44, %11
  %46 = load i64, i64* %i, align 8, !dbg !4531
  %cmp35 = icmp ult i64 %46, 3, !dbg !4533
  br i1 %cmp35, label %47, label %49, !dbg !4534

; <label>:47:                                     ; preds = %45
  %48 = load i32, i32* %h, align 4, !dbg !4535
  %shl = shl i32 %48, 4, !dbg !4537
  store i32 %shl, i32* %h, align 4, !dbg !4538
  br label %49, !dbg !4539

; <label>:49:                                     ; preds = %47, %45
  br label %50, !dbg !4540

; <label>:50:                                     ; preds = %49
  %51 = load i64, i64* %i, align 8, !dbg !4541
  %inc = add i64 %51, 1, !dbg !4541
  store i64 %inc, i64* %i, align 8, !dbg !4541
  br label %1, !dbg !4543, !llvm.loop !4544

; <label>:52:                                     ; preds = %1
  %53 = load i32, i32* %h, align 4, !dbg !4547
  store i32 %53, i32* %retval, align 4, !dbg !4548
  br label %54, !dbg !4548

; <label>:54:                                     ; preds = %52, %42
  %55 = load i32, i32* %retval, align 4, !dbg !4549
  ret i32 %55, !dbg !4549
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @get_decimal_point() #0 !dbg !4550 {
  ret i8 46, !dbg !4553
}

; Function Attrs: nounwind
declare double @strtod(i8*, i8**) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @ensure(%struct.printbuffer* %p, i64 %needed) #0 !dbg !4554 {
  %retval = alloca i8*, align 8
  %p.addr = alloca %struct.printbuffer*, align 8
  %needed.addr = alloca i64, align 8
  %newbuffer = alloca i8*, align 8
  %newsize = alloca i64, align 8
  store %struct.printbuffer* %p, %struct.printbuffer** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.printbuffer** %p.addr, metadata !4557, metadata !92), !dbg !4558
  store i64 %needed, i64* %needed.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %needed.addr, metadata !4559, metadata !92), !dbg !4560
  call void @llvm.dbg.declare(metadata i8** %newbuffer, metadata !4561, metadata !92), !dbg !4562
  store i8* null, i8** %newbuffer, align 8, !dbg !4562
  call void @llvm.dbg.declare(metadata i64* %newsize, metadata !4563, metadata !92), !dbg !4564
  store i64 0, i64* %newsize, align 8, !dbg !4564
  %1 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4565
  %cmp = icmp eq %struct.printbuffer* %1, null, !dbg !4567
  br i1 %cmp, label %5, label %2, !dbg !4568

; <label>:2:                                      ; preds = %0
  %3 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4569
  %buffer = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i32 0, i32 0, !dbg !4571
  %4 = load i8*, i8** %buffer, align 8, !dbg !4571
  %cmp1 = icmp eq i8* %4, null, !dbg !4572
  br i1 %cmp1, label %5, label %6, !dbg !4573

; <label>:5:                                      ; preds = %2, %0
  store i8* null, i8** %retval, align 8, !dbg !4575
  br label %94, !dbg !4575

; <label>:6:                                      ; preds = %2
  %7 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4577
  %length = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %7, i32 0, i32 1, !dbg !4579
  %8 = load i64, i64* %length, align 8, !dbg !4579
  %cmp2 = icmp ugt i64 %8, 0, !dbg !4580
  br i1 %cmp2, label %9, label %15, !dbg !4581

; <label>:9:                                      ; preds = %6
  %10 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4582
  %offset = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %10, i32 0, i32 2, !dbg !4584
  %11 = load i64, i64* %offset, align 8, !dbg !4584
  %12 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4585
  %length3 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %12, i32 0, i32 1, !dbg !4586
  %13 = load i64, i64* %length3, align 8, !dbg !4586
  %cmp4 = icmp uge i64 %11, %13, !dbg !4587
  br i1 %cmp4, label %14, label %15, !dbg !4588

; <label>:14:                                     ; preds = %9
  store i8* null, i8** %retval, align 8, !dbg !4589
  br label %94, !dbg !4589

; <label>:15:                                     ; preds = %9, %6
  %16 = load i64, i64* %needed.addr, align 8, !dbg !4591
  %cmp5 = icmp ugt i64 %16, 2147483647, !dbg !4593
  br i1 %cmp5, label %17, label %18, !dbg !4594

; <label>:17:                                     ; preds = %15
  store i8* null, i8** %retval, align 8, !dbg !4595
  br label %94, !dbg !4595

; <label>:18:                                     ; preds = %15
  %19 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4597
  %offset6 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %19, i32 0, i32 2, !dbg !4598
  %20 = load i64, i64* %offset6, align 8, !dbg !4598
  %add = add i64 %20, 1, !dbg !4599
  %21 = load i64, i64* %needed.addr, align 8, !dbg !4600
  %add7 = add i64 %21, %add, !dbg !4600
  store i64 %add7, i64* %needed.addr, align 8, !dbg !4600
  %22 = load i64, i64* %needed.addr, align 8, !dbg !4601
  %23 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4603
  %length8 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %23, i32 0, i32 1, !dbg !4604
  %24 = load i64, i64* %length8, align 8, !dbg !4604
  %cmp9 = icmp ule i64 %22, %24, !dbg !4605
  br i1 %cmp9, label %25, label %30, !dbg !4606

; <label>:25:                                     ; preds = %18
  %26 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4607
  %buffer10 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %26, i32 0, i32 0, !dbg !4609
  %27 = load i8*, i8** %buffer10, align 8, !dbg !4609
  %28 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4610
  %offset11 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %28, i32 0, i32 2, !dbg !4611
  %29 = load i64, i64* %offset11, align 8, !dbg !4611
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %29, !dbg !4612
  store i8* %add.ptr, i8** %retval, align 8, !dbg !4613
  br label %94, !dbg !4613

; <label>:30:                                     ; preds = %18
  %31 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4614
  %noalloc = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %31, i32 0, i32 4, !dbg !4616
  %32 = load i32, i32* %noalloc, align 8, !dbg !4616
  %tobool = icmp ne i32 %32, 0, !dbg !4614
  br i1 %tobool, label %33, label %34, !dbg !4617

; <label>:33:                                     ; preds = %30
  store i8* null, i8** %retval, align 8, !dbg !4618
  br label %94, !dbg !4618

; <label>:34:                                     ; preds = %30
  %35 = load i64, i64* %needed.addr, align 8, !dbg !4620
  %cmp12 = icmp ugt i64 %35, 1073741823, !dbg !4622
  br i1 %cmp12, label %36, label %41, !dbg !4623

; <label>:36:                                     ; preds = %34
  %37 = load i64, i64* %needed.addr, align 8, !dbg !4624
  %cmp13 = icmp ule i64 %37, 2147483647, !dbg !4627
  br i1 %cmp13, label %38, label %39, !dbg !4628

; <label>:38:                                     ; preds = %36
  store i64 2147483647, i64* %newsize, align 8, !dbg !4629
  br label %40, !dbg !4631

; <label>:39:                                     ; preds = %36
  store i8* null, i8** %retval, align 8, !dbg !4632
  br label %94, !dbg !4632

; <label>:40:                                     ; preds = %38
  br label %43, !dbg !4634

; <label>:41:                                     ; preds = %34
  %42 = load i64, i64* %needed.addr, align 8, !dbg !4635
  %mul = mul i64 %42, 2, !dbg !4637
  store i64 %mul, i64* %newsize, align 8, !dbg !4638
  br label %43

; <label>:43:                                     ; preds = %41, %40
  %44 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4639
  %hooks = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %44, i32 0, i32 6, !dbg !4641
  %reallocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %hooks, i32 0, i32 2, !dbg !4642
  %45 = load i8* (i8*, i64)*, i8* (i8*, i64)** %reallocate, align 8, !dbg !4642
  %cmp14 = icmp ne i8* (i8*, i64)* %45, null, !dbg !4643
  br i1 %cmp14, label %46, label %61, !dbg !4644

; <label>:46:                                     ; preds = %43
  %47 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4645
  %hooks15 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %47, i32 0, i32 6, !dbg !4647
  %reallocate16 = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %hooks15, i32 0, i32 2, !dbg !4648
  %48 = load i8* (i8*, i64)*, i8* (i8*, i64)** %reallocate16, align 8, !dbg !4648
  %49 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4649
  %buffer17 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %49, i32 0, i32 0, !dbg !4650
  %50 = load i8*, i8** %buffer17, align 8, !dbg !4650
  %51 = load i64, i64* %newsize, align 8, !dbg !4651
  %call = call i8* %48(i8* %50, i64 %51), !dbg !4645
  store i8* %call, i8** %newbuffer, align 8, !dbg !4652
  %52 = load i8*, i8** %newbuffer, align 8, !dbg !4653
  %cmp18 = icmp eq i8* %52, null, !dbg !4655
  br i1 %cmp18, label %53, label %60, !dbg !4656

; <label>:53:                                     ; preds = %46
  %54 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4657
  %hooks19 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %54, i32 0, i32 6, !dbg !4659
  %deallocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %hooks19, i32 0, i32 1, !dbg !4660
  %55 = load void (i8*)*, void (i8*)** %deallocate, align 8, !dbg !4660
  %56 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4661
  %buffer20 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %56, i32 0, i32 0, !dbg !4662
  %57 = load i8*, i8** %buffer20, align 8, !dbg !4662
  call void %55(i8* %57), !dbg !4657
  %58 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4663
  %length21 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %58, i32 0, i32 1, !dbg !4664
  store i64 0, i64* %length21, align 8, !dbg !4665
  %59 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4666
  %buffer22 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %59, i32 0, i32 0, !dbg !4667
  store i8* null, i8** %buffer22, align 8, !dbg !4668
  store i8* null, i8** %retval, align 8, !dbg !4669
  br label %94, !dbg !4669

; <label>:60:                                     ; preds = %46
  br label %86, !dbg !4670

; <label>:61:                                     ; preds = %43
  %62 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4671
  %hooks23 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %62, i32 0, i32 6, !dbg !4673
  %allocate = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %hooks23, i32 0, i32 0, !dbg !4674
  %63 = load i8* (i64)*, i8* (i64)** %allocate, align 8, !dbg !4674
  %64 = load i64, i64* %newsize, align 8, !dbg !4675
  %call24 = call i8* %63(i64 %64), !dbg !4671
  store i8* %call24, i8** %newbuffer, align 8, !dbg !4676
  %65 = load i8*, i8** %newbuffer, align 8, !dbg !4677
  %tobool25 = icmp ne i8* %65, null, !dbg !4677
  br i1 %tobool25, label %73, label %66, !dbg !4679

; <label>:66:                                     ; preds = %61
  %67 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4680
  %hooks26 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %67, i32 0, i32 6, !dbg !4682
  %deallocate27 = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %hooks26, i32 0, i32 1, !dbg !4683
  %68 = load void (i8*)*, void (i8*)** %deallocate27, align 8, !dbg !4683
  %69 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4684
  %buffer28 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %69, i32 0, i32 0, !dbg !4685
  %70 = load i8*, i8** %buffer28, align 8, !dbg !4685
  call void %68(i8* %70), !dbg !4680
  %71 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4686
  %length29 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %71, i32 0, i32 1, !dbg !4687
  store i64 0, i64* %length29, align 8, !dbg !4688
  %72 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4689
  %buffer30 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %72, i32 0, i32 0, !dbg !4690
  store i8* null, i8** %buffer30, align 8, !dbg !4691
  store i8* null, i8** %retval, align 8, !dbg !4692
  br label %94, !dbg !4692

; <label>:73:                                     ; preds = %61
  %74 = load i8*, i8** %newbuffer, align 8, !dbg !4693
  %tobool31 = icmp ne i8* %74, null, !dbg !4693
  br i1 %tobool31, label %75, label %81, !dbg !4695

; <label>:75:                                     ; preds = %73
  %76 = load i8*, i8** %newbuffer, align 8, !dbg !4696
  %77 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4698
  %buffer32 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %77, i32 0, i32 0, !dbg !4699
  %78 = load i8*, i8** %buffer32, align 8, !dbg !4699
  %79 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4700
  %offset33 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %79, i32 0, i32 2, !dbg !4701
  %80 = load i64, i64* %offset33, align 8, !dbg !4701
  %add34 = add i64 %80, 1, !dbg !4702
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %78, i64 %add34, i32 1, i1 false), !dbg !4703
  br label %81, !dbg !4704

; <label>:81:                                     ; preds = %75, %73
  %82 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4705
  %hooks35 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %82, i32 0, i32 6, !dbg !4706
  %deallocate36 = getelementptr inbounds %struct.internal_hooks, %struct.internal_hooks* %hooks35, i32 0, i32 1, !dbg !4707
  %83 = load void (i8*)*, void (i8*)** %deallocate36, align 8, !dbg !4707
  %84 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4708
  %buffer37 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %84, i32 0, i32 0, !dbg !4709
  %85 = load i8*, i8** %buffer37, align 8, !dbg !4709
  call void %83(i8* %85), !dbg !4705
  br label %86

; <label>:86:                                     ; preds = %81, %60
  %87 = load i64, i64* %newsize, align 8, !dbg !4710
  %88 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4711
  %length38 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %88, i32 0, i32 1, !dbg !4712
  store i64 %87, i64* %length38, align 8, !dbg !4713
  %89 = load i8*, i8** %newbuffer, align 8, !dbg !4714
  %90 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4715
  %buffer39 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %90, i32 0, i32 0, !dbg !4716
  store i8* %89, i8** %buffer39, align 8, !dbg !4717
  %91 = load i8*, i8** %newbuffer, align 8, !dbg !4718
  %92 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4719
  %offset40 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %92, i32 0, i32 2, !dbg !4720
  %93 = load i64, i64* %offset40, align 8, !dbg !4720
  %add.ptr41 = getelementptr inbounds i8, i8* %91, i64 %93, !dbg !4721
  store i8* %add.ptr41, i8** %retval, align 8, !dbg !4722
  br label %94, !dbg !4722

; <label>:94:                                     ; preds = %86, %66, %53, %39, %33, %25, %17, %14, %5
  %95 = load i8*, i8** %retval, align 8, !dbg !4723
  ret i8* %95, !dbg !4723
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @print_number(%struct.cJSON* %item, %struct.printbuffer* %output_buffer) #0 !dbg !4724 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %output_buffer.addr = alloca %struct.printbuffer*, align 8
  %output_pointer = alloca i8*, align 8
  %d = alloca double, align 8
  %length = alloca i32, align 4
  %i = alloca i64, align 8
  %number_buffer = alloca [26 x i8], align 16
  %decimal_point = alloca i8, align 1
  %test = alloca double, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !4725, metadata !92), !dbg !4726
  store %struct.printbuffer* %output_buffer, %struct.printbuffer** %output_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.printbuffer** %output_buffer.addr, metadata !4727, metadata !92), !dbg !4728
  call void @llvm.dbg.declare(metadata i8** %output_pointer, metadata !4729, metadata !92), !dbg !4730
  store i8* null, i8** %output_pointer, align 8, !dbg !4730
  call void @llvm.dbg.declare(metadata double* %d, metadata !4731, metadata !92), !dbg !4732
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !4733
  %valuedouble = getelementptr inbounds %struct.cJSON, %struct.cJSON* %1, i32 0, i32 6, !dbg !4734
  %2 = load double, double* %valuedouble, align 8, !dbg !4734
  store double %2, double* %d, align 8, !dbg !4732
  call void @llvm.dbg.declare(metadata i32* %length, metadata !4735, metadata !92), !dbg !4736
  store i32 0, i32* %length, align 4, !dbg !4736
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4737, metadata !92), !dbg !4738
  store i64 0, i64* %i, align 8, !dbg !4738
  call void @llvm.dbg.declare(metadata [26 x i8]* %number_buffer, metadata !4739, metadata !92), !dbg !4743
  call void @llvm.dbg.declare(metadata i8* %decimal_point, metadata !4744, metadata !92), !dbg !4745
  %call = call zeroext i8 @get_decimal_point(), !dbg !4746
  store i8 %call, i8* %decimal_point, align 1, !dbg !4745
  call void @llvm.dbg.declare(metadata double* %test, metadata !4747, metadata !92), !dbg !4748
  %3 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4749
  %cmp = icmp eq %struct.printbuffer* %3, null, !dbg !4751
  br i1 %cmp, label %4, label %5, !dbg !4752

; <label>:4:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !4753
  br label %50, !dbg !4753

; <label>:5:                                      ; preds = %0
  %6 = load double, double* %d, align 8, !dbg !4755
  %mul = fmul double %6, 0.000000e+00, !dbg !4757
  %cmp1 = fcmp une double %mul, 0.000000e+00, !dbg !4758
  br i1 %cmp1, label %7, label %8, !dbg !4759

; <label>:7:                                      ; preds = %5
  %arraydecay = getelementptr inbounds [26 x i8], [26 x i8]* %number_buffer, i32 0, i32 0, !dbg !4760
  %call2 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0)) #7, !dbg !4762
  store i32 %call2, i32* %length, align 4, !dbg !4763
  br label %16, !dbg !4764

; <label>:8:                                      ; preds = %5
  %arraydecay3 = getelementptr inbounds [26 x i8], [26 x i8]* %number_buffer, i32 0, i32 0, !dbg !4765
  %9 = load double, double* %d, align 8, !dbg !4767
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double %9) #7, !dbg !4768
  store i32 %call4, i32* %length, align 4, !dbg !4769
  %arraydecay5 = getelementptr inbounds [26 x i8], [26 x i8]* %number_buffer, i32 0, i32 0, !dbg !4770
  %call6 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %arraydecay5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), double* %test) #7, !dbg !4772
  %cmp7 = icmp ne i32 %call6, 1, !dbg !4773
  br i1 %cmp7, label %13, label %10, !dbg !4774

; <label>:10:                                     ; preds = %8
  %11 = load double, double* %test, align 8, !dbg !4775
  %12 = load double, double* %d, align 8, !dbg !4777
  %cmp8 = fcmp une double %11, %12, !dbg !4778
  br i1 %cmp8, label %13, label %15, !dbg !4779

; <label>:13:                                     ; preds = %10, %8
  %arraydecay9 = getelementptr inbounds [26 x i8], [26 x i8]* %number_buffer, i32 0, i32 0, !dbg !4781
  %14 = load double, double* %d, align 8, !dbg !4783
  %call10 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), double %14) #7, !dbg !4784
  store i32 %call10, i32* %length, align 4, !dbg !4785
  br label %15, !dbg !4786

; <label>:15:                                     ; preds = %13, %10
  br label %16

; <label>:16:                                     ; preds = %15, %7
  %17 = load i32, i32* %length, align 4, !dbg !4787
  %cmp11 = icmp slt i32 %17, 0, !dbg !4789
  br i1 %cmp11, label %20, label %18, !dbg !4790

; <label>:18:                                     ; preds = %16
  %19 = load i32, i32* %length, align 4, !dbg !4791
  %cmp12 = icmp sgt i32 %19, 25, !dbg !4793
  br i1 %cmp12, label %20, label %21, !dbg !4794

; <label>:20:                                     ; preds = %18, %16
  store i32 0, i32* %retval, align 4, !dbg !4796
  br label %50, !dbg !4796

; <label>:21:                                     ; preds = %18
  %22 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4798
  %23 = load i32, i32* %length, align 4, !dbg !4799
  %conv = sext i32 %23 to i64, !dbg !4800
  %add = add i64 %conv, 1, !dbg !4801
  %call13 = call i8* @ensure(%struct.printbuffer* %22, i64 %add), !dbg !4802
  store i8* %call13, i8** %output_pointer, align 8, !dbg !4803
  %24 = load i8*, i8** %output_pointer, align 8, !dbg !4804
  %cmp14 = icmp eq i8* %24, null, !dbg !4806
  br i1 %cmp14, label %25, label %26, !dbg !4807

; <label>:25:                                     ; preds = %21
  store i32 0, i32* %retval, align 4, !dbg !4808
  br label %50, !dbg !4808

; <label>:26:                                     ; preds = %21
  store i64 0, i64* %i, align 8, !dbg !4810
  br label %27, !dbg !4812

; <label>:27:                                     ; preds = %42, %26
  %28 = load i64, i64* %i, align 8, !dbg !4813
  %29 = load i32, i32* %length, align 4, !dbg !4816
  %conv16 = sext i32 %29 to i64, !dbg !4817
  %cmp17 = icmp ult i64 %28, %conv16, !dbg !4818
  br i1 %cmp17, label %30, label %44, !dbg !4819

; <label>:30:                                     ; preds = %27
  %31 = load i64, i64* %i, align 8, !dbg !4821
  %arrayidx = getelementptr inbounds [26 x i8], [26 x i8]* %number_buffer, i64 0, i64 %31, !dbg !4824
  %32 = load i8, i8* %arrayidx, align 1, !dbg !4824
  %conv19 = zext i8 %32 to i32, !dbg !4824
  %33 = load i8, i8* %decimal_point, align 1, !dbg !4825
  %conv20 = zext i8 %33 to i32, !dbg !4825
  %cmp21 = icmp eq i32 %conv19, %conv20, !dbg !4826
  br i1 %cmp21, label %34, label %37, !dbg !4827

; <label>:34:                                     ; preds = %30
  %35 = load i8*, i8** %output_pointer, align 8, !dbg !4828
  %36 = load i64, i64* %i, align 8, !dbg !4830
  %arrayidx23 = getelementptr inbounds i8, i8* %35, i64 %36, !dbg !4828
  store i8 46, i8* %arrayidx23, align 1, !dbg !4831
  br label %42, !dbg !4832

; <label>:37:                                     ; preds = %30
  %38 = load i64, i64* %i, align 8, !dbg !4833
  %arrayidx24 = getelementptr inbounds [26 x i8], [26 x i8]* %number_buffer, i64 0, i64 %38, !dbg !4834
  %39 = load i8, i8* %arrayidx24, align 1, !dbg !4834
  %40 = load i8*, i8** %output_pointer, align 8, !dbg !4835
  %41 = load i64, i64* %i, align 8, !dbg !4836
  %arrayidx25 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !4835
  store i8 %39, i8* %arrayidx25, align 1, !dbg !4837
  br label %42, !dbg !4838

; <label>:42:                                     ; preds = %37, %34
  %43 = load i64, i64* %i, align 8, !dbg !4839
  %inc = add i64 %43, 1, !dbg !4839
  store i64 %inc, i64* %i, align 8, !dbg !4839
  br label %27, !dbg !4841, !llvm.loop !4842

; <label>:44:                                     ; preds = %27
  %45 = load i8*, i8** %output_pointer, align 8, !dbg !4845
  %46 = load i64, i64* %i, align 8, !dbg !4846
  %arrayidx26 = getelementptr inbounds i8, i8* %45, i64 %46, !dbg !4845
  store i8 0, i8* %arrayidx26, align 1, !dbg !4847
  %47 = load i32, i32* %length, align 4, !dbg !4848
  %conv27 = sext i32 %47 to i64, !dbg !4849
  %48 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4850
  %offset = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %48, i32 0, i32 2, !dbg !4851
  %49 = load i64, i64* %offset, align 8, !dbg !4852
  %add28 = add i64 %49, %conv27, !dbg !4852
  store i64 %add28, i64* %offset, align 8, !dbg !4852
  store i32 1, i32* %retval, align 4, !dbg !4853
  br label %50, !dbg !4853

; <label>:50:                                     ; preds = %44, %25, %20, %4
  %51 = load i32, i32* %retval, align 4, !dbg !4854
  ret i32 %51, !dbg !4854
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @print_string(%struct.cJSON* %item, %struct.printbuffer* %p) #0 !dbg !4855 {
  %item.addr = alloca %struct.cJSON*, align 8
  %p.addr = alloca %struct.printbuffer*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !4856, metadata !92), !dbg !4857
  store %struct.printbuffer* %p, %struct.printbuffer** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.printbuffer** %p.addr, metadata !4858, metadata !92), !dbg !4859
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !4860
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %1, i32 0, i32 4, !dbg !4861
  %2 = load i8*, i8** %valuestring, align 8, !dbg !4861
  %3 = load %struct.printbuffer*, %struct.printbuffer** %p.addr, align 8, !dbg !4862
  %call = call i32 @print_string_ptr(i8* %2, %struct.printbuffer* %3), !dbg !4863
  ret i32 %call, !dbg !4864
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @print_array(%struct.cJSON* %item, %struct.printbuffer* %output_buffer) #0 !dbg !4865 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %output_buffer.addr = alloca %struct.printbuffer*, align 8
  %output_pointer = alloca i8*, align 8
  %length = alloca i64, align 8
  %current_element = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !4866, metadata !92), !dbg !4867
  store %struct.printbuffer* %output_buffer, %struct.printbuffer** %output_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.printbuffer** %output_buffer.addr, metadata !4868, metadata !92), !dbg !4869
  call void @llvm.dbg.declare(metadata i8** %output_pointer, metadata !4870, metadata !92), !dbg !4871
  store i8* null, i8** %output_pointer, align 8, !dbg !4871
  call void @llvm.dbg.declare(metadata i64* %length, metadata !4872, metadata !92), !dbg !4873
  store i64 0, i64* %length, align 8, !dbg !4873
  call void @llvm.dbg.declare(metadata %struct.cJSON** %current_element, metadata !4874, metadata !92), !dbg !4875
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !4876
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %1, i32 0, i32 2, !dbg !4877
  %2 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !4877
  store %struct.cJSON* %2, %struct.cJSON** %current_element, align 8, !dbg !4875
  %3 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4878
  %cmp = icmp eq %struct.printbuffer* %3, null, !dbg !4880
  br i1 %cmp, label %4, label %5, !dbg !4881

; <label>:4:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !4882
  br label %55, !dbg !4882

; <label>:5:                                      ; preds = %0
  %6 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4884
  %call = call i8* @ensure(%struct.printbuffer* %6, i64 1), !dbg !4885
  store i8* %call, i8** %output_pointer, align 8, !dbg !4886
  %7 = load i8*, i8** %output_pointer, align 8, !dbg !4887
  %cmp1 = icmp eq i8* %7, null, !dbg !4889
  br i1 %cmp1, label %8, label %9, !dbg !4890

; <label>:8:                                      ; preds = %5
  store i32 0, i32* %retval, align 4, !dbg !4891
  br label %55, !dbg !4891

; <label>:9:                                      ; preds = %5
  %10 = load i8*, i8** %output_pointer, align 8, !dbg !4893
  store i8 91, i8* %10, align 1, !dbg !4894
  %11 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4895
  %offset = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %11, i32 0, i32 2, !dbg !4896
  %12 = load i64, i64* %offset, align 8, !dbg !4897
  %inc = add i64 %12, 1, !dbg !4897
  store i64 %inc, i64* %offset, align 8, !dbg !4897
  %13 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4898
  %depth = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %13, i32 0, i32 3, !dbg !4899
  %14 = load i64, i64* %depth, align 8, !dbg !4900
  %inc2 = add i64 %14, 1, !dbg !4900
  store i64 %inc2, i64* %depth, align 8, !dbg !4900
  br label %15, !dbg !4901

; <label>:15:                                     ; preds = %43, %9
  %16 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !4902
  %cmp3 = icmp ne %struct.cJSON* %16, null, !dbg !4904
  br i1 %cmp3, label %17, label %46, !dbg !4905

; <label>:17:                                     ; preds = %15
  %18 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !4906
  %19 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4909
  %call4 = call i32 @print_value(%struct.cJSON* %18, %struct.printbuffer* %19), !dbg !4910
  %tobool = icmp ne i32 %call4, 0, !dbg !4910
  br i1 %tobool, label %21, label %20, !dbg !4911

; <label>:20:                                     ; preds = %17
  store i32 0, i32* %retval, align 4, !dbg !4912
  br label %55, !dbg !4912

; <label>:21:                                     ; preds = %17
  %22 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4914
  call void @update_offset(%struct.printbuffer* %22), !dbg !4915
  %23 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !4916
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %23, i32 0, i32 0, !dbg !4918
  %24 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !4918
  %tobool5 = icmp ne %struct.cJSON* %24, null, !dbg !4916
  br i1 %tobool5, label %25, label %43, !dbg !4919

; <label>:25:                                     ; preds = %21
  %26 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4920
  %format = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %26, i32 0, i32 5, !dbg !4922
  %27 = load i32, i32* %format, align 4, !dbg !4922
  %tobool6 = icmp ne i32 %27, 0, !dbg !4920
  %cond = select i1 %tobool6, i32 2, i32 1, !dbg !4920
  %conv = sext i32 %cond to i64, !dbg !4923
  store i64 %conv, i64* %length, align 8, !dbg !4924
  %28 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4925
  %29 = load i64, i64* %length, align 8, !dbg !4926
  %add = add i64 %29, 1, !dbg !4927
  %call7 = call i8* @ensure(%struct.printbuffer* %28, i64 %add), !dbg !4928
  store i8* %call7, i8** %output_pointer, align 8, !dbg !4929
  %30 = load i8*, i8** %output_pointer, align 8, !dbg !4930
  %cmp8 = icmp eq i8* %30, null, !dbg !4932
  br i1 %cmp8, label %31, label %32, !dbg !4933

; <label>:31:                                     ; preds = %25
  store i32 0, i32* %retval, align 4, !dbg !4934
  br label %55, !dbg !4934

; <label>:32:                                     ; preds = %25
  %33 = load i8*, i8** %output_pointer, align 8, !dbg !4936
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1, !dbg !4936
  store i8* %incdec.ptr, i8** %output_pointer, align 8, !dbg !4936
  store i8 44, i8* %33, align 1, !dbg !4937
  %34 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4938
  %format10 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %34, i32 0, i32 5, !dbg !4940
  %35 = load i32, i32* %format10, align 4, !dbg !4940
  %tobool11 = icmp ne i32 %35, 0, !dbg !4938
  br i1 %tobool11, label %36, label %38, !dbg !4941

; <label>:36:                                     ; preds = %32
  %37 = load i8*, i8** %output_pointer, align 8, !dbg !4942
  %incdec.ptr12 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !4942
  store i8* %incdec.ptr12, i8** %output_pointer, align 8, !dbg !4942
  store i8 32, i8* %37, align 1, !dbg !4944
  br label %38, !dbg !4945

; <label>:38:                                     ; preds = %36, %32
  %39 = load i8*, i8** %output_pointer, align 8, !dbg !4946
  store i8 0, i8* %39, align 1, !dbg !4947
  %40 = load i64, i64* %length, align 8, !dbg !4948
  %41 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4949
  %offset13 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %41, i32 0, i32 2, !dbg !4950
  %42 = load i64, i64* %offset13, align 8, !dbg !4951
  %add14 = add i64 %42, %40, !dbg !4951
  store i64 %add14, i64* %offset13, align 8, !dbg !4951
  br label %43, !dbg !4952

; <label>:43:                                     ; preds = %38, %21
  %44 = load %struct.cJSON*, %struct.cJSON** %current_element, align 8, !dbg !4953
  %next15 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %44, i32 0, i32 0, !dbg !4954
  %45 = load %struct.cJSON*, %struct.cJSON** %next15, align 8, !dbg !4954
  store %struct.cJSON* %45, %struct.cJSON** %current_element, align 8, !dbg !4955
  br label %15, !dbg !4956, !llvm.loop !4958

; <label>:46:                                     ; preds = %15
  %47 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4960
  %call16 = call i8* @ensure(%struct.printbuffer* %47, i64 2), !dbg !4961
  store i8* %call16, i8** %output_pointer, align 8, !dbg !4962
  %48 = load i8*, i8** %output_pointer, align 8, !dbg !4963
  %cmp17 = icmp eq i8* %48, null, !dbg !4965
  br i1 %cmp17, label %49, label %50, !dbg !4966

; <label>:49:                                     ; preds = %46
  store i32 0, i32* %retval, align 4, !dbg !4967
  br label %55, !dbg !4967

; <label>:50:                                     ; preds = %46
  %51 = load i8*, i8** %output_pointer, align 8, !dbg !4969
  %incdec.ptr19 = getelementptr inbounds i8, i8* %51, i32 1, !dbg !4969
  store i8* %incdec.ptr19, i8** %output_pointer, align 8, !dbg !4969
  store i8 93, i8* %51, align 1, !dbg !4970
  %52 = load i8*, i8** %output_pointer, align 8, !dbg !4971
  store i8 0, i8* %52, align 1, !dbg !4972
  %53 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4973
  %depth20 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %53, i32 0, i32 3, !dbg !4974
  %54 = load i64, i64* %depth20, align 8, !dbg !4975
  %dec = add i64 %54, -1, !dbg !4975
  store i64 %dec, i64* %depth20, align 8, !dbg !4975
  store i32 1, i32* %retval, align 4, !dbg !4976
  br label %55, !dbg !4976

; <label>:55:                                     ; preds = %50, %49, %31, %20, %8, %4
  %56 = load i32, i32* %retval, align 4, !dbg !4977
  ret i32 %56, !dbg !4977
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @print_object(%struct.cJSON* %item, %struct.printbuffer* %output_buffer) #0 !dbg !4978 {
  %retval = alloca i32, align 4
  %item.addr = alloca %struct.cJSON*, align 8
  %output_buffer.addr = alloca %struct.printbuffer*, align 8
  %output_pointer = alloca i8*, align 8
  %length = alloca i64, align 8
  %current_item = alloca %struct.cJSON*, align 8
  %i = alloca i64, align 8
  %i70 = alloca i64, align 8
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !4979, metadata !92), !dbg !4980
  store %struct.printbuffer* %output_buffer, %struct.printbuffer** %output_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.printbuffer** %output_buffer.addr, metadata !4981, metadata !92), !dbg !4982
  call void @llvm.dbg.declare(metadata i8** %output_pointer, metadata !4983, metadata !92), !dbg !4984
  store i8* null, i8** %output_pointer, align 8, !dbg !4984
  call void @llvm.dbg.declare(metadata i64* %length, metadata !4985, metadata !92), !dbg !4986
  store i64 0, i64* %length, align 8, !dbg !4986
  call void @llvm.dbg.declare(metadata %struct.cJSON** %current_item, metadata !4987, metadata !92), !dbg !4988
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !4989
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %1, i32 0, i32 2, !dbg !4990
  %2 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !4990
  store %struct.cJSON* %2, %struct.cJSON** %current_item, align 8, !dbg !4988
  %3 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4991
  %cmp = icmp eq %struct.printbuffer* %3, null, !dbg !4993
  br i1 %cmp, label %4, label %5, !dbg !4994

; <label>:4:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !4995
  br label %131, !dbg !4995

; <label>:5:                                      ; preds = %0
  %6 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !4997
  %format = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %6, i32 0, i32 5, !dbg !4998
  %7 = load i32, i32* %format, align 4, !dbg !4998
  %tobool = icmp ne i32 %7, 0, !dbg !4997
  %cond = select i1 %tobool, i32 2, i32 1, !dbg !4997
  %conv = sext i32 %cond to i64, !dbg !4999
  store i64 %conv, i64* %length, align 8, !dbg !5000
  %8 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5001
  %9 = load i64, i64* %length, align 8, !dbg !5002
  %add = add i64 %9, 1, !dbg !5003
  %call = call i8* @ensure(%struct.printbuffer* %8, i64 %add), !dbg !5004
  store i8* %call, i8** %output_pointer, align 8, !dbg !5005
  %10 = load i8*, i8** %output_pointer, align 8, !dbg !5006
  %cmp1 = icmp eq i8* %10, null, !dbg !5008
  br i1 %cmp1, label %11, label %12, !dbg !5009

; <label>:11:                                     ; preds = %5
  store i32 0, i32* %retval, align 4, !dbg !5010
  br label %131, !dbg !5010

; <label>:12:                                     ; preds = %5
  %13 = load i8*, i8** %output_pointer, align 8, !dbg !5012
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 1, !dbg !5012
  store i8* %incdec.ptr, i8** %output_pointer, align 8, !dbg !5012
  store i8 123, i8* %13, align 1, !dbg !5013
  %14 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5014
  %depth = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %14, i32 0, i32 3, !dbg !5015
  %15 = load i64, i64* %depth, align 8, !dbg !5016
  %inc = add i64 %15, 1, !dbg !5016
  store i64 %inc, i64* %depth, align 8, !dbg !5016
  %16 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5017
  %format3 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %16, i32 0, i32 5, !dbg !5019
  %17 = load i32, i32* %format3, align 4, !dbg !5019
  %tobool4 = icmp ne i32 %17, 0, !dbg !5017
  br i1 %tobool4, label %18, label %20, !dbg !5020

; <label>:18:                                     ; preds = %12
  %19 = load i8*, i8** %output_pointer, align 8, !dbg !5021
  %incdec.ptr5 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !5021
  store i8* %incdec.ptr5, i8** %output_pointer, align 8, !dbg !5021
  store i8 10, i8* %19, align 1, !dbg !5023
  br label %20, !dbg !5024

; <label>:20:                                     ; preds = %18, %12
  %21 = load i64, i64* %length, align 8, !dbg !5025
  %22 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5026
  %offset = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %22, i32 0, i32 2, !dbg !5027
  %23 = load i64, i64* %offset, align 8, !dbg !5028
  %add6 = add i64 %23, %21, !dbg !5028
  store i64 %add6, i64* %offset, align 8, !dbg !5028
  br label %24, !dbg !5029

; <label>:24:                                     ; preds = %95, %20
  %25 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !5030
  %tobool7 = icmp ne %struct.cJSON* %25, null, !dbg !5032
  br i1 %tobool7, label %26, label %102, !dbg !5032

; <label>:26:                                     ; preds = %24
  %27 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5033
  %format8 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %27, i32 0, i32 5, !dbg !5036
  %28 = load i32, i32* %format8, align 4, !dbg !5036
  %tobool9 = icmp ne i32 %28, 0, !dbg !5033
  br i1 %tobool9, label %29, label %49, !dbg !5037

; <label>:29:                                     ; preds = %26
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5038, metadata !92), !dbg !5040
  %30 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5041
  %31 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5042
  %depth10 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %31, i32 0, i32 3, !dbg !5043
  %32 = load i64, i64* %depth10, align 8, !dbg !5043
  %call11 = call i8* @ensure(%struct.printbuffer* %30, i64 %32), !dbg !5044
  store i8* %call11, i8** %output_pointer, align 8, !dbg !5045
  %33 = load i8*, i8** %output_pointer, align 8, !dbg !5046
  %cmp12 = icmp eq i8* %33, null, !dbg !5048
  br i1 %cmp12, label %34, label %35, !dbg !5049

; <label>:34:                                     ; preds = %29
  store i32 0, i32* %retval, align 4, !dbg !5050
  br label %131, !dbg !5050

; <label>:35:                                     ; preds = %29
  store i64 0, i64* %i, align 8, !dbg !5052
  br label %36, !dbg !5054

; <label>:36:                                     ; preds = %42, %35
  %37 = load i64, i64* %i, align 8, !dbg !5055
  %38 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5058
  %depth14 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %38, i32 0, i32 3, !dbg !5059
  %39 = load i64, i64* %depth14, align 8, !dbg !5059
  %cmp15 = icmp ult i64 %37, %39, !dbg !5060
  br i1 %cmp15, label %40, label %44, !dbg !5061

; <label>:40:                                     ; preds = %36
  %41 = load i8*, i8** %output_pointer, align 8, !dbg !5063
  %incdec.ptr17 = getelementptr inbounds i8, i8* %41, i32 1, !dbg !5063
  store i8* %incdec.ptr17, i8** %output_pointer, align 8, !dbg !5063
  store i8 9, i8* %41, align 1, !dbg !5065
  br label %42, !dbg !5066

; <label>:42:                                     ; preds = %40
  %43 = load i64, i64* %i, align 8, !dbg !5067
  %inc18 = add i64 %43, 1, !dbg !5067
  store i64 %inc18, i64* %i, align 8, !dbg !5067
  br label %36, !dbg !5069, !llvm.loop !5070

; <label>:44:                                     ; preds = %36
  %45 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5073
  %depth19 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %45, i32 0, i32 3, !dbg !5074
  %46 = load i64, i64* %depth19, align 8, !dbg !5074
  %47 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5075
  %offset20 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %47, i32 0, i32 2, !dbg !5076
  %48 = load i64, i64* %offset20, align 8, !dbg !5077
  %add21 = add i64 %48, %46, !dbg !5077
  store i64 %add21, i64* %offset20, align 8, !dbg !5077
  br label %49, !dbg !5078

; <label>:49:                                     ; preds = %44, %26
  %50 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !5079
  %string = getelementptr inbounds %struct.cJSON, %struct.cJSON* %50, i32 0, i32 7, !dbg !5081
  %51 = load i8*, i8** %string, align 8, !dbg !5081
  %52 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5082
  %call22 = call i32 @print_string_ptr(i8* %51, %struct.printbuffer* %52), !dbg !5083
  %tobool23 = icmp ne i32 %call22, 0, !dbg !5083
  br i1 %tobool23, label %54, label %53, !dbg !5084

; <label>:53:                                     ; preds = %49
  store i32 0, i32* %retval, align 4, !dbg !5085
  br label %131, !dbg !5085

; <label>:54:                                     ; preds = %49
  %55 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5087
  call void @update_offset(%struct.printbuffer* %55), !dbg !5088
  %56 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5089
  %format24 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %56, i32 0, i32 5, !dbg !5090
  %57 = load i32, i32* %format24, align 4, !dbg !5090
  %tobool25 = icmp ne i32 %57, 0, !dbg !5089
  %cond26 = select i1 %tobool25, i32 2, i32 1, !dbg !5089
  %conv27 = sext i32 %cond26 to i64, !dbg !5091
  store i64 %conv27, i64* %length, align 8, !dbg !5092
  %58 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5093
  %59 = load i64, i64* %length, align 8, !dbg !5094
  %call28 = call i8* @ensure(%struct.printbuffer* %58, i64 %59), !dbg !5095
  store i8* %call28, i8** %output_pointer, align 8, !dbg !5096
  %60 = load i8*, i8** %output_pointer, align 8, !dbg !5097
  %cmp29 = icmp eq i8* %60, null, !dbg !5099
  br i1 %cmp29, label %61, label %62, !dbg !5100

; <label>:61:                                     ; preds = %54
  store i32 0, i32* %retval, align 4, !dbg !5101
  br label %131, !dbg !5101

; <label>:62:                                     ; preds = %54
  %63 = load i8*, i8** %output_pointer, align 8, !dbg !5103
  %incdec.ptr31 = getelementptr inbounds i8, i8* %63, i32 1, !dbg !5103
  store i8* %incdec.ptr31, i8** %output_pointer, align 8, !dbg !5103
  store i8 58, i8* %63, align 1, !dbg !5104
  %64 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5105
  %format32 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %64, i32 0, i32 5, !dbg !5107
  %65 = load i32, i32* %format32, align 4, !dbg !5107
  %tobool33 = icmp ne i32 %65, 0, !dbg !5105
  br i1 %tobool33, label %66, label %68, !dbg !5108

; <label>:66:                                     ; preds = %62
  %67 = load i8*, i8** %output_pointer, align 8, !dbg !5109
  %incdec.ptr34 = getelementptr inbounds i8, i8* %67, i32 1, !dbg !5109
  store i8* %incdec.ptr34, i8** %output_pointer, align 8, !dbg !5109
  store i8 9, i8* %67, align 1, !dbg !5111
  br label %68, !dbg !5112

; <label>:68:                                     ; preds = %66, %62
  %69 = load i64, i64* %length, align 8, !dbg !5113
  %70 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5114
  %offset35 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %70, i32 0, i32 2, !dbg !5115
  %71 = load i64, i64* %offset35, align 8, !dbg !5116
  %add36 = add i64 %71, %69, !dbg !5116
  store i64 %add36, i64* %offset35, align 8, !dbg !5116
  %72 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !5117
  %73 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5119
  %call37 = call i32 @print_value(%struct.cJSON* %72, %struct.printbuffer* %73), !dbg !5120
  %tobool38 = icmp ne i32 %call37, 0, !dbg !5120
  br i1 %tobool38, label %75, label %74, !dbg !5121

; <label>:74:                                     ; preds = %68
  store i32 0, i32* %retval, align 4, !dbg !5122
  br label %131, !dbg !5122

; <label>:75:                                     ; preds = %68
  %76 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5124
  call void @update_offset(%struct.printbuffer* %76), !dbg !5125
  %77 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5126
  %format39 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %77, i32 0, i32 5, !dbg !5127
  %78 = load i32, i32* %format39, align 4, !dbg !5127
  %tobool40 = icmp ne i32 %78, 0, !dbg !5126
  %cond41 = select i1 %tobool40, i32 1, i32 0, !dbg !5126
  %conv42 = sext i32 %cond41 to i64, !dbg !5128
  %79 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !5129
  %next = getelementptr inbounds %struct.cJSON, %struct.cJSON* %79, i32 0, i32 0, !dbg !5130
  %80 = load %struct.cJSON*, %struct.cJSON** %next, align 8, !dbg !5130
  %tobool43 = icmp ne %struct.cJSON* %80, null, !dbg !5129
  %cond44 = select i1 %tobool43, i32 1, i32 0, !dbg !5129
  %conv45 = sext i32 %cond44 to i64, !dbg !5131
  %add46 = add i64 %conv42, %conv45, !dbg !5132
  store i64 %add46, i64* %length, align 8, !dbg !5133
  %81 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5134
  %82 = load i64, i64* %length, align 8, !dbg !5135
  %add47 = add i64 %82, 1, !dbg !5136
  %call48 = call i8* @ensure(%struct.printbuffer* %81, i64 %add47), !dbg !5137
  store i8* %call48, i8** %output_pointer, align 8, !dbg !5138
  %83 = load i8*, i8** %output_pointer, align 8, !dbg !5139
  %cmp49 = icmp eq i8* %83, null, !dbg !5141
  br i1 %cmp49, label %84, label %85, !dbg !5142

; <label>:84:                                     ; preds = %75
  store i32 0, i32* %retval, align 4, !dbg !5143
  br label %131, !dbg !5143

; <label>:85:                                     ; preds = %75
  %86 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !5145
  %next51 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %86, i32 0, i32 0, !dbg !5147
  %87 = load %struct.cJSON*, %struct.cJSON** %next51, align 8, !dbg !5147
  %tobool52 = icmp ne %struct.cJSON* %87, null, !dbg !5145
  br i1 %tobool52, label %88, label %90, !dbg !5148

; <label>:88:                                     ; preds = %85
  %89 = load i8*, i8** %output_pointer, align 8, !dbg !5149
  %incdec.ptr53 = getelementptr inbounds i8, i8* %89, i32 1, !dbg !5149
  store i8* %incdec.ptr53, i8** %output_pointer, align 8, !dbg !5149
  store i8 44, i8* %89, align 1, !dbg !5151
  br label %90, !dbg !5152

; <label>:90:                                     ; preds = %88, %85
  %91 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5153
  %format54 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %91, i32 0, i32 5, !dbg !5155
  %92 = load i32, i32* %format54, align 4, !dbg !5155
  %tobool55 = icmp ne i32 %92, 0, !dbg !5153
  br i1 %tobool55, label %93, label %95, !dbg !5156

; <label>:93:                                     ; preds = %90
  %94 = load i8*, i8** %output_pointer, align 8, !dbg !5157
  %incdec.ptr56 = getelementptr inbounds i8, i8* %94, i32 1, !dbg !5157
  store i8* %incdec.ptr56, i8** %output_pointer, align 8, !dbg !5157
  store i8 10, i8* %94, align 1, !dbg !5159
  br label %95, !dbg !5160

; <label>:95:                                     ; preds = %93, %90
  %96 = load i8*, i8** %output_pointer, align 8, !dbg !5161
  store i8 0, i8* %96, align 1, !dbg !5162
  %97 = load i64, i64* %length, align 8, !dbg !5163
  %98 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5164
  %offset57 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %98, i32 0, i32 2, !dbg !5165
  %99 = load i64, i64* %offset57, align 8, !dbg !5166
  %add58 = add i64 %99, %97, !dbg !5166
  store i64 %add58, i64* %offset57, align 8, !dbg !5166
  %100 = load %struct.cJSON*, %struct.cJSON** %current_item, align 8, !dbg !5167
  %next59 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %100, i32 0, i32 0, !dbg !5168
  %101 = load %struct.cJSON*, %struct.cJSON** %next59, align 8, !dbg !5168
  store %struct.cJSON* %101, %struct.cJSON** %current_item, align 8, !dbg !5169
  br label %24, !dbg !5170, !llvm.loop !5172

; <label>:102:                                    ; preds = %24
  %103 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5174
  %104 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5175
  %format60 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %104, i32 0, i32 5, !dbg !5176
  %105 = load i32, i32* %format60, align 4, !dbg !5176
  %tobool61 = icmp ne i32 %105, 0, !dbg !5175
  br i1 %tobool61, label %106, label %109, !dbg !5175

; <label>:106:                                    ; preds = %102
  %107 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5177
  %depth62 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %107, i32 0, i32 3, !dbg !5178
  %108 = load i64, i64* %depth62, align 8, !dbg !5178
  %add63 = add i64 %108, 1, !dbg !5179
  br label %110, !dbg !5180

; <label>:109:                                    ; preds = %102
  br label %110, !dbg !5181

; <label>:110:                                    ; preds = %109, %106
  %cond64 = phi i64 [ %add63, %106 ], [ 2, %109 ], !dbg !5182
  %call65 = call i8* @ensure(%struct.printbuffer* %103, i64 %cond64), !dbg !5184
  store i8* %call65, i8** %output_pointer, align 8, !dbg !5185
  %111 = load i8*, i8** %output_pointer, align 8, !dbg !5186
  %cmp66 = icmp eq i8* %111, null, !dbg !5188
  br i1 %cmp66, label %112, label %113, !dbg !5189

; <label>:112:                                    ; preds = %110
  store i32 0, i32* %retval, align 4, !dbg !5190
  br label %131, !dbg !5190

; <label>:113:                                    ; preds = %110
  %114 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5192
  %format68 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %114, i32 0, i32 5, !dbg !5194
  %115 = load i32, i32* %format68, align 4, !dbg !5194
  %tobool69 = icmp ne i32 %115, 0, !dbg !5192
  br i1 %tobool69, label %116, label %126, !dbg !5195

; <label>:116:                                    ; preds = %113
  call void @llvm.dbg.declare(metadata i64* %i70, metadata !5196, metadata !92), !dbg !5198
  store i64 0, i64* %i70, align 8, !dbg !5199
  br label %117, !dbg !5201

; <label>:117:                                    ; preds = %123, %116
  %118 = load i64, i64* %i70, align 8, !dbg !5202
  %119 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5205
  %depth71 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %119, i32 0, i32 3, !dbg !5206
  %120 = load i64, i64* %depth71, align 8, !dbg !5206
  %sub = sub i64 %120, 1, !dbg !5207
  %cmp72 = icmp ult i64 %118, %sub, !dbg !5208
  br i1 %cmp72, label %121, label %125, !dbg !5209

; <label>:121:                                    ; preds = %117
  %122 = load i8*, i8** %output_pointer, align 8, !dbg !5211
  %incdec.ptr74 = getelementptr inbounds i8, i8* %122, i32 1, !dbg !5211
  store i8* %incdec.ptr74, i8** %output_pointer, align 8, !dbg !5211
  store i8 9, i8* %122, align 1, !dbg !5213
  br label %123, !dbg !5214

; <label>:123:                                    ; preds = %121
  %124 = load i64, i64* %i70, align 8, !dbg !5215
  %inc75 = add i64 %124, 1, !dbg !5215
  store i64 %inc75, i64* %i70, align 8, !dbg !5215
  br label %117, !dbg !5217, !llvm.loop !5218

; <label>:125:                                    ; preds = %117
  br label %126, !dbg !5221

; <label>:126:                                    ; preds = %125, %113
  %127 = load i8*, i8** %output_pointer, align 8, !dbg !5222
  %incdec.ptr76 = getelementptr inbounds i8, i8* %127, i32 1, !dbg !5222
  store i8* %incdec.ptr76, i8** %output_pointer, align 8, !dbg !5222
  store i8 125, i8* %127, align 1, !dbg !5223
  %128 = load i8*, i8** %output_pointer, align 8, !dbg !5224
  store i8 0, i8* %128, align 1, !dbg !5225
  %129 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5226
  %depth77 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %129, i32 0, i32 3, !dbg !5227
  %130 = load i64, i64* %depth77, align 8, !dbg !5228
  %dec = add i64 %130, -1, !dbg !5228
  store i64 %dec, i64* %depth77, align 8, !dbg !5228
  store i32 1, i32* %retval, align 4, !dbg !5229
  br label %131, !dbg !5229

; <label>:131:                                    ; preds = %126, %112, %84, %74, %61, %53, %34, %11, %4
  %132 = load i32, i32* %retval, align 4, !dbg !5230
  ret i32 %132, !dbg !5230
}

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @print_string_ptr(i8* %input, %struct.printbuffer* %output_buffer) #0 !dbg !5231 {
  %retval = alloca i32, align 4
  %input.addr = alloca i8*, align 8
  %output_buffer.addr = alloca %struct.printbuffer*, align 8
  %input_pointer = alloca i8*, align 8
  %output = alloca i8*, align 8
  %output_pointer = alloca i8*, align 8
  %output_length = alloca i64, align 8
  %escape_characters = alloca i64, align 8
  store i8* %input, i8** %input.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input.addr, metadata !5234, metadata !92), !dbg !5235
  store %struct.printbuffer* %output_buffer, %struct.printbuffer** %output_buffer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.printbuffer** %output_buffer.addr, metadata !5236, metadata !92), !dbg !5237
  call void @llvm.dbg.declare(metadata i8** %input_pointer, metadata !5238, metadata !92), !dbg !5239
  store i8* null, i8** %input_pointer, align 8, !dbg !5239
  call void @llvm.dbg.declare(metadata i8** %output, metadata !5240, metadata !92), !dbg !5241
  store i8* null, i8** %output, align 8, !dbg !5241
  call void @llvm.dbg.declare(metadata i8** %output_pointer, metadata !5242, metadata !92), !dbg !5243
  store i8* null, i8** %output_pointer, align 8, !dbg !5243
  call void @llvm.dbg.declare(metadata i64* %output_length, metadata !5244, metadata !92), !dbg !5245
  store i64 0, i64* %output_length, align 8, !dbg !5245
  call void @llvm.dbg.declare(metadata i64* %escape_characters, metadata !5246, metadata !92), !dbg !5247
  store i64 0, i64* %escape_characters, align 8, !dbg !5247
  %1 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5248
  %cmp = icmp eq %struct.printbuffer* %1, null, !dbg !5250
  br i1 %cmp, label %2, label %3, !dbg !5251

; <label>:2:                                      ; preds = %0
  store i32 0, i32* %retval, align 4, !dbg !5252
  br label %102, !dbg !5252

; <label>:3:                                      ; preds = %0
  %4 = load i8*, i8** %input.addr, align 8, !dbg !5254
  %cmp1 = icmp eq i8* %4, null, !dbg !5256
  br i1 %cmp1, label %5, label %11, !dbg !5257

; <label>:5:                                      ; preds = %3
  %6 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5258
  %call = call i8* @ensure(%struct.printbuffer* %6, i64 3), !dbg !5260
  store i8* %call, i8** %output, align 8, !dbg !5261
  %7 = load i8*, i8** %output, align 8, !dbg !5262
  %cmp2 = icmp eq i8* %7, null, !dbg !5264
  br i1 %cmp2, label %8, label %9, !dbg !5265

; <label>:8:                                      ; preds = %5
  store i32 0, i32* %retval, align 4, !dbg !5266
  br label %102, !dbg !5266

; <label>:9:                                      ; preds = %5
  %10 = load i8*, i8** %output, align 8, !dbg !5268
  %call3 = call i8* @strcpy(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0)) #7, !dbg !5269
  store i32 1, i32* %retval, align 4, !dbg !5270
  br label %102, !dbg !5270

; <label>:11:                                     ; preds = %3
  %12 = load i8*, i8** %input.addr, align 8, !dbg !5271
  store i8* %12, i8** %input_pointer, align 8, !dbg !5273
  br label %13, !dbg !5274

; <label>:13:                                     ; preds = %28, %11
  %14 = load i8*, i8** %input_pointer, align 8, !dbg !5275
  %15 = load i8, i8* %14, align 1, !dbg !5278
  %tobool = icmp ne i8 %15, 0, !dbg !5279
  br i1 %tobool, label %16, label %30, !dbg !5279

; <label>:16:                                     ; preds = %13
  %17 = load i8*, i8** %input_pointer, align 8, !dbg !5281
  %18 = load i8, i8* %17, align 1, !dbg !5283
  %conv = zext i8 %18 to i32, !dbg !5283
  switch i32 %conv, label %21 [
    i32 34, label %19
    i32 92, label %19
    i32 8, label %19
    i32 12, label %19
    i32 10, label %19
    i32 13, label %19
    i32 9, label %19
  ], !dbg !5284

; <label>:19:                                     ; preds = %16, %16, %16, %16, %16, %16, %16
  %20 = load i64, i64* %escape_characters, align 8, !dbg !5285
  %inc = add i64 %20, 1, !dbg !5285
  store i64 %inc, i64* %escape_characters, align 8, !dbg !5285
  br label %27, !dbg !5287

; <label>:21:                                     ; preds = %16
  %22 = load i8*, i8** %input_pointer, align 8, !dbg !5288
  %23 = load i8, i8* %22, align 1, !dbg !5290
  %conv4 = zext i8 %23 to i32, !dbg !5290
  %cmp5 = icmp slt i32 %conv4, 32, !dbg !5291
  br i1 %cmp5, label %24, label %26, !dbg !5292

; <label>:24:                                     ; preds = %21
  %25 = load i64, i64* %escape_characters, align 8, !dbg !5293
  %add = add i64 %25, 5, !dbg !5293
  store i64 %add, i64* %escape_characters, align 8, !dbg !5293
  br label %26, !dbg !5295

; <label>:26:                                     ; preds = %24, %21
  br label %27, !dbg !5296

; <label>:27:                                     ; preds = %26, %19
  br label %28, !dbg !5297

; <label>:28:                                     ; preds = %27
  %29 = load i8*, i8** %input_pointer, align 8, !dbg !5298
  %incdec.ptr = getelementptr inbounds i8, i8* %29, i32 1, !dbg !5298
  store i8* %incdec.ptr, i8** %input_pointer, align 8, !dbg !5298
  br label %13, !dbg !5300, !llvm.loop !5301

; <label>:30:                                     ; preds = %13
  %31 = load i8*, i8** %input_pointer, align 8, !dbg !5304
  %32 = load i8*, i8** %input.addr, align 8, !dbg !5305
  %sub.ptr.lhs.cast = ptrtoint i8* %31 to i64, !dbg !5306
  %sub.ptr.rhs.cast = ptrtoint i8* %32 to i64, !dbg !5306
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5306
  %33 = load i64, i64* %escape_characters, align 8, !dbg !5307
  %add7 = add i64 %sub.ptr.sub, %33, !dbg !5308
  store i64 %add7, i64* %output_length, align 8, !dbg !5309
  %34 = load %struct.printbuffer*, %struct.printbuffer** %output_buffer.addr, align 8, !dbg !5310
  %35 = load i64, i64* %output_length, align 8, !dbg !5311
  %add8 = add i64 %35, 3, !dbg !5312
  %call9 = call i8* @ensure(%struct.printbuffer* %34, i64 %add8), !dbg !5313
  store i8* %call9, i8** %output, align 8, !dbg !5314
  %36 = load i8*, i8** %output, align 8, !dbg !5315
  %cmp10 = icmp eq i8* %36, null, !dbg !5317
  br i1 %cmp10, label %37, label %38, !dbg !5318

; <label>:37:                                     ; preds = %30
  store i32 0, i32* %retval, align 4, !dbg !5319
  br label %102, !dbg !5319

; <label>:38:                                     ; preds = %30
  %39 = load i64, i64* %escape_characters, align 8, !dbg !5321
  %cmp12 = icmp eq i64 %39, 0, !dbg !5323
  br i1 %cmp12, label %40, label %49, !dbg !5324

; <label>:40:                                     ; preds = %38
  %41 = load i8*, i8** %output, align 8, !dbg !5325
  %arrayidx = getelementptr inbounds i8, i8* %41, i64 0, !dbg !5325
  store i8 34, i8* %arrayidx, align 1, !dbg !5327
  %42 = load i8*, i8** %output, align 8, !dbg !5328
  %add.ptr = getelementptr inbounds i8, i8* %42, i64 1, !dbg !5329
  %43 = load i8*, i8** %input.addr, align 8, !dbg !5330
  %44 = load i64, i64* %output_length, align 8, !dbg !5331
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %43, i64 %44, i32 1, i1 false), !dbg !5332
  %45 = load i8*, i8** %output, align 8, !dbg !5333
  %46 = load i64, i64* %output_length, align 8, !dbg !5334
  %add14 = add i64 %46, 1, !dbg !5335
  %arrayidx15 = getelementptr inbounds i8, i8* %45, i64 %add14, !dbg !5333
  store i8 34, i8* %arrayidx15, align 1, !dbg !5336
  %47 = load i8*, i8** %output, align 8, !dbg !5337
  %48 = load i64, i64* %output_length, align 8, !dbg !5338
  %add16 = add i64 %48, 2, !dbg !5339
  %arrayidx17 = getelementptr inbounds i8, i8* %47, i64 %add16, !dbg !5337
  store i8 0, i8* %arrayidx17, align 1, !dbg !5340
  store i32 1, i32* %retval, align 4, !dbg !5341
  br label %102, !dbg !5341

; <label>:49:                                     ; preds = %38
  %50 = load i8*, i8** %output, align 8, !dbg !5342
  %arrayidx18 = getelementptr inbounds i8, i8* %50, i64 0, !dbg !5342
  store i8 34, i8* %arrayidx18, align 1, !dbg !5343
  %51 = load i8*, i8** %output, align 8, !dbg !5344
  %add.ptr19 = getelementptr inbounds i8, i8* %51, i64 1, !dbg !5345
  store i8* %add.ptr19, i8** %output_pointer, align 8, !dbg !5346
  %52 = load i8*, i8** %input.addr, align 8, !dbg !5347
  store i8* %52, i8** %input_pointer, align 8, !dbg !5349
  br label %53, !dbg !5350

; <label>:53:                                     ; preds = %94, %49
  %54 = load i8*, i8** %input_pointer, align 8, !dbg !5351
  %55 = load i8, i8* %54, align 1, !dbg !5354
  %conv20 = zext i8 %55 to i32, !dbg !5354
  %cmp21 = icmp ne i32 %conv20, 0, !dbg !5355
  br i1 %cmp21, label %56, label %97, !dbg !5356

; <label>:56:                                     ; preds = %53
  %57 = load i8*, i8** %input_pointer, align 8, !dbg !5358
  %58 = load i8, i8* %57, align 1, !dbg !5361
  %conv23 = zext i8 %58 to i32, !dbg !5361
  %cmp24 = icmp sgt i32 %conv23, 31, !dbg !5362
  br i1 %cmp24, label %59, label %69, !dbg !5363

; <label>:59:                                     ; preds = %56
  %60 = load i8*, i8** %input_pointer, align 8, !dbg !5364
  %61 = load i8, i8* %60, align 1, !dbg !5366
  %conv26 = zext i8 %61 to i32, !dbg !5366
  %cmp27 = icmp ne i32 %conv26, 34, !dbg !5367
  br i1 %cmp27, label %62, label %69, !dbg !5368

; <label>:62:                                     ; preds = %59
  %63 = load i8*, i8** %input_pointer, align 8, !dbg !5369
  %64 = load i8, i8* %63, align 1, !dbg !5371
  %conv29 = zext i8 %64 to i32, !dbg !5371
  %cmp30 = icmp ne i32 %conv29, 92, !dbg !5372
  br i1 %cmp30, label %65, label %69, !dbg !5373

; <label>:65:                                     ; preds = %62
  %66 = load i8*, i8** %input_pointer, align 8, !dbg !5375
  %67 = load i8, i8* %66, align 1, !dbg !5377
  %68 = load i8*, i8** %output_pointer, align 8, !dbg !5378
  store i8 %67, i8* %68, align 1, !dbg !5379
  br label %93, !dbg !5380

; <label>:69:                                     ; preds = %62, %59, %56
  %70 = load i8*, i8** %output_pointer, align 8, !dbg !5381
  %incdec.ptr32 = getelementptr inbounds i8, i8* %70, i32 1, !dbg !5381
  store i8* %incdec.ptr32, i8** %output_pointer, align 8, !dbg !5381
  store i8 92, i8* %70, align 1, !dbg !5383
  %71 = load i8*, i8** %input_pointer, align 8, !dbg !5384
  %72 = load i8, i8* %71, align 1, !dbg !5385
  %conv33 = zext i8 %72 to i32, !dbg !5385
  switch i32 %conv33, label %87 [
    i32 92, label %73
    i32 34, label %75
    i32 8, label %77
    i32 12, label %79
    i32 10, label %81
    i32 13, label %83
    i32 9, label %85
  ], !dbg !5386

; <label>:73:                                     ; preds = %69
  %74 = load i8*, i8** %output_pointer, align 8, !dbg !5387
  store i8 92, i8* %74, align 1, !dbg !5389
  br label %92, !dbg !5390

; <label>:75:                                     ; preds = %69
  %76 = load i8*, i8** %output_pointer, align 8, !dbg !5391
  store i8 34, i8* %76, align 1, !dbg !5392
  br label %92, !dbg !5393

; <label>:77:                                     ; preds = %69
  %78 = load i8*, i8** %output_pointer, align 8, !dbg !5394
  store i8 98, i8* %78, align 1, !dbg !5395
  br label %92, !dbg !5396

; <label>:79:                                     ; preds = %69
  %80 = load i8*, i8** %output_pointer, align 8, !dbg !5397
  store i8 102, i8* %80, align 1, !dbg !5398
  br label %92, !dbg !5399

; <label>:81:                                     ; preds = %69
  %82 = load i8*, i8** %output_pointer, align 8, !dbg !5400
  store i8 110, i8* %82, align 1, !dbg !5401
  br label %92, !dbg !5402

; <label>:83:                                     ; preds = %69
  %84 = load i8*, i8** %output_pointer, align 8, !dbg !5403
  store i8 114, i8* %84, align 1, !dbg !5404
  br label %92, !dbg !5405

; <label>:85:                                     ; preds = %69
  %86 = load i8*, i8** %output_pointer, align 8, !dbg !5406
  store i8 116, i8* %86, align 1, !dbg !5407
  br label %92, !dbg !5408

; <label>:87:                                     ; preds = %69
  %88 = load i8*, i8** %output_pointer, align 8, !dbg !5409
  %89 = load i8*, i8** %input_pointer, align 8, !dbg !5410
  %90 = load i8, i8* %89, align 1, !dbg !5411
  %conv34 = zext i8 %90 to i32, !dbg !5411
  %call35 = call i32 (i8*, i8*, ...) @sprintf(i8* %88, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 %conv34) #7, !dbg !5412
  %91 = load i8*, i8** %output_pointer, align 8, !dbg !5413
  %add.ptr36 = getelementptr inbounds i8, i8* %91, i64 4, !dbg !5413
  store i8* %add.ptr36, i8** %output_pointer, align 8, !dbg !5413
  br label %92, !dbg !5414

; <label>:92:                                     ; preds = %87, %85, %83, %81, %79, %77, %75, %73
  br label %93

; <label>:93:                                     ; preds = %92, %65
  br label %94, !dbg !5415

; <label>:94:                                     ; preds = %93
  %95 = load i8*, i8** %input_pointer, align 8, !dbg !5416
  %incdec.ptr37 = getelementptr inbounds i8, i8* %95, i32 1, !dbg !5416
  store i8* %incdec.ptr37, i8** %input_pointer, align 8, !dbg !5416
  %96 = load i8*, i8** %output_pointer, align 8, !dbg !5418
  %incdec.ptr38 = getelementptr inbounds i8, i8* %96, i32 1, !dbg !5418
  store i8* %incdec.ptr38, i8** %output_pointer, align 8, !dbg !5418
  br label %53, !dbg !5419, !llvm.loop !5420

; <label>:97:                                     ; preds = %53
  %98 = load i8*, i8** %output, align 8, !dbg !5423
  %99 = load i64, i64* %output_length, align 8, !dbg !5424
  %add39 = add i64 %99, 1, !dbg !5425
  %arrayidx40 = getelementptr inbounds i8, i8* %98, i64 %add39, !dbg !5423
  store i8 34, i8* %arrayidx40, align 1, !dbg !5426
  %100 = load i8*, i8** %output, align 8, !dbg !5427
  %101 = load i64, i64* %output_length, align 8, !dbg !5428
  %add41 = add i64 %101, 2, !dbg !5429
  %arrayidx42 = getelementptr inbounds i8, i8* %100, i64 %add41, !dbg !5427
  store i8 0, i8* %arrayidx42, align 1, !dbg !5430
  store i32 1, i32* %retval, align 4, !dbg !5431
  br label %102, !dbg !5431

; <label>:102:                                    ; preds = %97, %40, %37, %9, %8, %2
  %103 = load i32, i32* %retval, align 4, !dbg !5432
  ret i32 %103, !dbg !5432
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @case_insensitive_strcmp(i8* %string1, i8* %string2) #0 !dbg !5433 {
  %retval = alloca i32, align 4
  %string1.addr = alloca i8*, align 8
  %string2.addr = alloca i8*, align 8
  store i8* %string1, i8** %string1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string1.addr, metadata !5436, metadata !92), !dbg !5437
  store i8* %string2, i8** %string2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string2.addr, metadata !5438, metadata !92), !dbg !5439
  %1 = load i8*, i8** %string1.addr, align 8, !dbg !5440
  %cmp = icmp eq i8* %1, null, !dbg !5442
  br i1 %cmp, label %4, label %2, !dbg !5443

; <label>:2:                                      ; preds = %0
  %3 = load i8*, i8** %string2.addr, align 8, !dbg !5444
  %cmp1 = icmp eq i8* %3, null, !dbg !5446
  br i1 %cmp1, label %4, label %5, !dbg !5447

; <label>:4:                                      ; preds = %2, %0
  store i32 1, i32* %retval, align 4, !dbg !5449
  br label %28, !dbg !5449

; <label>:5:                                      ; preds = %2
  %6 = load i8*, i8** %string1.addr, align 8, !dbg !5451
  %7 = load i8*, i8** %string2.addr, align 8, !dbg !5453
  %cmp2 = icmp eq i8* %6, %7, !dbg !5454
  br i1 %cmp2, label %8, label %9, !dbg !5455

; <label>:8:                                      ; preds = %5
  store i32 0, i32* %retval, align 4, !dbg !5456
  br label %28, !dbg !5456

; <label>:9:                                      ; preds = %5
  br label %10, !dbg !5458

; <label>:10:                                     ; preds = %20, %9
  %11 = load i8*, i8** %string1.addr, align 8, !dbg !5459
  %12 = load i8, i8* %11, align 1, !dbg !5463
  %conv = zext i8 %12 to i32, !dbg !5463
  %call = call i32 @tolower(i32 %conv) #8, !dbg !5464
  %13 = load i8*, i8** %string2.addr, align 8, !dbg !5465
  %14 = load i8, i8* %13, align 1, !dbg !5466
  %conv3 = zext i8 %14 to i32, !dbg !5466
  %call4 = call i32 @tolower(i32 %conv3) #8, !dbg !5467
  %cmp5 = icmp eq i32 %call, %call4, !dbg !5469
  br i1 %cmp5, label %15, label %23, !dbg !5470

; <label>:15:                                     ; preds = %10
  %16 = load i8*, i8** %string1.addr, align 8, !dbg !5472
  %17 = load i8, i8* %16, align 1, !dbg !5475
  %conv7 = zext i8 %17 to i32, !dbg !5475
  %cmp8 = icmp eq i32 %conv7, 0, !dbg !5476
  br i1 %cmp8, label %18, label %19, !dbg !5477

; <label>:18:                                     ; preds = %15
  store i32 0, i32* %retval, align 4, !dbg !5478
  br label %28, !dbg !5478

; <label>:19:                                     ; preds = %15
  br label %20, !dbg !5480

; <label>:20:                                     ; preds = %19
  %21 = load i8*, i8** %string1.addr, align 8, !dbg !5481
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1, !dbg !5481
  store i8* %incdec.ptr, i8** %string1.addr, align 8, !dbg !5481
  %22 = load i8*, i8** %string2.addr, align 8, !dbg !5483
  %incdec.ptr10 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !5483
  store i8* %incdec.ptr10, i8** %string2.addr, align 8, !dbg !5483
  br label %10, !dbg !5484, !llvm.loop !5485

; <label>:23:                                     ; preds = %10
  %24 = load i8*, i8** %string1.addr, align 8, !dbg !5488
  %25 = load i8, i8* %24, align 1, !dbg !5489
  %conv11 = zext i8 %25 to i32, !dbg !5489
  %call12 = call i32 @tolower(i32 %conv11) #8, !dbg !5490
  %26 = load i8*, i8** %string2.addr, align 8, !dbg !5491
  %27 = load i8, i8* %26, align 1, !dbg !5492
  %conv13 = zext i8 %27 to i32, !dbg !5492
  %call14 = call i32 @tolower(i32 %conv13) #8, !dbg !5493
  %sub = sub nsw i32 %call12, %call14, !dbg !5494
  store i32 %sub, i32* %retval, align 4, !dbg !5495
  br label %28, !dbg !5495

; <label>:28:                                     ; preds = %23, %18, %8, %4
  %29 = load i32, i32* %retval, align 4, !dbg !5496
  ret i32 %29, !dbg !5496
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32) #4

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }
attributes #9 = { noreturn nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!80, !81}
!llvm.ident = !{!82}

!0 = !DIGlobalVariableExpression(var: !1)
!1 = distinct !DIGlobalVariable(name: "global_error", scope: !2, file: !3, line: 68, type: !75, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final 336792)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !37)
!3 = !DIFile(filename: "/home/klee/dockermount/checksum-repair/samples/cjson/cJSON.c", directory: "/home/klee/dockermount/checksum-repair/samples/cjson")
!4 = !{}
!5 = !{!6, !9, !10, !11, !12, !15, !16, !18, !19, !22, !14, !35, !36}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!10 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !14)
!14 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_typedef, name: "cJSON_bool", file: !17, line: 132, baseType: !11)
!17 = !DIFile(filename: "/home/klee/dockermount/checksum-repair/samples/cjson/cJSON.h", directory: "/home/klee/dockermount/checksum-repair/samples/cjson")
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!19 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !20, line: 62, baseType: !21)
!20 = !DIFile(filename: "/home/klee/toolchains/llvm+clang-401-x86_64-unknown-linux-gnu/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/klee/dockermount/checksum-repair/samples/cjson")
!21 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "cJSON", file: !17, line: 123, baseType: !24)
!24 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cJSON", file: !17, line: 103, size: 512, elements: !25)
!25 = !{!26, !28, !29, !30, !31, !32, !33, !34}
!26 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !24, file: !17, line: 106, baseType: !27, size: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !24, file: !17, line: 107, baseType: !27, size: 64, offset: 64)
!29 = !DIDerivedType(tag: DW_TAG_member, name: "child", scope: !24, file: !17, line: 109, baseType: !27, size: 64, offset: 128)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !24, file: !17, line: 112, baseType: !11, size: 32, offset: 192)
!31 = !DIDerivedType(tag: DW_TAG_member, name: "valuestring", scope: !24, file: !17, line: 115, baseType: !15, size: 64, offset: 256)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "valueint", scope: !24, file: !17, line: 117, baseType: !11, size: 32, offset: 320)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "valuedouble", scope: !24, file: !17, line: 119, baseType: !10, size: 64, offset: 384)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !24, file: !17, line: 122, baseType: !15, size: 64, offset: 448)
!35 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!37 = !{!38, !0, !46, !63}
!38 = !DIGlobalVariableExpression(var: !39)
!39 = distinct !DIGlobalVariable(name: "version", scope: !40, file: !3, line: 90, type: !43, isLocal: true, isDefinition: true)
!40 = distinct !DISubprogram(name: "cJSON_Version", scope: !3, file: !3, line: 88, type: !41, isLocal: false, isDefinition: true, scopeLine: 89, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!41 = !DISubroutineType(types: !42)
!42 = !{!6}
!43 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 120, elements: !44)
!44 = !{!45}
!45 = !DISubrange(count: 15)
!46 = !DIGlobalVariableExpression(var: !47)
!47 = distinct !DIGlobalVariable(name: "global_hooks", scope: !2, file: !3, line: 147, type: !48, isLocal: true, isDefinition: true)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "internal_hooks", file: !3, line: 125, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "internal_hooks", file: !3, line: 120, size: 192, elements: !50)
!50 = !{!51, !55, !59}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "allocate", scope: !49, file: !3, line: 122, baseType: !52, size: 64)
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!53 = !DISubroutineType(types: !54)
!54 = !{!9, !19}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "deallocate", scope: !49, file: !3, line: 123, baseType: !56, size: 64, offset: 64)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!57 = !DISubroutineType(types: !58)
!58 = !{null, !9}
!59 = !DIDerivedType(tag: DW_TAG_member, name: "reallocate", scope: !49, file: !3, line: 124, baseType: !60, size: 64, offset: 128)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!61 = !DISubroutineType(types: !62)
!62 = !{!9, !9, !19}
!63 = !DIGlobalVariableExpression(var: !64)
!64 = distinct !DIGlobalVariable(name: "default_buffer_size", scope: !65, file: !3, line: 1089, type: !74, isLocal: true, isDefinition: true)
!65 = distinct !DISubprogram(name: "print", scope: !3, file: !3, line: 1087, type: !66, isLocal: true, isDefinition: true, scopeLine: 1088, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!66 = !DISubroutineType(types: !67)
!67 = !{!18, !68, !16, !71}
!68 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !69)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!70 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !23)
!71 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !72)
!72 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !73, size: 64)
!73 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !48)
!74 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!75 = !DIDerivedType(tag: DW_TAG_typedef, name: "error", file: !3, line: 67, baseType: !76)
!76 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 64, size: 128, elements: !77)
!77 = !{!78, !79}
!78 = !DIDerivedType(tag: DW_TAG_member, name: "json", scope: !76, file: !3, line: 65, baseType: !12, size: 64)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "position", scope: !76, file: !3, line: 66, baseType: !19, size: 64, offset: 64)
!80 = !{i32 2, !"Dwarf Version", i32 4}
!81 = !{i32 2, !"Debug Info Version", i32 3}
!82 = !{!"clang version 4.0.1 (tags/RELEASE_401/final 336792)"}
!83 = distinct !DISubprogram(name: "cJSON_GetErrorPtr", scope: !3, file: !3, line: 70, type: !41, isLocal: false, isDefinition: true, scopeLine: 71, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!84 = !DILocation(line: 72, column: 40, scope: !83)
!85 = !DILocation(line: 72, column: 60, scope: !83)
!86 = !DILocation(line: 72, column: 45, scope: !83)
!87 = !DILocation(line: 72, column: 5, scope: !83)
!88 = distinct !DISubprogram(name: "cJSON_GetStringValue", scope: !3, file: !3, line: 75, type: !89, isLocal: false, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!89 = !DISubroutineType(types: !90)
!90 = !{!15, !22}
!91 = !DILocalVariable(name: "item", arg: 1, scope: !88, file: !3, line: 75, type: !22)
!92 = !DIExpression()
!93 = !DILocation(line: 75, column: 50, scope: !88)
!94 = !DILocation(line: 76, column: 25, scope: !95)
!95 = distinct !DILexicalBlock(scope: !88, file: !3, line: 76, column: 9)
!96 = !DILocation(line: 76, column: 10, scope: !95)
!97 = !DILocation(line: 76, column: 9, scope: !88)
!98 = !DILocation(line: 77, column: 9, scope: !99)
!99 = distinct !DILexicalBlock(scope: !95, file: !3, line: 76, column: 32)
!100 = !DILocation(line: 80, column: 12, scope: !88)
!101 = !DILocation(line: 80, column: 18, scope: !88)
!102 = !DILocation(line: 80, column: 5, scope: !88)
!103 = !DILocation(line: 81, column: 1, scope: !88)
!104 = distinct !DISubprogram(name: "cJSON_IsString", scope: !3, file: !3, line: 2759, type: !105, isLocal: false, isDefinition: true, scopeLine: 2760, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!105 = !DISubroutineType(types: !106)
!106 = !{!16, !68}
!107 = !DILocalVariable(name: "item", arg: 1, scope: !104, file: !3, line: 2759, type: !68)
!108 = !DILocation(line: 2759, column: 61, scope: !104)
!109 = !DILocation(line: 2761, column: 9, scope: !110)
!110 = distinct !DILexicalBlock(scope: !104, file: !3, line: 2761, column: 9)
!111 = !DILocation(line: 2761, column: 14, scope: !110)
!112 = !DILocation(line: 2761, column: 9, scope: !104)
!113 = !DILocation(line: 2763, column: 9, scope: !114)
!114 = distinct !DILexicalBlock(scope: !110, file: !3, line: 2762, column: 5)
!115 = !DILocation(line: 2766, column: 13, scope: !104)
!116 = !DILocation(line: 2766, column: 19, scope: !104)
!117 = !DILocation(line: 2766, column: 24, scope: !104)
!118 = !DILocation(line: 2766, column: 32, scope: !104)
!119 = !DILocation(line: 2766, column: 5, scope: !104)
!120 = !DILocation(line: 2767, column: 1, scope: !104)
!121 = !DILocation(line: 91, column: 5, scope: !40)
!122 = !DILocation(line: 93, column: 5, scope: !40)
!123 = distinct !DISubprogram(name: "cJSON_InitHooks", scope: !3, file: !3, line: 170, type: !124, isLocal: false, isDefinition: true, scopeLine: 171, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!124 = !DISubroutineType(types: !125)
!125 = !{null, !126}
!126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !127, size: 64)
!127 = !DIDerivedType(tag: DW_TAG_typedef, name: "cJSON_Hooks", file: !17, line: 130, baseType: !128)
!128 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cJSON_Hooks", file: !17, line: 125, size: 128, elements: !129)
!129 = !{!130, !131}
!130 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_fn", scope: !128, file: !17, line: 128, baseType: !52, size: 64)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "free_fn", scope: !128, file: !17, line: 129, baseType: !56, size: 64, offset: 64)
!132 = !DILocalVariable(name: "hooks", arg: 1, scope: !123, file: !3, line: 170, type: !126)
!133 = !DILocation(line: 170, column: 49, scope: !123)
!134 = !DILocation(line: 172, column: 9, scope: !135)
!135 = distinct !DILexicalBlock(scope: !123, file: !3, line: 172, column: 9)
!136 = !DILocation(line: 172, column: 15, scope: !135)
!137 = !DILocation(line: 172, column: 9, scope: !123)
!138 = !DILocation(line: 175, column: 31, scope: !139)
!139 = distinct !DILexicalBlock(scope: !135, file: !3, line: 173, column: 5)
!140 = !DILocation(line: 176, column: 33, scope: !139)
!141 = !DILocation(line: 177, column: 33, scope: !139)
!142 = !DILocation(line: 178, column: 9, scope: !139)
!143 = !DILocation(line: 181, column: 27, scope: !123)
!144 = !DILocation(line: 182, column: 9, scope: !145)
!145 = distinct !DILexicalBlock(scope: !123, file: !3, line: 182, column: 9)
!146 = !DILocation(line: 182, column: 16, scope: !145)
!147 = !DILocation(line: 182, column: 26, scope: !145)
!148 = !DILocation(line: 182, column: 9, scope: !123)
!149 = !DILocation(line: 184, column: 33, scope: !150)
!150 = distinct !DILexicalBlock(scope: !145, file: !3, line: 183, column: 5)
!151 = !DILocation(line: 184, column: 40, scope: !150)
!152 = !DILocation(line: 184, column: 31, scope: !150)
!153 = !DILocation(line: 185, column: 5, scope: !150)
!154 = !DILocation(line: 187, column: 29, scope: !123)
!155 = !DILocation(line: 188, column: 9, scope: !156)
!156 = distinct !DILexicalBlock(scope: !123, file: !3, line: 188, column: 9)
!157 = !DILocation(line: 188, column: 16, scope: !156)
!158 = !DILocation(line: 188, column: 24, scope: !156)
!159 = !DILocation(line: 188, column: 9, scope: !123)
!160 = !DILocation(line: 190, column: 35, scope: !161)
!161 = distinct !DILexicalBlock(scope: !156, file: !3, line: 189, column: 5)
!162 = !DILocation(line: 190, column: 42, scope: !161)
!163 = !DILocation(line: 190, column: 33, scope: !161)
!164 = !DILocation(line: 191, column: 5, scope: !161)
!165 = !DILocation(line: 194, column: 29, scope: !123)
!166 = !DILocation(line: 195, column: 23, scope: !167)
!167 = distinct !DILexicalBlock(scope: !123, file: !3, line: 195, column: 9)
!168 = !DILocation(line: 195, column: 32, scope: !167)
!169 = !DILocation(line: 195, column: 43, scope: !167)
!170 = !DILocation(line: 195, column: 60, scope: !171)
!171 = !DILexicalBlockFile(scope: !167, file: !3, discriminator: 1)
!172 = !DILocation(line: 195, column: 71, scope: !171)
!173 = !DILocation(line: 195, column: 9, scope: !174)
!174 = !DILexicalBlockFile(scope: !123, file: !3, discriminator: 1)
!175 = !DILocation(line: 197, column: 33, scope: !176)
!176 = distinct !DILexicalBlock(scope: !167, file: !3, line: 196, column: 5)
!177 = !DILocation(line: 198, column: 5, scope: !176)
!178 = !DILocation(line: 199, column: 1, scope: !123)
!179 = distinct !DISubprogram(name: "cJSON_Delete", scope: !3, file: !3, line: 214, type: !180, isLocal: false, isDefinition: true, scopeLine: 215, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!180 = !DISubroutineType(types: !181)
!181 = !{null, !22}
!182 = !DILocalVariable(name: "item", arg: 1, scope: !179, file: !3, line: 214, type: !22)
!183 = !DILocation(line: 214, column: 40, scope: !179)
!184 = !DILocalVariable(name: "next", scope: !179, file: !3, line: 216, type: !22)
!185 = !DILocation(line: 216, column: 12, scope: !179)
!186 = !DILocation(line: 217, column: 5, scope: !179)
!187 = !DILocation(line: 217, column: 12, scope: !188)
!188 = !DILexicalBlockFile(scope: !179, file: !3, discriminator: 1)
!189 = !DILocation(line: 217, column: 17, scope: !188)
!190 = !DILocation(line: 217, column: 5, scope: !188)
!191 = !DILocation(line: 219, column: 16, scope: !192)
!192 = distinct !DILexicalBlock(scope: !179, file: !3, line: 218, column: 5)
!193 = !DILocation(line: 219, column: 22, scope: !192)
!194 = !DILocation(line: 219, column: 14, scope: !192)
!195 = !DILocation(line: 220, column: 15, scope: !196)
!196 = distinct !DILexicalBlock(scope: !192, file: !3, line: 220, column: 13)
!197 = !DILocation(line: 220, column: 21, scope: !196)
!198 = !DILocation(line: 220, column: 26, scope: !196)
!199 = !DILocation(line: 220, column: 47, scope: !196)
!200 = !DILocation(line: 220, column: 51, scope: !201)
!201 = !DILexicalBlockFile(scope: !196, file: !3, discriminator: 1)
!202 = !DILocation(line: 220, column: 57, scope: !201)
!203 = !DILocation(line: 220, column: 63, scope: !201)
!204 = !DILocation(line: 220, column: 13, scope: !205)
!205 = !DILexicalBlockFile(scope: !192, file: !3, discriminator: 1)
!206 = !DILocation(line: 222, column: 26, scope: !207)
!207 = distinct !DILexicalBlock(scope: !196, file: !3, line: 221, column: 9)
!208 = !DILocation(line: 222, column: 32, scope: !207)
!209 = !DILocation(line: 222, column: 13, scope: !207)
!210 = !DILocation(line: 223, column: 9, scope: !207)
!211 = !DILocation(line: 224, column: 15, scope: !212)
!212 = distinct !DILexicalBlock(scope: !192, file: !3, line: 224, column: 13)
!213 = !DILocation(line: 224, column: 21, scope: !212)
!214 = !DILocation(line: 224, column: 26, scope: !212)
!215 = !DILocation(line: 224, column: 47, scope: !212)
!216 = !DILocation(line: 224, column: 51, scope: !217)
!217 = !DILexicalBlockFile(scope: !212, file: !3, discriminator: 1)
!218 = !DILocation(line: 224, column: 57, scope: !217)
!219 = !DILocation(line: 224, column: 69, scope: !217)
!220 = !DILocation(line: 224, column: 13, scope: !205)
!221 = !DILocation(line: 226, column: 26, scope: !222)
!222 = distinct !DILexicalBlock(scope: !212, file: !3, line: 225, column: 9)
!223 = !DILocation(line: 226, column: 37, scope: !222)
!224 = !DILocation(line: 226, column: 43, scope: !222)
!225 = !DILocation(line: 226, column: 13, scope: !222)
!226 = !DILocation(line: 227, column: 9, scope: !222)
!227 = !DILocation(line: 228, column: 15, scope: !228)
!228 = distinct !DILexicalBlock(scope: !192, file: !3, line: 228, column: 13)
!229 = !DILocation(line: 228, column: 21, scope: !228)
!230 = !DILocation(line: 228, column: 26, scope: !228)
!231 = !DILocation(line: 228, column: 49, scope: !228)
!232 = !DILocation(line: 228, column: 53, scope: !233)
!233 = !DILexicalBlockFile(scope: !228, file: !3, discriminator: 1)
!234 = !DILocation(line: 228, column: 59, scope: !233)
!235 = !DILocation(line: 228, column: 66, scope: !233)
!236 = !DILocation(line: 228, column: 13, scope: !205)
!237 = !DILocation(line: 230, column: 26, scope: !238)
!238 = distinct !DILexicalBlock(scope: !228, file: !3, line: 229, column: 9)
!239 = !DILocation(line: 230, column: 37, scope: !238)
!240 = !DILocation(line: 230, column: 43, scope: !238)
!241 = !DILocation(line: 230, column: 13, scope: !238)
!242 = !DILocation(line: 231, column: 9, scope: !238)
!243 = !DILocation(line: 232, column: 22, scope: !192)
!244 = !DILocation(line: 232, column: 33, scope: !192)
!245 = !DILocation(line: 232, column: 9, scope: !192)
!246 = !DILocation(line: 233, column: 16, scope: !192)
!247 = !DILocation(line: 233, column: 14, scope: !192)
!248 = !DILocation(line: 217, column: 5, scope: !249)
!249 = !DILexicalBlockFile(scope: !179, file: !3, discriminator: 2)
!250 = distinct !{!250, !186, !251}
!251 = !DILocation(line: 234, column: 5, scope: !179)
!252 = !DILocation(line: 235, column: 1, scope: !179)
!253 = distinct !DISubprogram(name: "cJSON_SetNumberHelper", scope: !3, file: !3, line: 343, type: !254, isLocal: false, isDefinition: true, scopeLine: 344, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!254 = !DISubroutineType(types: !255)
!255 = !{!10, !22, !10}
!256 = !DILocalVariable(name: "object", arg: 1, scope: !253, file: !3, line: 343, type: !22)
!257 = !DILocation(line: 343, column: 51, scope: !253)
!258 = !DILocalVariable(name: "number", arg: 2, scope: !253, file: !3, line: 343, type: !10)
!259 = !DILocation(line: 343, column: 66, scope: !253)
!260 = !DILocation(line: 345, column: 9, scope: !261)
!261 = distinct !DILexicalBlock(scope: !253, file: !3, line: 345, column: 9)
!262 = !DILocation(line: 345, column: 16, scope: !261)
!263 = !DILocation(line: 345, column: 9, scope: !253)
!264 = !DILocation(line: 347, column: 9, scope: !265)
!265 = distinct !DILexicalBlock(scope: !261, file: !3, line: 346, column: 5)
!266 = !DILocation(line: 347, column: 17, scope: !265)
!267 = !DILocation(line: 347, column: 26, scope: !265)
!268 = !DILocation(line: 348, column: 5, scope: !265)
!269 = !DILocation(line: 349, column: 14, scope: !270)
!270 = distinct !DILexicalBlock(scope: !261, file: !3, line: 349, column: 14)
!271 = !DILocation(line: 349, column: 21, scope: !270)
!272 = !DILocation(line: 349, column: 14, scope: !261)
!273 = !DILocation(line: 351, column: 9, scope: !274)
!274 = distinct !DILexicalBlock(scope: !270, file: !3, line: 350, column: 5)
!275 = !DILocation(line: 351, column: 17, scope: !274)
!276 = !DILocation(line: 351, column: 26, scope: !274)
!277 = !DILocation(line: 352, column: 5, scope: !274)
!278 = !DILocation(line: 355, column: 33, scope: !279)
!279 = distinct !DILexicalBlock(scope: !270, file: !3, line: 354, column: 5)
!280 = !DILocation(line: 355, column: 28, scope: !279)
!281 = !DILocation(line: 355, column: 9, scope: !279)
!282 = !DILocation(line: 355, column: 17, scope: !279)
!283 = !DILocation(line: 355, column: 26, scope: !279)
!284 = !DILocation(line: 358, column: 34, scope: !253)
!285 = !DILocation(line: 358, column: 12, scope: !253)
!286 = !DILocation(line: 358, column: 20, scope: !253)
!287 = !DILocation(line: 358, column: 32, scope: !253)
!288 = !DILocation(line: 358, column: 5, scope: !253)
!289 = distinct !DISubprogram(name: "cJSON_ParseWithOpts", scope: !3, file: !3, line: 1000, type: !290, isLocal: false, isDefinition: true, scopeLine: 1001, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!290 = !DISubroutineType(types: !291)
!291 = !{!22, !6, !292, !16}
!292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!293 = !DILocalVariable(name: "value", arg: 1, scope: !289, file: !3, line: 1000, type: !6)
!294 = !DILocation(line: 1000, column: 55, scope: !289)
!295 = !DILocalVariable(name: "return_parse_end", arg: 2, scope: !289, file: !3, line: 1000, type: !292)
!296 = !DILocation(line: 1000, column: 75, scope: !289)
!297 = !DILocalVariable(name: "require_null_terminated", arg: 3, scope: !289, file: !3, line: 1000, type: !16)
!298 = !DILocation(line: 1000, column: 104, scope: !289)
!299 = !DILocalVariable(name: "buffer", scope: !289, file: !3, line: 1002, type: !300)
!300 = !DIDerivedType(tag: DW_TAG_typedef, name: "parse_buffer", file: !3, line: 255, baseType: !301)
!301 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 248, size: 448, elements: !302)
!302 = !{!303, !304, !305, !306, !307}
!303 = !DIDerivedType(tag: DW_TAG_member, name: "content", scope: !301, file: !3, line: 250, baseType: !12, size: 64)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !301, file: !3, line: 251, baseType: !19, size: 64, offset: 64)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !301, file: !3, line: 252, baseType: !19, size: 64, offset: 128)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !301, file: !3, line: 253, baseType: !19, size: 64, offset: 192)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "hooks", scope: !301, file: !3, line: 254, baseType: !48, size: 192, offset: 256)
!308 = !DILocation(line: 1002, column: 18, scope: !289)
!309 = !DILocalVariable(name: "item", scope: !289, file: !3, line: 1003, type: !22)
!310 = !DILocation(line: 1003, column: 12, scope: !289)
!311 = !DILocation(line: 1006, column: 23, scope: !289)
!312 = !DILocation(line: 1007, column: 27, scope: !289)
!313 = !DILocation(line: 1009, column: 9, scope: !314)
!314 = distinct !DILexicalBlock(scope: !289, file: !3, line: 1009, column: 9)
!315 = !DILocation(line: 1009, column: 15, scope: !314)
!316 = !DILocation(line: 1009, column: 9, scope: !289)
!317 = !DILocation(line: 1011, column: 9, scope: !318)
!318 = distinct !DILexicalBlock(scope: !314, file: !3, line: 1010, column: 5)
!319 = !DILocation(line: 1014, column: 44, scope: !289)
!320 = !DILocation(line: 1014, column: 12, scope: !289)
!321 = !DILocation(line: 1014, column: 20, scope: !289)
!322 = !DILocation(line: 1015, column: 41, scope: !289)
!323 = !DILocation(line: 1015, column: 21, scope: !289)
!324 = !DILocation(line: 1015, column: 48, scope: !289)
!325 = !DILocation(line: 1015, column: 12, scope: !289)
!326 = !DILocation(line: 1015, column: 19, scope: !289)
!327 = !DILocation(line: 1016, column: 12, scope: !289)
!328 = !DILocation(line: 1016, column: 19, scope: !289)
!329 = !DILocation(line: 1017, column: 12, scope: !289)
!330 = !DILocation(line: 1017, column: 20, scope: !289)
!331 = !DILocation(line: 1019, column: 12, scope: !289)
!332 = !DILocation(line: 1019, column: 10, scope: !289)
!333 = !DILocation(line: 1020, column: 9, scope: !334)
!334 = distinct !DILexicalBlock(scope: !289, file: !3, line: 1020, column: 9)
!335 = !DILocation(line: 1020, column: 14, scope: !334)
!336 = !DILocation(line: 1020, column: 9, scope: !289)
!337 = !DILocation(line: 1022, column: 9, scope: !338)
!338 = distinct !DILexicalBlock(scope: !334, file: !3, line: 1021, column: 5)
!339 = !DILocation(line: 1025, column: 22, scope: !340)
!340 = distinct !DILexicalBlock(scope: !289, file: !3, line: 1025, column: 9)
!341 = !DILocation(line: 1025, column: 51, scope: !340)
!342 = !DILocation(line: 1025, column: 28, scope: !343)
!343 = !DILexicalBlockFile(scope: !340, file: !3, discriminator: 1)
!344 = !DILocation(line: 1025, column: 10, scope: !345)
!345 = !DILexicalBlockFile(scope: !340, file: !3, discriminator: 2)
!346 = !DILocation(line: 1025, column: 10, scope: !340)
!347 = !DILocation(line: 1025, column: 9, scope: !289)
!348 = !DILocation(line: 1028, column: 9, scope: !349)
!349 = distinct !DILexicalBlock(scope: !340, file: !3, line: 1026, column: 5)
!350 = !DILocation(line: 1032, column: 9, scope: !351)
!351 = distinct !DILexicalBlock(scope: !289, file: !3, line: 1032, column: 9)
!352 = !DILocation(line: 1032, column: 9, scope: !289)
!353 = !DILocation(line: 1034, column: 9, scope: !354)
!354 = distinct !DILexicalBlock(scope: !351, file: !3, line: 1033, column: 5)
!355 = !DILocation(line: 1035, column: 21, scope: !356)
!356 = distinct !DILexicalBlock(scope: !354, file: !3, line: 1035, column: 13)
!357 = !DILocation(line: 1035, column: 38, scope: !356)
!358 = !DILocation(line: 1035, column: 28, scope: !356)
!359 = !DILocation(line: 1035, column: 46, scope: !356)
!360 = !DILocation(line: 1035, column: 49, scope: !361)
!361 = !DILexicalBlockFile(scope: !356, file: !3, discriminator: 1)
!362 = !DILocation(line: 1035, column: 78, scope: !361)
!363 = !DILocation(line: 1035, column: 13, scope: !364)
!364 = !DILexicalBlockFile(scope: !354, file: !3, discriminator: 1)
!365 = !DILocation(line: 1037, column: 13, scope: !366)
!366 = distinct !DILexicalBlock(scope: !356, file: !3, line: 1036, column: 9)
!367 = !DILocation(line: 1039, column: 5, scope: !354)
!368 = !DILocation(line: 1040, column: 9, scope: !369)
!369 = distinct !DILexicalBlock(scope: !289, file: !3, line: 1040, column: 9)
!370 = !DILocation(line: 1040, column: 9, scope: !289)
!371 = !DILocation(line: 1042, column: 42, scope: !372)
!372 = distinct !DILexicalBlock(scope: !369, file: !3, line: 1041, column: 5)
!373 = !DILocation(line: 1042, column: 10, scope: !372)
!374 = !DILocation(line: 1042, column: 27, scope: !372)
!375 = !DILocation(line: 1043, column: 5, scope: !372)
!376 = !DILocation(line: 1045, column: 12, scope: !289)
!377 = !DILocation(line: 1045, column: 5, scope: !289)
!378 = !DILocation(line: 1048, column: 9, scope: !379)
!379 = distinct !DILexicalBlock(scope: !289, file: !3, line: 1048, column: 9)
!380 = !DILocation(line: 1048, column: 14, scope: !379)
!381 = !DILocation(line: 1048, column: 9, scope: !289)
!382 = !DILocation(line: 1050, column: 22, scope: !383)
!383 = distinct !DILexicalBlock(scope: !379, file: !3, line: 1049, column: 5)
!384 = !DILocation(line: 1050, column: 9, scope: !383)
!385 = !DILocation(line: 1051, column: 5, scope: !383)
!386 = !DILocation(line: 1053, column: 9, scope: !387)
!387 = distinct !DILexicalBlock(scope: !289, file: !3, line: 1053, column: 9)
!388 = !DILocation(line: 1053, column: 15, scope: !387)
!389 = !DILocation(line: 1053, column: 9, scope: !289)
!390 = !DILocalVariable(name: "local_error", scope: !391, file: !3, line: 1055, type: !75)
!391 = distinct !DILexicalBlock(scope: !387, file: !3, line: 1054, column: 5)
!392 = !DILocation(line: 1055, column: 15, scope: !391)
!393 = !DILocation(line: 1056, column: 50, scope: !391)
!394 = !DILocation(line: 1056, column: 21, scope: !391)
!395 = !DILocation(line: 1056, column: 26, scope: !391)
!396 = !DILocation(line: 1057, column: 21, scope: !391)
!397 = !DILocation(line: 1057, column: 30, scope: !391)
!398 = !DILocation(line: 1059, column: 20, scope: !399)
!399 = distinct !DILexicalBlock(scope: !391, file: !3, line: 1059, column: 13)
!400 = !DILocation(line: 1059, column: 36, scope: !399)
!401 = !DILocation(line: 1059, column: 27, scope: !399)
!402 = !DILocation(line: 1059, column: 13, scope: !391)
!403 = !DILocation(line: 1061, column: 43, scope: !404)
!404 = distinct !DILexicalBlock(scope: !399, file: !3, line: 1060, column: 9)
!405 = !DILocation(line: 1061, column: 25, scope: !404)
!406 = !DILocation(line: 1061, column: 34, scope: !404)
!407 = !DILocation(line: 1062, column: 9, scope: !404)
!408 = !DILocation(line: 1063, column: 25, scope: !409)
!409 = distinct !DILexicalBlock(scope: !399, file: !3, line: 1063, column: 18)
!410 = !DILocation(line: 1063, column: 32, scope: !409)
!411 = !DILocation(line: 1063, column: 18, scope: !399)
!412 = !DILocation(line: 1065, column: 43, scope: !413)
!413 = distinct !DILexicalBlock(scope: !409, file: !3, line: 1064, column: 9)
!414 = !DILocation(line: 1065, column: 50, scope: !413)
!415 = !DILocation(line: 1065, column: 25, scope: !413)
!416 = !DILocation(line: 1065, column: 34, scope: !413)
!417 = !DILocation(line: 1066, column: 9, scope: !413)
!418 = !DILocation(line: 1068, column: 13, scope: !419)
!419 = distinct !DILexicalBlock(scope: !391, file: !3, line: 1068, column: 13)
!420 = !DILocation(line: 1068, column: 30, scope: !419)
!421 = !DILocation(line: 1068, column: 13, scope: !391)
!422 = !DILocation(line: 1070, column: 58, scope: !423)
!423 = distinct !DILexicalBlock(scope: !419, file: !3, line: 1069, column: 9)
!424 = !DILocation(line: 1070, column: 77, scope: !423)
!425 = !DILocation(line: 1070, column: 63, scope: !423)
!426 = !DILocation(line: 1070, column: 14, scope: !423)
!427 = !DILocation(line: 1070, column: 31, scope: !423)
!428 = !DILocation(line: 1071, column: 9, scope: !423)
!429 = !DILocation(line: 1073, column: 24, scope: !391)
!430 = !DILocation(line: 1074, column: 5, scope: !391)
!431 = !DILocation(line: 1076, column: 5, scope: !289)
!432 = !DILocation(line: 1077, column: 1, scope: !289)
!433 = distinct !DISubprogram(name: "cJSON_New_Item", scope: !3, file: !3, line: 202, type: !434, isLocal: true, isDefinition: true, scopeLine: 203, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!434 = !DISubroutineType(types: !435)
!435 = !{!22, !71}
!436 = !DILocalVariable(name: "hooks", arg: 1, scope: !433, file: !3, line: 202, type: !71)
!437 = !DILocation(line: 202, column: 59, scope: !433)
!438 = !DILocalVariable(name: "node", scope: !433, file: !3, line: 204, type: !22)
!439 = !DILocation(line: 204, column: 12, scope: !433)
!440 = !DILocation(line: 204, column: 27, scope: !433)
!441 = !DILocation(line: 204, column: 34, scope: !433)
!442 = !DILocation(line: 204, column: 19, scope: !433)
!443 = !DILocation(line: 205, column: 9, scope: !444)
!444 = distinct !DILexicalBlock(scope: !433, file: !3, line: 205, column: 9)
!445 = !DILocation(line: 205, column: 9, scope: !433)
!446 = !DILocation(line: 207, column: 16, scope: !447)
!447 = distinct !DILexicalBlock(scope: !444, file: !3, line: 206, column: 5)
!448 = !DILocation(line: 207, column: 9, scope: !447)
!449 = !DILocation(line: 208, column: 5, scope: !447)
!450 = !DILocation(line: 210, column: 12, scope: !433)
!451 = !DILocation(line: 210, column: 5, scope: !433)
!452 = distinct !DISubprogram(name: "parse_value", scope: !3, file: !3, line: 1212, type: !453, isLocal: true, isDefinition: true, scopeLine: 1213, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!453 = !DISubroutineType(types: !454)
!454 = !{!16, !455, !456}
!455 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !22)
!456 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !457)
!457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !300, size: 64)
!458 = !DILocalVariable(name: "item", arg: 1, scope: !452, file: !3, line: 1212, type: !455)
!459 = !DILocation(line: 1212, column: 45, scope: !452)
!460 = !DILocalVariable(name: "input_buffer", arg: 2, scope: !452, file: !3, line: 1212, type: !456)
!461 = !DILocation(line: 1212, column: 72, scope: !452)
!462 = !DILocation(line: 1214, column: 10, scope: !463)
!463 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1214, column: 9)
!464 = !DILocation(line: 1214, column: 23, scope: !463)
!465 = !DILocation(line: 1214, column: 32, scope: !463)
!466 = !DILocation(line: 1214, column: 36, scope: !467)
!467 = !DILexicalBlockFile(scope: !463, file: !3, discriminator: 1)
!468 = !DILocation(line: 1214, column: 50, scope: !467)
!469 = !DILocation(line: 1214, column: 58, scope: !467)
!470 = !DILocation(line: 1214, column: 9, scope: !471)
!471 = !DILexicalBlockFile(scope: !452, file: !3, discriminator: 1)
!472 = !DILocation(line: 1216, column: 9, scope: !473)
!473 = distinct !DILexicalBlock(scope: !463, file: !3, line: 1215, column: 5)
!474 = !DILocation(line: 1221, column: 9, scope: !475)
!475 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1221, column: 9)
!476 = !DILocation(line: 1221, column: 9, scope: !477)
!477 = !DILexicalBlockFile(scope: !475, file: !3, discriminator: 1)
!478 = !DILocation(line: 1221, column: 35, scope: !477)
!479 = !DILocation(line: 1221, column: 60, scope: !480)
!480 = !DILexicalBlockFile(scope: !475, file: !3, discriminator: 2)
!481 = !DILocation(line: 1221, column: 39, scope: !480)
!482 = !DILocation(line: 1221, column: 103, scope: !480)
!483 = !DILocation(line: 1221, column: 9, scope: !484)
!484 = !DILexicalBlockFile(scope: !452, file: !3, discriminator: 2)
!485 = !DILocation(line: 1223, column: 9, scope: !486)
!486 = distinct !DILexicalBlock(scope: !475, file: !3, line: 1222, column: 5)
!487 = !DILocation(line: 1223, column: 15, scope: !486)
!488 = !DILocation(line: 1223, column: 20, scope: !486)
!489 = !DILocation(line: 1224, column: 9, scope: !486)
!490 = !DILocation(line: 1224, column: 23, scope: !486)
!491 = !DILocation(line: 1224, column: 30, scope: !486)
!492 = !DILocation(line: 1225, column: 9, scope: !486)
!493 = !DILocation(line: 1228, column: 9, scope: !494)
!494 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1228, column: 9)
!495 = !DILocation(line: 1228, column: 9, scope: !496)
!496 = !DILexicalBlockFile(scope: !494, file: !3, discriminator: 1)
!497 = !DILocation(line: 1228, column: 35, scope: !496)
!498 = !DILocation(line: 1228, column: 60, scope: !499)
!499 = !DILexicalBlockFile(scope: !494, file: !3, discriminator: 2)
!500 = !DILocation(line: 1228, column: 39, scope: !499)
!501 = !DILocation(line: 1228, column: 104, scope: !499)
!502 = !DILocation(line: 1228, column: 9, scope: !484)
!503 = !DILocation(line: 1230, column: 9, scope: !504)
!504 = distinct !DILexicalBlock(scope: !494, file: !3, line: 1229, column: 5)
!505 = !DILocation(line: 1230, column: 15, scope: !504)
!506 = !DILocation(line: 1230, column: 20, scope: !504)
!507 = !DILocation(line: 1231, column: 9, scope: !504)
!508 = !DILocation(line: 1231, column: 23, scope: !504)
!509 = !DILocation(line: 1231, column: 30, scope: !504)
!510 = !DILocation(line: 1232, column: 9, scope: !504)
!511 = !DILocation(line: 1235, column: 9, scope: !512)
!512 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1235, column: 9)
!513 = !DILocation(line: 1235, column: 9, scope: !514)
!514 = !DILexicalBlockFile(scope: !512, file: !3, discriminator: 1)
!515 = !DILocation(line: 1235, column: 35, scope: !514)
!516 = !DILocation(line: 1235, column: 60, scope: !517)
!517 = !DILexicalBlockFile(scope: !512, file: !3, discriminator: 2)
!518 = !DILocation(line: 1235, column: 39, scope: !517)
!519 = !DILocation(line: 1235, column: 103, scope: !517)
!520 = !DILocation(line: 1235, column: 9, scope: !484)
!521 = !DILocation(line: 1237, column: 9, scope: !522)
!522 = distinct !DILexicalBlock(scope: !512, file: !3, line: 1236, column: 5)
!523 = !DILocation(line: 1237, column: 15, scope: !522)
!524 = !DILocation(line: 1237, column: 20, scope: !522)
!525 = !DILocation(line: 1238, column: 9, scope: !522)
!526 = !DILocation(line: 1238, column: 15, scope: !522)
!527 = !DILocation(line: 1238, column: 24, scope: !522)
!528 = !DILocation(line: 1239, column: 9, scope: !522)
!529 = !DILocation(line: 1239, column: 23, scope: !522)
!530 = !DILocation(line: 1239, column: 30, scope: !522)
!531 = !DILocation(line: 1240, column: 9, scope: !522)
!532 = !DILocation(line: 1243, column: 9, scope: !533)
!533 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1243, column: 9)
!534 = !DILocation(line: 1243, column: 9, scope: !535)
!535 = !DILexicalBlockFile(scope: !533, file: !3, discriminator: 1)
!536 = !DILocation(line: 1243, column: 46, scope: !535)
!537 = !DILocation(line: 1243, column: 50, scope: !538)
!538 = !DILexicalBlockFile(scope: !533, file: !3, discriminator: 2)
!539 = !DILocation(line: 1243, column: 84, scope: !538)
!540 = !DILocation(line: 1243, column: 9, scope: !484)
!541 = !DILocation(line: 1245, column: 29, scope: !542)
!542 = distinct !DILexicalBlock(scope: !533, file: !3, line: 1244, column: 5)
!543 = !DILocation(line: 1245, column: 35, scope: !542)
!544 = !DILocation(line: 1245, column: 16, scope: !542)
!545 = !DILocation(line: 1245, column: 9, scope: !542)
!546 = !DILocation(line: 1248, column: 9, scope: !547)
!547 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1248, column: 9)
!548 = !DILocation(line: 1248, column: 9, scope: !549)
!549 = !DILexicalBlockFile(scope: !547, file: !3, discriminator: 1)
!550 = !DILocation(line: 1248, column: 46, scope: !549)
!551 = !DILocation(line: 1248, column: 51, scope: !552)
!552 = !DILexicalBlockFile(scope: !547, file: !3, discriminator: 2)
!553 = !DILocation(line: 1248, column: 85, scope: !552)
!554 = !DILocation(line: 1248, column: 93, scope: !552)
!555 = !DILocation(line: 1248, column: 98, scope: !556)
!556 = !DILexicalBlockFile(scope: !547, file: !3, discriminator: 3)
!557 = !DILocation(line: 1248, column: 132, scope: !556)
!558 = !DILocation(line: 1248, column: 140, scope: !556)
!559 = !DILocation(line: 1248, column: 144, scope: !560)
!560 = !DILexicalBlockFile(scope: !547, file: !3, discriminator: 4)
!561 = !DILocation(line: 1248, column: 178, scope: !560)
!562 = !DILocation(line: 1248, column: 9, scope: !563)
!563 = !DILexicalBlockFile(scope: !452, file: !3, discriminator: 4)
!564 = !DILocation(line: 1250, column: 29, scope: !565)
!565 = distinct !DILexicalBlock(scope: !547, file: !3, line: 1249, column: 5)
!566 = !DILocation(line: 1250, column: 35, scope: !565)
!567 = !DILocation(line: 1250, column: 16, scope: !565)
!568 = !DILocation(line: 1250, column: 9, scope: !565)
!569 = !DILocation(line: 1253, column: 9, scope: !570)
!570 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1253, column: 9)
!571 = !DILocation(line: 1253, column: 9, scope: !572)
!572 = !DILexicalBlockFile(scope: !570, file: !3, discriminator: 1)
!573 = !DILocation(line: 1253, column: 46, scope: !572)
!574 = !DILocation(line: 1253, column: 50, scope: !575)
!575 = !DILexicalBlockFile(scope: !570, file: !3, discriminator: 2)
!576 = !DILocation(line: 1253, column: 84, scope: !575)
!577 = !DILocation(line: 1253, column: 9, scope: !484)
!578 = !DILocation(line: 1255, column: 28, scope: !579)
!579 = distinct !DILexicalBlock(scope: !570, file: !3, line: 1254, column: 5)
!580 = !DILocation(line: 1255, column: 34, scope: !579)
!581 = !DILocation(line: 1255, column: 16, scope: !579)
!582 = !DILocation(line: 1255, column: 9, scope: !579)
!583 = !DILocation(line: 1258, column: 9, scope: !584)
!584 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1258, column: 9)
!585 = !DILocation(line: 1258, column: 9, scope: !586)
!586 = !DILexicalBlockFile(scope: !584, file: !3, discriminator: 1)
!587 = !DILocation(line: 1258, column: 46, scope: !586)
!588 = !DILocation(line: 1258, column: 50, scope: !589)
!589 = !DILexicalBlockFile(scope: !584, file: !3, discriminator: 2)
!590 = !DILocation(line: 1258, column: 84, scope: !589)
!591 = !DILocation(line: 1258, column: 9, scope: !484)
!592 = !DILocation(line: 1260, column: 29, scope: !593)
!593 = distinct !DILexicalBlock(scope: !584, file: !3, line: 1259, column: 5)
!594 = !DILocation(line: 1260, column: 35, scope: !593)
!595 = !DILocation(line: 1260, column: 16, scope: !593)
!596 = !DILocation(line: 1260, column: 9, scope: !593)
!597 = !DILocation(line: 1263, column: 5, scope: !452)
!598 = !DILocation(line: 1264, column: 1, scope: !452)
!599 = distinct !DISubprogram(name: "buffer_skip_whitespace", scope: !3, file: !3, line: 963, type: !600, isLocal: true, isDefinition: true, scopeLine: 964, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!600 = !DISubroutineType(types: !601)
!601 = !{!457, !456}
!602 = !DILocalVariable(name: "buffer", arg: 1, scope: !599, file: !3, line: 963, type: !456)
!603 = !DILocation(line: 963, column: 66, scope: !599)
!604 = !DILocation(line: 965, column: 10, scope: !605)
!605 = distinct !DILexicalBlock(scope: !599, file: !3, line: 965, column: 9)
!606 = !DILocation(line: 965, column: 17, scope: !605)
!607 = !DILocation(line: 965, column: 26, scope: !605)
!608 = !DILocation(line: 965, column: 30, scope: !609)
!609 = !DILexicalBlockFile(scope: !605, file: !3, discriminator: 1)
!610 = !DILocation(line: 965, column: 38, scope: !609)
!611 = !DILocation(line: 965, column: 46, scope: !609)
!612 = !DILocation(line: 965, column: 9, scope: !613)
!613 = !DILexicalBlockFile(scope: !599, file: !3, discriminator: 1)
!614 = !DILocation(line: 967, column: 9, scope: !615)
!615 = distinct !DILexicalBlock(scope: !605, file: !3, line: 966, column: 5)
!616 = !DILocation(line: 970, column: 5, scope: !599)
!617 = !DILocation(line: 970, column: 12, scope: !613)
!618 = !DILocation(line: 970, column: 12, scope: !619)
!619 = !DILexicalBlockFile(scope: !599, file: !3, discriminator: 2)
!620 = !DILocation(line: 970, column: 43, scope: !619)
!621 = !DILocation(line: 970, column: 47, scope: !622)
!622 = !DILexicalBlockFile(scope: !599, file: !3, discriminator: 3)
!623 = !DILocation(line: 970, column: 75, scope: !622)
!624 = !DILocation(line: 970, column: 5, scope: !625)
!625 = !DILexicalBlockFile(scope: !599, file: !3, discriminator: 4)
!626 = !DILocation(line: 972, column: 8, scope: !627)
!627 = distinct !DILexicalBlock(scope: !599, file: !3, line: 971, column: 5)
!628 = !DILocation(line: 972, column: 16, scope: !627)
!629 = !DILocation(line: 972, column: 22, scope: !627)
!630 = !DILocation(line: 970, column: 5, scope: !631)
!631 = !DILexicalBlockFile(scope: !599, file: !3, discriminator: 5)
!632 = distinct !{!632, !616, !633}
!633 = !DILocation(line: 973, column: 5, scope: !599)
!634 = !DILocation(line: 975, column: 9, scope: !635)
!635 = distinct !DILexicalBlock(scope: !599, file: !3, line: 975, column: 9)
!636 = !DILocation(line: 975, column: 17, scope: !635)
!637 = !DILocation(line: 975, column: 27, scope: !635)
!638 = !DILocation(line: 975, column: 35, scope: !635)
!639 = !DILocation(line: 975, column: 24, scope: !635)
!640 = !DILocation(line: 975, column: 9, scope: !599)
!641 = !DILocation(line: 977, column: 9, scope: !642)
!642 = distinct !DILexicalBlock(scope: !635, file: !3, line: 976, column: 5)
!643 = !DILocation(line: 977, column: 17, scope: !642)
!644 = !DILocation(line: 977, column: 23, scope: !642)
!645 = !DILocation(line: 978, column: 5, scope: !642)
!646 = !DILocation(line: 980, column: 12, scope: !599)
!647 = !DILocation(line: 980, column: 5, scope: !599)
!648 = !DILocation(line: 981, column: 1, scope: !599)
!649 = distinct !DISubprogram(name: "skip_utf8_bom", scope: !3, file: !3, line: 984, type: !600, isLocal: true, isDefinition: true, scopeLine: 985, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!650 = !DILocalVariable(name: "buffer", arg: 1, scope: !649, file: !3, line: 984, type: !456)
!651 = !DILocation(line: 984, column: 57, scope: !649)
!652 = !DILocation(line: 986, column: 10, scope: !653)
!653 = distinct !DILexicalBlock(scope: !649, file: !3, line: 986, column: 9)
!654 = !DILocation(line: 986, column: 17, scope: !653)
!655 = !DILocation(line: 986, column: 26, scope: !653)
!656 = !DILocation(line: 986, column: 30, scope: !657)
!657 = !DILexicalBlockFile(scope: !653, file: !3, discriminator: 1)
!658 = !DILocation(line: 986, column: 38, scope: !657)
!659 = !DILocation(line: 986, column: 46, scope: !657)
!660 = !DILocation(line: 986, column: 55, scope: !657)
!661 = !DILocation(line: 986, column: 59, scope: !662)
!662 = !DILexicalBlockFile(scope: !653, file: !3, discriminator: 2)
!663 = !DILocation(line: 986, column: 67, scope: !662)
!664 = !DILocation(line: 986, column: 74, scope: !662)
!665 = !DILocation(line: 986, column: 9, scope: !666)
!666 = !DILexicalBlockFile(scope: !649, file: !3, discriminator: 2)
!667 = !DILocation(line: 988, column: 9, scope: !668)
!668 = distinct !DILexicalBlock(scope: !653, file: !3, line: 987, column: 5)
!669 = !DILocation(line: 991, column: 9, scope: !670)
!670 = distinct !DILexicalBlock(scope: !649, file: !3, line: 991, column: 9)
!671 = !DILocation(line: 991, column: 9, scope: !672)
!672 = !DILexicalBlockFile(scope: !670, file: !3, discriminator: 1)
!673 = !DILocation(line: 991, column: 40, scope: !672)
!674 = !DILocation(line: 991, column: 65, scope: !675)
!675 = !DILexicalBlockFile(scope: !670, file: !3, discriminator: 2)
!676 = !DILocation(line: 991, column: 44, scope: !675)
!677 = !DILocation(line: 991, column: 110, scope: !675)
!678 = !DILocation(line: 991, column: 9, scope: !666)
!679 = !DILocation(line: 993, column: 9, scope: !680)
!680 = distinct !DILexicalBlock(scope: !670, file: !3, line: 992, column: 5)
!681 = !DILocation(line: 993, column: 17, scope: !680)
!682 = !DILocation(line: 993, column: 24, scope: !680)
!683 = !DILocation(line: 994, column: 5, scope: !680)
!684 = !DILocation(line: 996, column: 12, scope: !649)
!685 = !DILocation(line: 996, column: 5, scope: !649)
!686 = !DILocation(line: 997, column: 1, scope: !649)
!687 = distinct !DISubprogram(name: "cJSON_Parse", scope: !3, file: !3, line: 1080, type: !688, isLocal: false, isDefinition: true, scopeLine: 1081, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!688 = !DISubroutineType(types: !689)
!689 = !{!22, !6}
!690 = !DILocalVariable(name: "value", arg: 1, scope: !687, file: !3, line: 1080, type: !6)
!691 = !DILocation(line: 1080, column: 47, scope: !687)
!692 = !DILocation(line: 1082, column: 32, scope: !687)
!693 = !DILocation(line: 1082, column: 12, scope: !687)
!694 = !DILocation(line: 1082, column: 5, scope: !687)
!695 = distinct !DISubprogram(name: "cJSON_Print", scope: !3, file: !3, line: 1152, type: !696, isLocal: false, isDefinition: true, scopeLine: 1153, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!696 = !DISubroutineType(types: !697)
!697 = !{!15, !69}
!698 = !DILocalVariable(name: "item", arg: 1, scope: !695, file: !3, line: 1152, type: !69)
!699 = !DILocation(line: 1152, column: 47, scope: !695)
!700 = !DILocation(line: 1154, column: 25, scope: !695)
!701 = !DILocation(line: 1154, column: 19, scope: !695)
!702 = !DILocation(line: 1154, column: 5, scope: !695)
!703 = !DILocalVariable(name: "item", arg: 1, scope: !65, file: !3, line: 1087, type: !68)
!704 = !DILocation(line: 1087, column: 49, scope: !65)
!705 = !DILocalVariable(name: "format", arg: 2, scope: !65, file: !3, line: 1087, type: !16)
!706 = !DILocation(line: 1087, column: 66, scope: !65)
!707 = !DILocalVariable(name: "hooks", arg: 3, scope: !65, file: !3, line: 1087, type: !71)
!708 = !DILocation(line: 1087, column: 103, scope: !65)
!709 = !DILocalVariable(name: "buffer", scope: !65, file: !3, line: 1090, type: !710)
!710 = !DICompositeType(tag: DW_TAG_array_type, baseType: !711, size: 512, elements: !721)
!711 = !DIDerivedType(tag: DW_TAG_typedef, name: "printbuffer", file: !3, line: 370, baseType: !712)
!712 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 361, size: 512, elements: !713)
!713 = !{!714, !715, !716, !717, !718, !719, !720}
!714 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !712, file: !3, line: 363, baseType: !18, size: 64)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !712, file: !3, line: 364, baseType: !19, size: 64, offset: 64)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !712, file: !3, line: 365, baseType: !19, size: 64, offset: 128)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !712, file: !3, line: 366, baseType: !19, size: 64, offset: 192)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "noalloc", scope: !712, file: !3, line: 367, baseType: !16, size: 32, offset: 256)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !712, file: !3, line: 368, baseType: !16, size: 32, offset: 288)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "hooks", scope: !712, file: !3, line: 369, baseType: !48, size: 192, offset: 320)
!721 = !{!722}
!722 = !DISubrange(count: 1)
!723 = !DILocation(line: 1090, column: 17, scope: !65)
!724 = !DILocalVariable(name: "printed", scope: !65, file: !3, line: 1091, type: !18)
!725 = !DILocation(line: 1091, column: 20, scope: !65)
!726 = !DILocation(line: 1093, column: 5, scope: !65)
!727 = !DILocation(line: 1096, column: 39, scope: !65)
!728 = !DILocation(line: 1096, column: 46, scope: !65)
!729 = !DILocation(line: 1096, column: 13, scope: !65)
!730 = !DILocation(line: 1096, column: 20, scope: !65)
!731 = !DILocation(line: 1097, column: 13, scope: !65)
!732 = !DILocation(line: 1097, column: 20, scope: !65)
!733 = !DILocation(line: 1098, column: 22, scope: !65)
!734 = !DILocation(line: 1098, column: 13, scope: !65)
!735 = !DILocation(line: 1098, column: 20, scope: !65)
!736 = !DILocation(line: 1099, column: 13, scope: !65)
!737 = !DILocation(line: 1099, column: 22, scope: !65)
!738 = !DILocation(line: 1099, column: 21, scope: !65)
!739 = !DILocation(line: 1100, column: 17, scope: !740)
!740 = distinct !DILexicalBlock(scope: !65, file: !3, line: 1100, column: 9)
!741 = !DILocation(line: 1100, column: 24, scope: !740)
!742 = !DILocation(line: 1100, column: 9, scope: !65)
!743 = !DILocation(line: 1102, column: 9, scope: !744)
!744 = distinct !DILexicalBlock(scope: !740, file: !3, line: 1101, column: 5)
!745 = !DILocation(line: 1106, column: 22, scope: !746)
!746 = distinct !DILexicalBlock(scope: !65, file: !3, line: 1106, column: 9)
!747 = !DILocation(line: 1106, column: 28, scope: !746)
!748 = !DILocation(line: 1106, column: 10, scope: !746)
!749 = !DILocation(line: 1106, column: 9, scope: !65)
!750 = !DILocation(line: 1108, column: 9, scope: !751)
!751 = distinct !DILexicalBlock(scope: !746, file: !3, line: 1107, column: 5)
!752 = !DILocation(line: 1110, column: 19, scope: !65)
!753 = !DILocation(line: 1110, column: 5, scope: !65)
!754 = !DILocation(line: 1113, column: 9, scope: !755)
!755 = distinct !DILexicalBlock(scope: !65, file: !3, line: 1113, column: 9)
!756 = !DILocation(line: 1113, column: 16, scope: !755)
!757 = !DILocation(line: 1113, column: 27, scope: !755)
!758 = !DILocation(line: 1113, column: 9, scope: !65)
!759 = !DILocation(line: 1115, column: 36, scope: !760)
!760 = distinct !DILexicalBlock(scope: !755, file: !3, line: 1114, column: 5)
!761 = !DILocation(line: 1115, column: 43, scope: !760)
!762 = !DILocation(line: 1115, column: 62, scope: !760)
!763 = !DILocation(line: 1115, column: 78, scope: !760)
!764 = !DILocation(line: 1115, column: 85, scope: !760)
!765 = !DILocation(line: 1115, column: 17, scope: !760)
!766 = !DILocation(line: 1116, column: 13, scope: !767)
!767 = distinct !DILexicalBlock(scope: !760, file: !3, line: 1116, column: 13)
!768 = !DILocation(line: 1116, column: 21, scope: !767)
!769 = !DILocation(line: 1116, column: 13, scope: !760)
!770 = !DILocation(line: 1117, column: 13, scope: !771)
!771 = distinct !DILexicalBlock(scope: !767, file: !3, line: 1116, column: 30)
!772 = !DILocation(line: 1119, column: 17, scope: !760)
!773 = !DILocation(line: 1119, column: 24, scope: !760)
!774 = !DILocation(line: 1120, column: 5, scope: !760)
!775 = !DILocation(line: 1123, column: 36, scope: !776)
!776 = distinct !DILexicalBlock(scope: !755, file: !3, line: 1122, column: 5)
!777 = !DILocation(line: 1123, column: 43, scope: !776)
!778 = !DILocation(line: 1123, column: 60, scope: !776)
!779 = !DILocation(line: 1123, column: 67, scope: !776)
!780 = !DILocation(line: 1123, column: 17, scope: !776)
!781 = !DILocation(line: 1124, column: 13, scope: !782)
!782 = distinct !DILexicalBlock(scope: !776, file: !3, line: 1124, column: 13)
!783 = !DILocation(line: 1124, column: 21, scope: !782)
!784 = !DILocation(line: 1124, column: 13, scope: !776)
!785 = !DILocation(line: 1126, column: 13, scope: !786)
!786 = distinct !DILexicalBlock(scope: !782, file: !3, line: 1125, column: 9)
!787 = !DILocation(line: 1128, column: 16, scope: !776)
!788 = !DILocation(line: 1128, column: 33, scope: !776)
!789 = !DILocation(line: 1128, column: 41, scope: !776)
!790 = !DILocation(line: 1128, column: 41, scope: !791)
!791 = !DILexicalBlockFile(scope: !776, file: !3, discriminator: 1)
!792 = !DILocation(line: 1128, column: 41, scope: !793)
!793 = !DILexicalBlockFile(scope: !776, file: !3, discriminator: 2)
!794 = !DILocation(line: 1128, column: 41, scope: !795)
!795 = !DILexicalBlockFile(scope: !776, file: !3, discriminator: 3)
!796 = !DILocation(line: 1128, column: 9, scope: !776)
!797 = !DILocation(line: 1129, column: 9, scope: !776)
!798 = !DILocation(line: 1129, column: 25, scope: !776)
!799 = !DILocation(line: 1129, column: 33, scope: !776)
!800 = !DILocation(line: 1132, column: 9, scope: !776)
!801 = !DILocation(line: 1132, column: 16, scope: !776)
!802 = !DILocation(line: 1132, column: 35, scope: !776)
!803 = !DILocation(line: 1135, column: 12, scope: !65)
!804 = !DILocation(line: 1135, column: 5, scope: !65)
!805 = !DILocation(line: 1138, column: 17, scope: !806)
!806 = distinct !DILexicalBlock(scope: !65, file: !3, line: 1138, column: 9)
!807 = !DILocation(line: 1138, column: 24, scope: !806)
!808 = !DILocation(line: 1138, column: 9, scope: !65)
!809 = !DILocation(line: 1140, column: 9, scope: !810)
!810 = distinct !DILexicalBlock(scope: !806, file: !3, line: 1139, column: 5)
!811 = !DILocation(line: 1140, column: 16, scope: !810)
!812 = !DILocation(line: 1140, column: 35, scope: !810)
!813 = !DILocation(line: 1141, column: 5, scope: !810)
!814 = !DILocation(line: 1143, column: 9, scope: !815)
!815 = distinct !DILexicalBlock(scope: !65, file: !3, line: 1143, column: 9)
!816 = !DILocation(line: 1143, column: 17, scope: !815)
!817 = !DILocation(line: 1143, column: 9, scope: !65)
!818 = !DILocation(line: 1145, column: 9, scope: !819)
!819 = distinct !DILexicalBlock(scope: !815, file: !3, line: 1144, column: 5)
!820 = !DILocation(line: 1145, column: 16, scope: !819)
!821 = !DILocation(line: 1145, column: 27, scope: !819)
!822 = !DILocation(line: 1146, column: 5, scope: !819)
!823 = !DILocation(line: 1148, column: 5, scope: !65)
!824 = !DILocation(line: 1149, column: 1, scope: !65)
!825 = distinct !DISubprogram(name: "cJSON_PrintUnformatted", scope: !3, file: !3, line: 1157, type: !696, isLocal: false, isDefinition: true, scopeLine: 1158, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!826 = !DILocalVariable(name: "item", arg: 1, scope: !825, file: !3, line: 1157, type: !69)
!827 = !DILocation(line: 1157, column: 58, scope: !825)
!828 = !DILocation(line: 1159, column: 25, scope: !825)
!829 = !DILocation(line: 1159, column: 19, scope: !825)
!830 = !DILocation(line: 1159, column: 5, scope: !825)
!831 = distinct !DISubprogram(name: "cJSON_PrintBuffered", scope: !3, file: !3, line: 1162, type: !832, isLocal: false, isDefinition: true, scopeLine: 1163, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!832 = !DISubroutineType(types: !833)
!833 = !{!15, !69, !11, !16}
!834 = !DILocalVariable(name: "item", arg: 1, scope: !831, file: !3, line: 1162, type: !69)
!835 = !DILocation(line: 1162, column: 55, scope: !831)
!836 = !DILocalVariable(name: "prebuffer", arg: 2, scope: !831, file: !3, line: 1162, type: !11)
!837 = !DILocation(line: 1162, column: 65, scope: !831)
!838 = !DILocalVariable(name: "fmt", arg: 3, scope: !831, file: !3, line: 1162, type: !16)
!839 = !DILocation(line: 1162, column: 87, scope: !831)
!840 = !DILocalVariable(name: "p", scope: !831, file: !3, line: 1164, type: !711)
!841 = !DILocation(line: 1164, column: 17, scope: !831)
!842 = !DILocation(line: 1166, column: 9, scope: !843)
!843 = distinct !DILexicalBlock(scope: !831, file: !3, line: 1166, column: 9)
!844 = !DILocation(line: 1166, column: 19, scope: !843)
!845 = !DILocation(line: 1166, column: 9, scope: !831)
!846 = !DILocation(line: 1168, column: 9, scope: !847)
!847 = distinct !DILexicalBlock(scope: !843, file: !3, line: 1167, column: 5)
!848 = !DILocation(line: 1171, column: 45, scope: !831)
!849 = !DILocation(line: 1171, column: 62, scope: !831)
!850 = !DILocation(line: 1171, column: 54, scope: !831)
!851 = !DILocation(line: 1171, column: 32, scope: !831)
!852 = !DILocation(line: 1171, column: 7, scope: !831)
!853 = !DILocation(line: 1171, column: 14, scope: !831)
!854 = !DILocation(line: 1172, column: 12, scope: !855)
!855 = distinct !DILexicalBlock(scope: !831, file: !3, line: 1172, column: 9)
!856 = !DILocation(line: 1172, column: 10, scope: !855)
!857 = !DILocation(line: 1172, column: 9, scope: !831)
!858 = !DILocation(line: 1174, column: 9, scope: !859)
!859 = distinct !DILexicalBlock(scope: !855, file: !3, line: 1173, column: 5)
!860 = !DILocation(line: 1177, column: 24, scope: !831)
!861 = !DILocation(line: 1177, column: 16, scope: !831)
!862 = !DILocation(line: 1177, column: 7, scope: !831)
!863 = !DILocation(line: 1177, column: 14, scope: !831)
!864 = !DILocation(line: 1178, column: 7, scope: !831)
!865 = !DILocation(line: 1178, column: 14, scope: !831)
!866 = !DILocation(line: 1179, column: 7, scope: !831)
!867 = !DILocation(line: 1179, column: 15, scope: !831)
!868 = !DILocation(line: 1180, column: 16, scope: !831)
!869 = !DILocation(line: 1180, column: 7, scope: !831)
!870 = !DILocation(line: 1180, column: 14, scope: !831)
!871 = !DILocation(line: 1181, column: 7, scope: !831)
!872 = !DILocation(line: 1181, column: 15, scope: !831)
!873 = !DILocation(line: 1183, column: 22, scope: !874)
!874 = distinct !DILexicalBlock(scope: !831, file: !3, line: 1183, column: 9)
!875 = !DILocation(line: 1183, column: 10, scope: !874)
!876 = !DILocation(line: 1183, column: 9, scope: !831)
!877 = !DILocation(line: 1185, column: 22, scope: !878)
!878 = distinct !DILexicalBlock(scope: !874, file: !3, line: 1184, column: 5)
!879 = !DILocation(line: 1185, column: 35, scope: !878)
!880 = !DILocation(line: 1185, column: 9, scope: !878)
!881 = !DILocation(line: 1186, column: 9, scope: !878)
!882 = !DILocation(line: 1189, column: 21, scope: !831)
!883 = !DILocation(line: 1189, column: 5, scope: !831)
!884 = !DILocation(line: 1190, column: 1, scope: !831)
!885 = distinct !DISubprogram(name: "print_value", scope: !3, file: !3, line: 1267, type: !886, isLocal: true, isDefinition: true, scopeLine: 1268, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!886 = !DISubroutineType(types: !887)
!887 = !{!16, !68, !888}
!888 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !889)
!889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !711, size: 64)
!890 = !DILocalVariable(name: "item", arg: 1, scope: !885, file: !3, line: 1267, type: !68)
!891 = !DILocation(line: 1267, column: 51, scope: !885)
!892 = !DILocalVariable(name: "output_buffer", arg: 2, scope: !885, file: !3, line: 1267, type: !888)
!893 = !DILocation(line: 1267, column: 77, scope: !885)
!894 = !DILocalVariable(name: "output", scope: !885, file: !3, line: 1269, type: !18)
!895 = !DILocation(line: 1269, column: 20, scope: !885)
!896 = !DILocation(line: 1271, column: 10, scope: !897)
!897 = distinct !DILexicalBlock(scope: !885, file: !3, line: 1271, column: 9)
!898 = !DILocation(line: 1271, column: 15, scope: !897)
!899 = !DILocation(line: 1271, column: 24, scope: !897)
!900 = !DILocation(line: 1271, column: 28, scope: !901)
!901 = !DILexicalBlockFile(scope: !897, file: !3, discriminator: 1)
!902 = !DILocation(line: 1271, column: 42, scope: !901)
!903 = !DILocation(line: 1271, column: 9, scope: !904)
!904 = !DILexicalBlockFile(scope: !885, file: !3, discriminator: 1)
!905 = !DILocation(line: 1273, column: 9, scope: !906)
!906 = distinct !DILexicalBlock(scope: !897, file: !3, line: 1272, column: 5)
!907 = !DILocation(line: 1276, column: 14, scope: !885)
!908 = !DILocation(line: 1276, column: 20, scope: !885)
!909 = !DILocation(line: 1276, column: 26, scope: !885)
!910 = !DILocation(line: 1276, column: 5, scope: !885)
!911 = !DILocation(line: 1279, column: 29, scope: !912)
!912 = distinct !DILexicalBlock(scope: !885, file: !3, line: 1277, column: 5)
!913 = !DILocation(line: 1279, column: 22, scope: !912)
!914 = !DILocation(line: 1279, column: 20, scope: !912)
!915 = !DILocation(line: 1280, column: 17, scope: !916)
!916 = distinct !DILexicalBlock(scope: !912, file: !3, line: 1280, column: 17)
!917 = !DILocation(line: 1280, column: 24, scope: !916)
!918 = !DILocation(line: 1280, column: 17, scope: !912)
!919 = !DILocation(line: 1282, column: 17, scope: !920)
!920 = distinct !DILexicalBlock(scope: !916, file: !3, line: 1281, column: 13)
!921 = !DILocation(line: 1284, column: 27, scope: !912)
!922 = !DILocation(line: 1284, column: 13, scope: !912)
!923 = !DILocation(line: 1285, column: 13, scope: !912)
!924 = !DILocation(line: 1288, column: 29, scope: !912)
!925 = !DILocation(line: 1288, column: 22, scope: !912)
!926 = !DILocation(line: 1288, column: 20, scope: !912)
!927 = !DILocation(line: 1289, column: 17, scope: !928)
!928 = distinct !DILexicalBlock(scope: !912, file: !3, line: 1289, column: 17)
!929 = !DILocation(line: 1289, column: 24, scope: !928)
!930 = !DILocation(line: 1289, column: 17, scope: !912)
!931 = !DILocation(line: 1291, column: 17, scope: !932)
!932 = distinct !DILexicalBlock(scope: !928, file: !3, line: 1290, column: 13)
!933 = !DILocation(line: 1293, column: 27, scope: !912)
!934 = !DILocation(line: 1293, column: 13, scope: !912)
!935 = !DILocation(line: 1294, column: 13, scope: !912)
!936 = !DILocation(line: 1297, column: 29, scope: !912)
!937 = !DILocation(line: 1297, column: 22, scope: !912)
!938 = !DILocation(line: 1297, column: 20, scope: !912)
!939 = !DILocation(line: 1298, column: 17, scope: !940)
!940 = distinct !DILexicalBlock(scope: !912, file: !3, line: 1298, column: 17)
!941 = !DILocation(line: 1298, column: 24, scope: !940)
!942 = !DILocation(line: 1298, column: 17, scope: !912)
!943 = !DILocation(line: 1300, column: 17, scope: !944)
!944 = distinct !DILexicalBlock(scope: !940, file: !3, line: 1299, column: 13)
!945 = !DILocation(line: 1302, column: 27, scope: !912)
!946 = !DILocation(line: 1302, column: 13, scope: !912)
!947 = !DILocation(line: 1303, column: 13, scope: !912)
!948 = !DILocation(line: 1306, column: 33, scope: !912)
!949 = !DILocation(line: 1306, column: 39, scope: !912)
!950 = !DILocation(line: 1306, column: 20, scope: !912)
!951 = !DILocation(line: 1306, column: 13, scope: !912)
!952 = !DILocalVariable(name: "raw_length", scope: !953, file: !3, line: 1310, type: !19)
!953 = distinct !DILexicalBlock(scope: !912, file: !3, line: 1309, column: 9)
!954 = !DILocation(line: 1310, column: 20, scope: !953)
!955 = !DILocation(line: 1311, column: 17, scope: !956)
!956 = distinct !DILexicalBlock(scope: !953, file: !3, line: 1311, column: 17)
!957 = !DILocation(line: 1311, column: 23, scope: !956)
!958 = !DILocation(line: 1311, column: 35, scope: !956)
!959 = !DILocation(line: 1311, column: 17, scope: !953)
!960 = !DILocation(line: 1313, column: 17, scope: !961)
!961 = distinct !DILexicalBlock(scope: !956, file: !3, line: 1312, column: 13)
!962 = !DILocation(line: 1316, column: 33, scope: !953)
!963 = !DILocation(line: 1316, column: 39, scope: !953)
!964 = !DILocation(line: 1316, column: 26, scope: !953)
!965 = !DILocation(line: 1316, column: 52, scope: !953)
!966 = !DILocation(line: 1316, column: 24, scope: !953)
!967 = !DILocation(line: 1317, column: 29, scope: !953)
!968 = !DILocation(line: 1317, column: 44, scope: !953)
!969 = !DILocation(line: 1317, column: 22, scope: !953)
!970 = !DILocation(line: 1317, column: 20, scope: !953)
!971 = !DILocation(line: 1318, column: 17, scope: !972)
!972 = distinct !DILexicalBlock(scope: !953, file: !3, line: 1318, column: 17)
!973 = !DILocation(line: 1318, column: 24, scope: !972)
!974 = !DILocation(line: 1318, column: 17, scope: !953)
!975 = !DILocation(line: 1320, column: 17, scope: !976)
!976 = distinct !DILexicalBlock(scope: !972, file: !3, line: 1319, column: 13)
!977 = !DILocation(line: 1322, column: 20, scope: !953)
!978 = !DILocation(line: 1322, column: 28, scope: !953)
!979 = !DILocation(line: 1322, column: 34, scope: !953)
!980 = !DILocation(line: 1322, column: 47, scope: !953)
!981 = !DILocation(line: 1322, column: 13, scope: !953)
!982 = !DILocation(line: 1323, column: 13, scope: !953)
!983 = !DILocation(line: 1327, column: 33, scope: !912)
!984 = !DILocation(line: 1327, column: 39, scope: !912)
!985 = !DILocation(line: 1327, column: 20, scope: !912)
!986 = !DILocation(line: 1327, column: 13, scope: !912)
!987 = !DILocation(line: 1330, column: 32, scope: !912)
!988 = !DILocation(line: 1330, column: 38, scope: !912)
!989 = !DILocation(line: 1330, column: 20, scope: !912)
!990 = !DILocation(line: 1330, column: 13, scope: !912)
!991 = !DILocation(line: 1333, column: 33, scope: !912)
!992 = !DILocation(line: 1333, column: 39, scope: !912)
!993 = !DILocation(line: 1333, column: 20, scope: !912)
!994 = !DILocation(line: 1333, column: 13, scope: !912)
!995 = !DILocation(line: 1336, column: 13, scope: !912)
!996 = !DILocation(line: 1338, column: 1, scope: !885)
!997 = distinct !DISubprogram(name: "cJSON_PrintPreallocated", scope: !3, file: !3, line: 1192, type: !998, isLocal: false, isDefinition: true, scopeLine: 1193, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!998 = !DISubroutineType(types: !999)
!999 = !{!16, !22, !15, !1000, !1001}
!1000 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!1001 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!1002 = !DILocalVariable(name: "item", arg: 1, scope: !997, file: !3, line: 1192, type: !22)
!1003 = !DILocation(line: 1192, column: 57, scope: !997)
!1004 = !DILocalVariable(name: "buf", arg: 2, scope: !997, file: !3, line: 1192, type: !15)
!1005 = !DILocation(line: 1192, column: 69, scope: !997)
!1006 = !DILocalVariable(name: "len", arg: 3, scope: !997, file: !3, line: 1192, type: !1000)
!1007 = !DILocation(line: 1192, column: 84, scope: !997)
!1008 = !DILocalVariable(name: "fmt", arg: 4, scope: !997, file: !3, line: 1192, type: !1001)
!1009 = !DILocation(line: 1192, column: 106, scope: !997)
!1010 = !DILocalVariable(name: "p", scope: !997, file: !3, line: 1194, type: !711)
!1011 = !DILocation(line: 1194, column: 17, scope: !997)
!1012 = !DILocation(line: 1196, column: 10, scope: !1013)
!1013 = distinct !DILexicalBlock(scope: !997, file: !3, line: 1196, column: 9)
!1014 = !DILocation(line: 1196, column: 14, scope: !1013)
!1015 = !DILocation(line: 1196, column: 19, scope: !1013)
!1016 = !DILocation(line: 1196, column: 23, scope: !1017)
!1017 = !DILexicalBlockFile(scope: !1013, file: !3, discriminator: 1)
!1018 = !DILocation(line: 1196, column: 27, scope: !1017)
!1019 = !DILocation(line: 1196, column: 9, scope: !1020)
!1020 = !DILexicalBlockFile(scope: !997, file: !3, discriminator: 1)
!1021 = !DILocation(line: 1198, column: 9, scope: !1022)
!1022 = distinct !DILexicalBlock(scope: !1013, file: !3, line: 1197, column: 5)
!1023 = !DILocation(line: 1201, column: 32, scope: !997)
!1024 = !DILocation(line: 1201, column: 7, scope: !997)
!1025 = !DILocation(line: 1201, column: 14, scope: !997)
!1026 = !DILocation(line: 1202, column: 24, scope: !997)
!1027 = !DILocation(line: 1202, column: 16, scope: !997)
!1028 = !DILocation(line: 1202, column: 7, scope: !997)
!1029 = !DILocation(line: 1202, column: 14, scope: !997)
!1030 = !DILocation(line: 1203, column: 7, scope: !997)
!1031 = !DILocation(line: 1203, column: 14, scope: !997)
!1032 = !DILocation(line: 1204, column: 7, scope: !997)
!1033 = !DILocation(line: 1204, column: 15, scope: !997)
!1034 = !DILocation(line: 1205, column: 16, scope: !997)
!1035 = !DILocation(line: 1205, column: 7, scope: !997)
!1036 = !DILocation(line: 1205, column: 14, scope: !997)
!1037 = !DILocation(line: 1206, column: 7, scope: !997)
!1038 = !DILocation(line: 1206, column: 15, scope: !997)
!1039 = !DILocation(line: 1208, column: 24, scope: !997)
!1040 = !DILocation(line: 1208, column: 12, scope: !997)
!1041 = !DILocation(line: 1208, column: 5, scope: !997)
!1042 = !DILocation(line: 1209, column: 1, scope: !997)
!1043 = distinct !DISubprogram(name: "cJSON_GetArraySize", scope: !3, file: !3, line: 1720, type: !1044, isLocal: false, isDefinition: true, scopeLine: 1721, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1044 = !DISubroutineType(types: !1045)
!1045 = !{!11, !69}
!1046 = !DILocalVariable(name: "array", arg: 1, scope: !1043, file: !3, line: 1720, type: !69)
!1047 = !DILocation(line: 1720, column: 51, scope: !1043)
!1048 = !DILocalVariable(name: "child", scope: !1043, file: !3, line: 1722, type: !22)
!1049 = !DILocation(line: 1722, column: 12, scope: !1043)
!1050 = !DILocalVariable(name: "size", scope: !1043, file: !3, line: 1723, type: !19)
!1051 = !DILocation(line: 1723, column: 12, scope: !1043)
!1052 = !DILocation(line: 1725, column: 9, scope: !1053)
!1053 = distinct !DILexicalBlock(scope: !1043, file: !3, line: 1725, column: 9)
!1054 = !DILocation(line: 1725, column: 15, scope: !1053)
!1055 = !DILocation(line: 1725, column: 9, scope: !1043)
!1056 = !DILocation(line: 1727, column: 9, scope: !1057)
!1057 = distinct !DILexicalBlock(scope: !1053, file: !3, line: 1726, column: 5)
!1058 = !DILocation(line: 1730, column: 13, scope: !1043)
!1059 = !DILocation(line: 1730, column: 20, scope: !1043)
!1060 = !DILocation(line: 1730, column: 11, scope: !1043)
!1061 = !DILocation(line: 1732, column: 5, scope: !1043)
!1062 = !DILocation(line: 1732, column: 11, scope: !1063)
!1063 = !DILexicalBlockFile(scope: !1043, file: !3, discriminator: 1)
!1064 = !DILocation(line: 1732, column: 17, scope: !1063)
!1065 = !DILocation(line: 1732, column: 5, scope: !1063)
!1066 = !DILocation(line: 1734, column: 13, scope: !1067)
!1067 = distinct !DILexicalBlock(scope: !1043, file: !3, line: 1733, column: 5)
!1068 = !DILocation(line: 1735, column: 17, scope: !1067)
!1069 = !DILocation(line: 1735, column: 24, scope: !1067)
!1070 = !DILocation(line: 1735, column: 15, scope: !1067)
!1071 = !DILocation(line: 1732, column: 5, scope: !1072)
!1072 = !DILexicalBlockFile(scope: !1043, file: !3, discriminator: 2)
!1073 = distinct !{!1073, !1061, !1074}
!1074 = !DILocation(line: 1736, column: 5, scope: !1043)
!1075 = !DILocation(line: 1740, column: 17, scope: !1043)
!1076 = !DILocation(line: 1740, column: 12, scope: !1043)
!1077 = !DILocation(line: 1740, column: 5, scope: !1043)
!1078 = !DILocation(line: 1741, column: 1, scope: !1043)
!1079 = distinct !DISubprogram(name: "cJSON_GetArrayItem", scope: !3, file: !3, line: 1762, type: !1080, isLocal: false, isDefinition: true, scopeLine: 1763, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1080 = !DISubroutineType(types: !1081)
!1081 = !{!22, !69, !11}
!1082 = !DILocalVariable(name: "array", arg: 1, scope: !1079, file: !3, line: 1762, type: !69)
!1083 = !DILocation(line: 1762, column: 55, scope: !1079)
!1084 = !DILocalVariable(name: "index", arg: 2, scope: !1079, file: !3, line: 1762, type: !11)
!1085 = !DILocation(line: 1762, column: 66, scope: !1079)
!1086 = !DILocation(line: 1764, column: 9, scope: !1087)
!1087 = distinct !DILexicalBlock(scope: !1079, file: !3, line: 1764, column: 9)
!1088 = !DILocation(line: 1764, column: 15, scope: !1087)
!1089 = !DILocation(line: 1764, column: 9, scope: !1079)
!1090 = !DILocation(line: 1766, column: 9, scope: !1091)
!1091 = distinct !DILexicalBlock(scope: !1087, file: !3, line: 1765, column: 5)
!1092 = !DILocation(line: 1769, column: 27, scope: !1079)
!1093 = !DILocation(line: 1769, column: 42, scope: !1079)
!1094 = !DILocation(line: 1769, column: 34, scope: !1079)
!1095 = !DILocation(line: 1769, column: 12, scope: !1079)
!1096 = !DILocation(line: 1769, column: 5, scope: !1079)
!1097 = !DILocation(line: 1770, column: 1, scope: !1079)
!1098 = distinct !DISubprogram(name: "get_array_item", scope: !3, file: !3, line: 1743, type: !1099, isLocal: true, isDefinition: true, scopeLine: 1744, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!22, !69, !19}
!1101 = !DILocalVariable(name: "array", arg: 1, scope: !1098, file: !3, line: 1743, type: !69)
!1102 = !DILocation(line: 1743, column: 43, scope: !1098)
!1103 = !DILocalVariable(name: "index", arg: 2, scope: !1098, file: !3, line: 1743, type: !19)
!1104 = !DILocation(line: 1743, column: 57, scope: !1098)
!1105 = !DILocalVariable(name: "current_child", scope: !1098, file: !3, line: 1745, type: !22)
!1106 = !DILocation(line: 1745, column: 12, scope: !1098)
!1107 = !DILocation(line: 1747, column: 9, scope: !1108)
!1108 = distinct !DILexicalBlock(scope: !1098, file: !3, line: 1747, column: 9)
!1109 = !DILocation(line: 1747, column: 15, scope: !1108)
!1110 = !DILocation(line: 1747, column: 9, scope: !1098)
!1111 = !DILocation(line: 1749, column: 9, scope: !1112)
!1112 = distinct !DILexicalBlock(scope: !1108, file: !3, line: 1748, column: 5)
!1113 = !DILocation(line: 1752, column: 21, scope: !1098)
!1114 = !DILocation(line: 1752, column: 28, scope: !1098)
!1115 = !DILocation(line: 1752, column: 19, scope: !1098)
!1116 = !DILocation(line: 1753, column: 5, scope: !1098)
!1117 = !DILocation(line: 1753, column: 13, scope: !1118)
!1118 = !DILexicalBlockFile(scope: !1098, file: !3, discriminator: 1)
!1119 = !DILocation(line: 1753, column: 27, scope: !1118)
!1120 = !DILocation(line: 1753, column: 36, scope: !1118)
!1121 = !DILocation(line: 1753, column: 40, scope: !1122)
!1122 = !DILexicalBlockFile(scope: !1098, file: !3, discriminator: 2)
!1123 = !DILocation(line: 1753, column: 46, scope: !1122)
!1124 = !DILocation(line: 1753, column: 5, scope: !1125)
!1125 = !DILexicalBlockFile(scope: !1098, file: !3, discriminator: 3)
!1126 = !DILocation(line: 1755, column: 14, scope: !1127)
!1127 = distinct !DILexicalBlock(scope: !1098, file: !3, line: 1754, column: 5)
!1128 = !DILocation(line: 1756, column: 25, scope: !1127)
!1129 = !DILocation(line: 1756, column: 40, scope: !1127)
!1130 = !DILocation(line: 1756, column: 23, scope: !1127)
!1131 = !DILocation(line: 1753, column: 5, scope: !1132)
!1132 = !DILexicalBlockFile(scope: !1098, file: !3, discriminator: 4)
!1133 = distinct !{!1133, !1116, !1134}
!1134 = !DILocation(line: 1757, column: 5, scope: !1098)
!1135 = !DILocation(line: 1759, column: 12, scope: !1098)
!1136 = !DILocation(line: 1759, column: 5, scope: !1098)
!1137 = !DILocation(line: 1760, column: 1, scope: !1098)
!1138 = distinct !DISubprogram(name: "cJSON_GetObjectItem", scope: !3, file: !3, line: 1800, type: !1139, isLocal: false, isDefinition: true, scopeLine: 1801, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1139 = !DISubroutineType(types: !1140)
!1140 = !{!22, !68, !1141}
!1141 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!1142 = !DILocalVariable(name: "object", arg: 1, scope: !1138, file: !3, line: 1800, type: !68)
!1143 = !DILocation(line: 1800, column: 63, scope: !1138)
!1144 = !DILocalVariable(name: "string", arg: 2, scope: !1138, file: !3, line: 1800, type: !1141)
!1145 = !DILocation(line: 1800, column: 90, scope: !1138)
!1146 = !DILocation(line: 1802, column: 28, scope: !1138)
!1147 = !DILocation(line: 1802, column: 36, scope: !1138)
!1148 = !DILocation(line: 1802, column: 12, scope: !1138)
!1149 = !DILocation(line: 1802, column: 5, scope: !1138)
!1150 = distinct !DISubprogram(name: "get_object_item", scope: !3, file: !3, line: 1772, type: !1151, isLocal: true, isDefinition: true, scopeLine: 1773, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!22, !68, !1141, !1001}
!1153 = !DILocalVariable(name: "object", arg: 1, scope: !1150, file: !3, line: 1772, type: !68)
!1154 = !DILocation(line: 1772, column: 51, scope: !1150)
!1155 = !DILocalVariable(name: "name", arg: 2, scope: !1150, file: !3, line: 1772, type: !1141)
!1156 = !DILocation(line: 1772, column: 78, scope: !1150)
!1157 = !DILocalVariable(name: "case_sensitive", arg: 3, scope: !1150, file: !3, line: 1772, type: !1001)
!1158 = !DILocation(line: 1772, column: 101, scope: !1150)
!1159 = !DILocalVariable(name: "current_element", scope: !1150, file: !3, line: 1774, type: !22)
!1160 = !DILocation(line: 1774, column: 12, scope: !1150)
!1161 = !DILocation(line: 1776, column: 10, scope: !1162)
!1162 = distinct !DILexicalBlock(scope: !1150, file: !3, line: 1776, column: 9)
!1163 = !DILocation(line: 1776, column: 17, scope: !1162)
!1164 = !DILocation(line: 1776, column: 26, scope: !1162)
!1165 = !DILocation(line: 1776, column: 30, scope: !1166)
!1166 = !DILexicalBlockFile(scope: !1162, file: !3, discriminator: 1)
!1167 = !DILocation(line: 1776, column: 35, scope: !1166)
!1168 = !DILocation(line: 1776, column: 9, scope: !1169)
!1169 = !DILexicalBlockFile(scope: !1150, file: !3, discriminator: 1)
!1170 = !DILocation(line: 1778, column: 9, scope: !1171)
!1171 = distinct !DILexicalBlock(scope: !1162, file: !3, line: 1777, column: 5)
!1172 = !DILocation(line: 1781, column: 23, scope: !1150)
!1173 = !DILocation(line: 1781, column: 31, scope: !1150)
!1174 = !DILocation(line: 1781, column: 21, scope: !1150)
!1175 = !DILocation(line: 1782, column: 9, scope: !1176)
!1176 = distinct !DILexicalBlock(scope: !1150, file: !3, line: 1782, column: 9)
!1177 = !DILocation(line: 1782, column: 9, scope: !1150)
!1178 = !DILocation(line: 1784, column: 9, scope: !1179)
!1179 = distinct !DILexicalBlock(scope: !1176, file: !3, line: 1783, column: 5)
!1180 = !DILocation(line: 1784, column: 17, scope: !1181)
!1181 = !DILexicalBlockFile(scope: !1179, file: !3, discriminator: 1)
!1182 = !DILocation(line: 1784, column: 33, scope: !1181)
!1183 = !DILocation(line: 1784, column: 42, scope: !1181)
!1184 = !DILocation(line: 1784, column: 53, scope: !1185)
!1185 = !DILexicalBlockFile(scope: !1179, file: !3, discriminator: 2)
!1186 = !DILocation(line: 1784, column: 59, scope: !1185)
!1187 = !DILocation(line: 1784, column: 76, scope: !1185)
!1188 = !DILocation(line: 1784, column: 46, scope: !1185)
!1189 = !DILocation(line: 1784, column: 84, scope: !1185)
!1190 = !DILocation(line: 1784, column: 9, scope: !1191)
!1191 = !DILexicalBlockFile(scope: !1179, file: !3, discriminator: 3)
!1192 = !DILocation(line: 1786, column: 31, scope: !1193)
!1193 = distinct !DILexicalBlock(scope: !1179, file: !3, line: 1785, column: 9)
!1194 = !DILocation(line: 1786, column: 48, scope: !1193)
!1195 = !DILocation(line: 1786, column: 29, scope: !1193)
!1196 = !DILocation(line: 1784, column: 9, scope: !1197)
!1197 = !DILexicalBlockFile(scope: !1179, file: !3, discriminator: 4)
!1198 = distinct !{!1198, !1178, !1199}
!1199 = !DILocation(line: 1787, column: 9, scope: !1179)
!1200 = !DILocation(line: 1788, column: 5, scope: !1179)
!1201 = !DILocation(line: 1791, column: 9, scope: !1202)
!1202 = distinct !DILexicalBlock(scope: !1176, file: !3, line: 1790, column: 5)
!1203 = !DILocation(line: 1791, column: 17, scope: !1204)
!1204 = !DILexicalBlockFile(scope: !1202, file: !3, discriminator: 1)
!1205 = !DILocation(line: 1791, column: 33, scope: !1204)
!1206 = !DILocation(line: 1791, column: 42, scope: !1204)
!1207 = !DILocation(line: 1791, column: 92, scope: !1208)
!1208 = !DILexicalBlockFile(scope: !1202, file: !3, discriminator: 2)
!1209 = !DILocation(line: 1791, column: 121, scope: !1208)
!1210 = !DILocation(line: 1791, column: 138, scope: !1208)
!1211 = !DILocation(line: 1791, column: 46, scope: !1208)
!1212 = !DILocation(line: 1791, column: 147, scope: !1208)
!1213 = !DILocation(line: 1791, column: 9, scope: !1214)
!1214 = !DILexicalBlockFile(scope: !1202, file: !3, discriminator: 3)
!1215 = !DILocation(line: 1793, column: 31, scope: !1216)
!1216 = distinct !DILexicalBlock(scope: !1202, file: !3, line: 1792, column: 9)
!1217 = !DILocation(line: 1793, column: 48, scope: !1216)
!1218 = !DILocation(line: 1793, column: 29, scope: !1216)
!1219 = !DILocation(line: 1791, column: 9, scope: !1220)
!1220 = !DILexicalBlockFile(scope: !1202, file: !3, discriminator: 4)
!1221 = distinct !{!1221, !1201, !1222}
!1222 = !DILocation(line: 1794, column: 9, scope: !1202)
!1223 = !DILocation(line: 1797, column: 12, scope: !1150)
!1224 = !DILocation(line: 1797, column: 5, scope: !1150)
!1225 = !DILocation(line: 1798, column: 1, scope: !1150)
!1226 = distinct !DISubprogram(name: "cJSON_GetObjectItemCaseSensitive", scope: !3, file: !3, line: 1805, type: !1139, isLocal: false, isDefinition: true, scopeLine: 1806, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1227 = !DILocalVariable(name: "object", arg: 1, scope: !1226, file: !3, line: 1805, type: !68)
!1228 = !DILocation(line: 1805, column: 76, scope: !1226)
!1229 = !DILocalVariable(name: "string", arg: 2, scope: !1226, file: !3, line: 1805, type: !1141)
!1230 = !DILocation(line: 1805, column: 103, scope: !1226)
!1231 = !DILocation(line: 1807, column: 28, scope: !1226)
!1232 = !DILocation(line: 1807, column: 36, scope: !1226)
!1233 = !DILocation(line: 1807, column: 12, scope: !1226)
!1234 = !DILocation(line: 1807, column: 5, scope: !1226)
!1235 = distinct !DISubprogram(name: "cJSON_HasObjectItem", scope: !3, file: !3, line: 1810, type: !1236, isLocal: false, isDefinition: true, scopeLine: 1811, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1236 = !DISubroutineType(types: !1237)
!1237 = !{!16, !69, !6}
!1238 = !DILocalVariable(name: "object", arg: 1, scope: !1235, file: !3, line: 1810, type: !69)
!1239 = !DILocation(line: 1810, column: 59, scope: !1235)
!1240 = !DILocalVariable(name: "string", arg: 2, scope: !1235, file: !3, line: 1810, type: !6)
!1241 = !DILocation(line: 1810, column: 79, scope: !1235)
!1242 = !DILocation(line: 1812, column: 32, scope: !1235)
!1243 = !DILocation(line: 1812, column: 40, scope: !1235)
!1244 = !DILocation(line: 1812, column: 12, scope: !1235)
!1245 = !DILocation(line: 1812, column: 5, scope: !1235)
!1246 = distinct !DISubprogram(name: "cJSON_AddItemToArray", scope: !3, file: !3, line: 1874, type: !1247, isLocal: false, isDefinition: true, scopeLine: 1875, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1247 = !DISubroutineType(types: !1248)
!1248 = !{null, !22, !22}
!1249 = !DILocalVariable(name: "array", arg: 1, scope: !1246, file: !3, line: 1874, type: !22)
!1250 = !DILocation(line: 1874, column: 48, scope: !1246)
!1251 = !DILocalVariable(name: "item", arg: 2, scope: !1246, file: !3, line: 1874, type: !22)
!1252 = !DILocation(line: 1874, column: 62, scope: !1246)
!1253 = !DILocation(line: 1876, column: 23, scope: !1246)
!1254 = !DILocation(line: 1876, column: 30, scope: !1246)
!1255 = !DILocation(line: 1876, column: 5, scope: !1246)
!1256 = !DILocation(line: 1877, column: 1, scope: !1246)
!1257 = distinct !DISubprogram(name: "add_item_to_array", scope: !3, file: !3, line: 1844, type: !1258, isLocal: true, isDefinition: true, scopeLine: 1845, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1258 = !DISubroutineType(types: !1259)
!1259 = !{!16, !22, !22}
!1260 = !DILocalVariable(name: "array", arg: 1, scope: !1257, file: !3, line: 1844, type: !22)
!1261 = !DILocation(line: 1844, column: 44, scope: !1257)
!1262 = !DILocalVariable(name: "item", arg: 2, scope: !1257, file: !3, line: 1844, type: !22)
!1263 = !DILocation(line: 1844, column: 58, scope: !1257)
!1264 = !DILocalVariable(name: "child", scope: !1257, file: !3, line: 1846, type: !22)
!1265 = !DILocation(line: 1846, column: 12, scope: !1257)
!1266 = !DILocation(line: 1848, column: 10, scope: !1267)
!1267 = distinct !DILexicalBlock(scope: !1257, file: !3, line: 1848, column: 9)
!1268 = !DILocation(line: 1848, column: 15, scope: !1267)
!1269 = !DILocation(line: 1848, column: 24, scope: !1267)
!1270 = !DILocation(line: 1848, column: 28, scope: !1271)
!1271 = !DILexicalBlockFile(scope: !1267, file: !3, discriminator: 1)
!1272 = !DILocation(line: 1848, column: 34, scope: !1271)
!1273 = !DILocation(line: 1848, column: 9, scope: !1274)
!1274 = !DILexicalBlockFile(scope: !1257, file: !3, discriminator: 1)
!1275 = !DILocation(line: 1850, column: 9, scope: !1276)
!1276 = distinct !DILexicalBlock(scope: !1267, file: !3, line: 1849, column: 5)
!1277 = !DILocation(line: 1853, column: 13, scope: !1257)
!1278 = !DILocation(line: 1853, column: 20, scope: !1257)
!1279 = !DILocation(line: 1853, column: 11, scope: !1257)
!1280 = !DILocation(line: 1855, column: 9, scope: !1281)
!1281 = distinct !DILexicalBlock(scope: !1257, file: !3, line: 1855, column: 9)
!1282 = !DILocation(line: 1855, column: 15, scope: !1281)
!1283 = !DILocation(line: 1855, column: 9, scope: !1257)
!1284 = !DILocation(line: 1858, column: 24, scope: !1285)
!1285 = distinct !DILexicalBlock(scope: !1281, file: !3, line: 1856, column: 5)
!1286 = !DILocation(line: 1858, column: 9, scope: !1285)
!1287 = !DILocation(line: 1858, column: 16, scope: !1285)
!1288 = !DILocation(line: 1858, column: 22, scope: !1285)
!1289 = !DILocation(line: 1859, column: 5, scope: !1285)
!1290 = !DILocation(line: 1863, column: 9, scope: !1291)
!1291 = distinct !DILexicalBlock(scope: !1281, file: !3, line: 1861, column: 5)
!1292 = !DILocation(line: 1863, column: 16, scope: !1293)
!1293 = !DILexicalBlockFile(scope: !1291, file: !3, discriminator: 1)
!1294 = !DILocation(line: 1863, column: 23, scope: !1293)
!1295 = !DILocation(line: 1863, column: 9, scope: !1293)
!1296 = !DILocation(line: 1865, column: 21, scope: !1297)
!1297 = distinct !DILexicalBlock(scope: !1291, file: !3, line: 1864, column: 9)
!1298 = !DILocation(line: 1865, column: 28, scope: !1297)
!1299 = !DILocation(line: 1865, column: 19, scope: !1297)
!1300 = !DILocation(line: 1863, column: 9, scope: !1301)
!1301 = !DILexicalBlockFile(scope: !1291, file: !3, discriminator: 2)
!1302 = distinct !{!1302, !1290, !1303}
!1303 = !DILocation(line: 1866, column: 9, scope: !1291)
!1304 = !DILocation(line: 1867, column: 23, scope: !1291)
!1305 = !DILocation(line: 1867, column: 30, scope: !1291)
!1306 = !DILocation(line: 1867, column: 9, scope: !1291)
!1307 = !DILocation(line: 1870, column: 5, scope: !1257)
!1308 = !DILocation(line: 1871, column: 1, scope: !1257)
!1309 = distinct !DISubprogram(name: "cJSON_AddItemToObject", scope: !3, file: !3, line: 1932, type: !1310, isLocal: false, isDefinition: true, scopeLine: 1933, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1310 = !DISubroutineType(types: !1311)
!1311 = !{null, !22, !6, !22}
!1312 = !DILocalVariable(name: "object", arg: 1, scope: !1309, file: !3, line: 1932, type: !22)
!1313 = !DILocation(line: 1932, column: 49, scope: !1309)
!1314 = !DILocalVariable(name: "string", arg: 2, scope: !1309, file: !3, line: 1932, type: !6)
!1315 = !DILocation(line: 1932, column: 69, scope: !1309)
!1316 = !DILocalVariable(name: "item", arg: 3, scope: !1309, file: !3, line: 1932, type: !22)
!1317 = !DILocation(line: 1932, column: 84, scope: !1309)
!1318 = !DILocation(line: 1934, column: 24, scope: !1309)
!1319 = !DILocation(line: 1934, column: 32, scope: !1309)
!1320 = !DILocation(line: 1934, column: 40, scope: !1309)
!1321 = !DILocation(line: 1934, column: 5, scope: !1309)
!1322 = !DILocation(line: 1935, column: 1, scope: !1309)
!1323 = distinct !DISubprogram(name: "add_item_to_object", scope: !3, file: !3, line: 1895, type: !1324, isLocal: true, isDefinition: true, scopeLine: 1896, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1324 = !DISubroutineType(types: !1325)
!1325 = !{!16, !455, !1141, !455, !71, !1001}
!1326 = !DILocalVariable(name: "object", arg: 1, scope: !1323, file: !3, line: 1895, type: !455)
!1327 = !DILocation(line: 1895, column: 52, scope: !1323)
!1328 = !DILocalVariable(name: "string", arg: 2, scope: !1323, file: !3, line: 1895, type: !1141)
!1329 = !DILocation(line: 1895, column: 79, scope: !1323)
!1330 = !DILocalVariable(name: "item", arg: 3, scope: !1323, file: !3, line: 1895, type: !455)
!1331 = !DILocation(line: 1895, column: 101, scope: !1323)
!1332 = !DILocalVariable(name: "hooks", arg: 4, scope: !1323, file: !3, line: 1895, type: !71)
!1333 = !DILocation(line: 1895, column: 136, scope: !1323)
!1334 = !DILocalVariable(name: "constant_key", arg: 5, scope: !1323, file: !3, line: 1895, type: !1001)
!1335 = !DILocation(line: 1895, column: 160, scope: !1323)
!1336 = !DILocalVariable(name: "new_key", scope: !1323, file: !3, line: 1897, type: !15)
!1337 = !DILocation(line: 1897, column: 11, scope: !1323)
!1338 = !DILocalVariable(name: "new_type", scope: !1323, file: !3, line: 1898, type: !11)
!1339 = !DILocation(line: 1898, column: 9, scope: !1323)
!1340 = !DILocation(line: 1900, column: 10, scope: !1341)
!1341 = distinct !DILexicalBlock(scope: !1323, file: !3, line: 1900, column: 9)
!1342 = !DILocation(line: 1900, column: 17, scope: !1341)
!1343 = !DILocation(line: 1900, column: 26, scope: !1341)
!1344 = !DILocation(line: 1900, column: 30, scope: !1345)
!1345 = !DILexicalBlockFile(scope: !1341, file: !3, discriminator: 1)
!1346 = !DILocation(line: 1900, column: 37, scope: !1345)
!1347 = !DILocation(line: 1900, column: 46, scope: !1345)
!1348 = !DILocation(line: 1900, column: 50, scope: !1349)
!1349 = !DILexicalBlockFile(scope: !1341, file: !3, discriminator: 2)
!1350 = !DILocation(line: 1900, column: 55, scope: !1349)
!1351 = !DILocation(line: 1900, column: 9, scope: !1352)
!1352 = !DILexicalBlockFile(scope: !1323, file: !3, discriminator: 2)
!1353 = !DILocation(line: 1902, column: 9, scope: !1354)
!1354 = distinct !DILexicalBlock(scope: !1341, file: !3, line: 1901, column: 5)
!1355 = !DILocation(line: 1905, column: 9, scope: !1356)
!1356 = distinct !DILexicalBlock(scope: !1323, file: !3, line: 1905, column: 9)
!1357 = !DILocation(line: 1905, column: 9, scope: !1323)
!1358 = !DILocation(line: 1907, column: 42, scope: !1359)
!1359 = distinct !DILexicalBlock(scope: !1356, file: !3, line: 1906, column: 5)
!1360 = !DILocation(line: 1907, column: 26, scope: !1359)
!1361 = !DILocation(line: 1907, column: 17, scope: !1359)
!1362 = !DILocation(line: 1908, column: 20, scope: !1359)
!1363 = !DILocation(line: 1908, column: 26, scope: !1359)
!1364 = !DILocation(line: 1908, column: 31, scope: !1359)
!1365 = !DILocation(line: 1908, column: 18, scope: !1359)
!1366 = !DILocation(line: 1909, column: 5, scope: !1359)
!1367 = !DILocation(line: 1912, column: 61, scope: !1368)
!1368 = distinct !DILexicalBlock(scope: !1356, file: !3, line: 1911, column: 5)
!1369 = !DILocation(line: 1912, column: 69, scope: !1368)
!1370 = !DILocation(line: 1912, column: 26, scope: !1368)
!1371 = !DILocation(line: 1912, column: 17, scope: !1368)
!1372 = !DILocation(line: 1913, column: 13, scope: !1373)
!1373 = distinct !DILexicalBlock(scope: !1368, file: !3, line: 1913, column: 13)
!1374 = !DILocation(line: 1913, column: 21, scope: !1373)
!1375 = !DILocation(line: 1913, column: 13, scope: !1368)
!1376 = !DILocation(line: 1915, column: 13, scope: !1377)
!1377 = distinct !DILexicalBlock(scope: !1373, file: !3, line: 1914, column: 9)
!1378 = !DILocation(line: 1918, column: 20, scope: !1368)
!1379 = !DILocation(line: 1918, column: 26, scope: !1368)
!1380 = !DILocation(line: 1918, column: 31, scope: !1368)
!1381 = !DILocation(line: 1918, column: 18, scope: !1368)
!1382 = !DILocation(line: 1921, column: 11, scope: !1383)
!1383 = distinct !DILexicalBlock(scope: !1323, file: !3, line: 1921, column: 9)
!1384 = !DILocation(line: 1921, column: 17, scope: !1383)
!1385 = !DILocation(line: 1921, column: 22, scope: !1383)
!1386 = !DILocation(line: 1921, column: 45, scope: !1383)
!1387 = !DILocation(line: 1921, column: 49, scope: !1388)
!1388 = !DILexicalBlockFile(scope: !1383, file: !3, discriminator: 1)
!1389 = !DILocation(line: 1921, column: 55, scope: !1388)
!1390 = !DILocation(line: 1921, column: 62, scope: !1388)
!1391 = !DILocation(line: 1921, column: 9, scope: !1392)
!1392 = !DILexicalBlockFile(scope: !1323, file: !3, discriminator: 1)
!1393 = !DILocation(line: 1923, column: 9, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1383, file: !3, line: 1922, column: 5)
!1395 = !DILocation(line: 1923, column: 16, scope: !1394)
!1396 = !DILocation(line: 1923, column: 27, scope: !1394)
!1397 = !DILocation(line: 1923, column: 33, scope: !1394)
!1398 = !DILocation(line: 1924, column: 5, scope: !1394)
!1399 = !DILocation(line: 1926, column: 20, scope: !1323)
!1400 = !DILocation(line: 1926, column: 5, scope: !1323)
!1401 = !DILocation(line: 1926, column: 11, scope: !1323)
!1402 = !DILocation(line: 1926, column: 18, scope: !1323)
!1403 = !DILocation(line: 1927, column: 18, scope: !1323)
!1404 = !DILocation(line: 1927, column: 5, scope: !1323)
!1405 = !DILocation(line: 1927, column: 11, scope: !1323)
!1406 = !DILocation(line: 1927, column: 16, scope: !1323)
!1407 = !DILocation(line: 1929, column: 30, scope: !1323)
!1408 = !DILocation(line: 1929, column: 38, scope: !1323)
!1409 = !DILocation(line: 1929, column: 12, scope: !1323)
!1410 = !DILocation(line: 1929, column: 5, scope: !1323)
!1411 = !DILocation(line: 1930, column: 1, scope: !1323)
!1412 = distinct !DISubprogram(name: "cJSON_AddItemToObjectCS", scope: !3, file: !3, line: 1938, type: !1310, isLocal: false, isDefinition: true, scopeLine: 1939, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1413 = !DILocalVariable(name: "object", arg: 1, scope: !1412, file: !3, line: 1938, type: !22)
!1414 = !DILocation(line: 1938, column: 51, scope: !1412)
!1415 = !DILocalVariable(name: "string", arg: 2, scope: !1412, file: !3, line: 1938, type: !6)
!1416 = !DILocation(line: 1938, column: 71, scope: !1412)
!1417 = !DILocalVariable(name: "item", arg: 3, scope: !1412, file: !3, line: 1938, type: !22)
!1418 = !DILocation(line: 1938, column: 86, scope: !1412)
!1419 = !DILocation(line: 1940, column: 24, scope: !1412)
!1420 = !DILocation(line: 1940, column: 32, scope: !1412)
!1421 = !DILocation(line: 1940, column: 40, scope: !1412)
!1422 = !DILocation(line: 1940, column: 5, scope: !1412)
!1423 = !DILocation(line: 1941, column: 1, scope: !1412)
!1424 = distinct !DISubprogram(name: "cJSON_AddItemReferenceToArray", scope: !3, file: !3, line: 1943, type: !1247, isLocal: false, isDefinition: true, scopeLine: 1944, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1425 = !DILocalVariable(name: "array", arg: 1, scope: !1424, file: !3, line: 1943, type: !22)
!1426 = !DILocation(line: 1943, column: 57, scope: !1424)
!1427 = !DILocalVariable(name: "item", arg: 2, scope: !1424, file: !3, line: 1943, type: !22)
!1428 = !DILocation(line: 1943, column: 71, scope: !1424)
!1429 = !DILocation(line: 1945, column: 9, scope: !1430)
!1430 = distinct !DILexicalBlock(scope: !1424, file: !3, line: 1945, column: 9)
!1431 = !DILocation(line: 1945, column: 15, scope: !1430)
!1432 = !DILocation(line: 1945, column: 9, scope: !1424)
!1433 = !DILocation(line: 1947, column: 9, scope: !1434)
!1434 = distinct !DILexicalBlock(scope: !1430, file: !3, line: 1946, column: 5)
!1435 = !DILocation(line: 1950, column: 23, scope: !1424)
!1436 = !DILocation(line: 1950, column: 47, scope: !1424)
!1437 = !DILocation(line: 1950, column: 30, scope: !1424)
!1438 = !DILocation(line: 1950, column: 5, scope: !1439)
!1439 = !DILexicalBlockFile(scope: !1424, file: !3, discriminator: 1)
!1440 = !DILocation(line: 1951, column: 1, scope: !1424)
!1441 = !DILocation(line: 1951, column: 1, scope: !1439)
!1442 = distinct !DISubprogram(name: "create_reference", scope: !3, file: !3, line: 1823, type: !1443, isLocal: true, isDefinition: true, scopeLine: 1824, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1443 = !DISubroutineType(types: !1444)
!1444 = !{!22, !69, !71}
!1445 = !DILocalVariable(name: "item", arg: 1, scope: !1442, file: !3, line: 1823, type: !69)
!1446 = !DILocation(line: 1823, column: 45, scope: !1442)
!1447 = !DILocalVariable(name: "hooks", arg: 2, scope: !1442, file: !3, line: 1823, type: !71)
!1448 = !DILocation(line: 1823, column: 80, scope: !1442)
!1449 = !DILocalVariable(name: "reference", scope: !1442, file: !3, line: 1825, type: !22)
!1450 = !DILocation(line: 1825, column: 12, scope: !1442)
!1451 = !DILocation(line: 1826, column: 9, scope: !1452)
!1452 = distinct !DILexicalBlock(scope: !1442, file: !3, line: 1826, column: 9)
!1453 = !DILocation(line: 1826, column: 14, scope: !1452)
!1454 = !DILocation(line: 1826, column: 9, scope: !1442)
!1455 = !DILocation(line: 1828, column: 9, scope: !1456)
!1456 = distinct !DILexicalBlock(scope: !1452, file: !3, line: 1827, column: 5)
!1457 = !DILocation(line: 1831, column: 32, scope: !1442)
!1458 = !DILocation(line: 1831, column: 17, scope: !1442)
!1459 = !DILocation(line: 1831, column: 15, scope: !1442)
!1460 = !DILocation(line: 1832, column: 9, scope: !1461)
!1461 = distinct !DILexicalBlock(scope: !1442, file: !3, line: 1832, column: 9)
!1462 = !DILocation(line: 1832, column: 19, scope: !1461)
!1463 = !DILocation(line: 1832, column: 9, scope: !1442)
!1464 = !DILocation(line: 1834, column: 9, scope: !1465)
!1465 = distinct !DILexicalBlock(scope: !1461, file: !3, line: 1833, column: 5)
!1466 = !DILocation(line: 1837, column: 12, scope: !1442)
!1467 = !DILocation(line: 1837, column: 5, scope: !1442)
!1468 = !DILocation(line: 1837, column: 23, scope: !1442)
!1469 = !DILocation(line: 1838, column: 5, scope: !1442)
!1470 = !DILocation(line: 1838, column: 16, scope: !1442)
!1471 = !DILocation(line: 1838, column: 23, scope: !1442)
!1472 = !DILocation(line: 1839, column: 5, scope: !1442)
!1473 = !DILocation(line: 1839, column: 16, scope: !1442)
!1474 = !DILocation(line: 1839, column: 21, scope: !1442)
!1475 = !DILocation(line: 1840, column: 23, scope: !1442)
!1476 = !DILocation(line: 1840, column: 34, scope: !1442)
!1477 = !DILocation(line: 1840, column: 39, scope: !1442)
!1478 = !DILocation(line: 1840, column: 5, scope: !1442)
!1479 = !DILocation(line: 1840, column: 16, scope: !1442)
!1480 = !DILocation(line: 1840, column: 21, scope: !1442)
!1481 = !DILocation(line: 1841, column: 12, scope: !1442)
!1482 = !DILocation(line: 1841, column: 5, scope: !1442)
!1483 = !DILocation(line: 1842, column: 1, scope: !1442)
!1484 = distinct !DISubprogram(name: "cJSON_AddItemReferenceToObject", scope: !3, file: !3, line: 1953, type: !1310, isLocal: false, isDefinition: true, scopeLine: 1954, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1485 = !DILocalVariable(name: "object", arg: 1, scope: !1484, file: !3, line: 1953, type: !22)
!1486 = !DILocation(line: 1953, column: 58, scope: !1484)
!1487 = !DILocalVariable(name: "string", arg: 2, scope: !1484, file: !3, line: 1953, type: !6)
!1488 = !DILocation(line: 1953, column: 78, scope: !1484)
!1489 = !DILocalVariable(name: "item", arg: 3, scope: !1484, file: !3, line: 1953, type: !22)
!1490 = !DILocation(line: 1953, column: 93, scope: !1484)
!1491 = !DILocation(line: 1955, column: 10, scope: !1492)
!1492 = distinct !DILexicalBlock(scope: !1484, file: !3, line: 1955, column: 9)
!1493 = !DILocation(line: 1955, column: 17, scope: !1492)
!1494 = !DILocation(line: 1955, column: 26, scope: !1492)
!1495 = !DILocation(line: 1955, column: 30, scope: !1496)
!1496 = !DILexicalBlockFile(scope: !1492, file: !3, discriminator: 1)
!1497 = !DILocation(line: 1955, column: 37, scope: !1496)
!1498 = !DILocation(line: 1955, column: 9, scope: !1499)
!1499 = !DILexicalBlockFile(scope: !1484, file: !3, discriminator: 1)
!1500 = !DILocation(line: 1957, column: 9, scope: !1501)
!1501 = distinct !DILexicalBlock(scope: !1492, file: !3, line: 1956, column: 5)
!1502 = !DILocation(line: 1960, column: 24, scope: !1484)
!1503 = !DILocation(line: 1960, column: 32, scope: !1484)
!1504 = !DILocation(line: 1960, column: 57, scope: !1484)
!1505 = !DILocation(line: 1960, column: 40, scope: !1484)
!1506 = !DILocation(line: 1960, column: 5, scope: !1499)
!1507 = !DILocation(line: 1961, column: 1, scope: !1484)
!1508 = !DILocation(line: 1961, column: 1, scope: !1499)
!1509 = distinct !DISubprogram(name: "cJSON_AddNullToObject", scope: !3, file: !3, line: 1963, type: !1510, isLocal: false, isDefinition: true, scopeLine: 1964, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1510 = !DISubroutineType(types: !1511)
!1511 = !{!22, !455, !1141}
!1512 = !DILocalVariable(name: "object", arg: 1, scope: !1509, file: !3, line: 1963, type: !455)
!1513 = !DILocation(line: 1963, column: 58, scope: !1509)
!1514 = !DILocalVariable(name: "name", arg: 2, scope: !1509, file: !3, line: 1963, type: !1141)
!1515 = !DILocation(line: 1963, column: 85, scope: !1509)
!1516 = !DILocalVariable(name: "null", scope: !1509, file: !3, line: 1965, type: !22)
!1517 = !DILocation(line: 1965, column: 12, scope: !1509)
!1518 = !DILocation(line: 1965, column: 19, scope: !1509)
!1519 = !DILocation(line: 1966, column: 28, scope: !1520)
!1520 = distinct !DILexicalBlock(scope: !1509, file: !3, line: 1966, column: 9)
!1521 = !DILocation(line: 1966, column: 36, scope: !1520)
!1522 = !DILocation(line: 1966, column: 42, scope: !1520)
!1523 = !DILocation(line: 1966, column: 9, scope: !1520)
!1524 = !DILocation(line: 1966, column: 9, scope: !1509)
!1525 = !DILocation(line: 1968, column: 16, scope: !1526)
!1526 = distinct !DILexicalBlock(scope: !1520, file: !3, line: 1967, column: 5)
!1527 = !DILocation(line: 1968, column: 9, scope: !1526)
!1528 = !DILocation(line: 1971, column: 18, scope: !1509)
!1529 = !DILocation(line: 1971, column: 5, scope: !1509)
!1530 = !DILocation(line: 1972, column: 5, scope: !1509)
!1531 = !DILocation(line: 1973, column: 1, scope: !1509)
!1532 = distinct !DISubprogram(name: "cJSON_CreateNull", scope: !3, file: !3, line: 2246, type: !1533, isLocal: false, isDefinition: true, scopeLine: 2247, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1533 = !DISubroutineType(types: !1534)
!1534 = !{!22}
!1535 = !DILocalVariable(name: "item", scope: !1532, file: !3, line: 2248, type: !22)
!1536 = !DILocation(line: 2248, column: 12, scope: !1532)
!1537 = !DILocation(line: 2248, column: 19, scope: !1532)
!1538 = !DILocation(line: 2249, column: 8, scope: !1539)
!1539 = distinct !DILexicalBlock(scope: !1532, file: !3, line: 2249, column: 8)
!1540 = !DILocation(line: 2249, column: 8, scope: !1532)
!1541 = !DILocation(line: 2251, column: 9, scope: !1542)
!1542 = distinct !DILexicalBlock(scope: !1539, file: !3, line: 2250, column: 5)
!1543 = !DILocation(line: 2251, column: 15, scope: !1542)
!1544 = !DILocation(line: 2251, column: 20, scope: !1542)
!1545 = !DILocation(line: 2252, column: 5, scope: !1542)
!1546 = !DILocation(line: 2254, column: 12, scope: !1532)
!1547 = !DILocation(line: 2254, column: 5, scope: !1532)
!1548 = distinct !DISubprogram(name: "cJSON_AddTrueToObject", scope: !3, file: !3, line: 1975, type: !1510, isLocal: false, isDefinition: true, scopeLine: 1976, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1549 = !DILocalVariable(name: "object", arg: 1, scope: !1548, file: !3, line: 1975, type: !455)
!1550 = !DILocation(line: 1975, column: 58, scope: !1548)
!1551 = !DILocalVariable(name: "name", arg: 2, scope: !1548, file: !3, line: 1975, type: !1141)
!1552 = !DILocation(line: 1975, column: 85, scope: !1548)
!1553 = !DILocalVariable(name: "true_item", scope: !1548, file: !3, line: 1977, type: !22)
!1554 = !DILocation(line: 1977, column: 12, scope: !1548)
!1555 = !DILocation(line: 1977, column: 24, scope: !1548)
!1556 = !DILocation(line: 1978, column: 28, scope: !1557)
!1557 = distinct !DILexicalBlock(scope: !1548, file: !3, line: 1978, column: 9)
!1558 = !DILocation(line: 1978, column: 36, scope: !1557)
!1559 = !DILocation(line: 1978, column: 42, scope: !1557)
!1560 = !DILocation(line: 1978, column: 9, scope: !1557)
!1561 = !DILocation(line: 1978, column: 9, scope: !1548)
!1562 = !DILocation(line: 1980, column: 16, scope: !1563)
!1563 = distinct !DILexicalBlock(scope: !1557, file: !3, line: 1979, column: 5)
!1564 = !DILocation(line: 1980, column: 9, scope: !1563)
!1565 = !DILocation(line: 1983, column: 18, scope: !1548)
!1566 = !DILocation(line: 1983, column: 5, scope: !1548)
!1567 = !DILocation(line: 1984, column: 5, scope: !1548)
!1568 = !DILocation(line: 1985, column: 1, scope: !1548)
!1569 = distinct !DISubprogram(name: "cJSON_CreateTrue", scope: !3, file: !3, line: 2257, type: !1533, isLocal: false, isDefinition: true, scopeLine: 2258, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1570 = !DILocalVariable(name: "item", scope: !1569, file: !3, line: 2259, type: !22)
!1571 = !DILocation(line: 2259, column: 12, scope: !1569)
!1572 = !DILocation(line: 2259, column: 19, scope: !1569)
!1573 = !DILocation(line: 2260, column: 8, scope: !1574)
!1574 = distinct !DILexicalBlock(scope: !1569, file: !3, line: 2260, column: 8)
!1575 = !DILocation(line: 2260, column: 8, scope: !1569)
!1576 = !DILocation(line: 2262, column: 9, scope: !1577)
!1577 = distinct !DILexicalBlock(scope: !1574, file: !3, line: 2261, column: 5)
!1578 = !DILocation(line: 2262, column: 15, scope: !1577)
!1579 = !DILocation(line: 2262, column: 20, scope: !1577)
!1580 = !DILocation(line: 2263, column: 5, scope: !1577)
!1581 = !DILocation(line: 2265, column: 12, scope: !1569)
!1582 = !DILocation(line: 2265, column: 5, scope: !1569)
!1583 = distinct !DISubprogram(name: "cJSON_AddFalseToObject", scope: !3, file: !3, line: 1987, type: !1510, isLocal: false, isDefinition: true, scopeLine: 1988, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1584 = !DILocalVariable(name: "object", arg: 1, scope: !1583, file: !3, line: 1987, type: !455)
!1585 = !DILocation(line: 1987, column: 59, scope: !1583)
!1586 = !DILocalVariable(name: "name", arg: 2, scope: !1583, file: !3, line: 1987, type: !1141)
!1587 = !DILocation(line: 1987, column: 86, scope: !1583)
!1588 = !DILocalVariable(name: "false_item", scope: !1583, file: !3, line: 1989, type: !22)
!1589 = !DILocation(line: 1989, column: 12, scope: !1583)
!1590 = !DILocation(line: 1989, column: 25, scope: !1583)
!1591 = !DILocation(line: 1990, column: 28, scope: !1592)
!1592 = distinct !DILexicalBlock(scope: !1583, file: !3, line: 1990, column: 9)
!1593 = !DILocation(line: 1990, column: 36, scope: !1592)
!1594 = !DILocation(line: 1990, column: 42, scope: !1592)
!1595 = !DILocation(line: 1990, column: 9, scope: !1592)
!1596 = !DILocation(line: 1990, column: 9, scope: !1583)
!1597 = !DILocation(line: 1992, column: 16, scope: !1598)
!1598 = distinct !DILexicalBlock(scope: !1592, file: !3, line: 1991, column: 5)
!1599 = !DILocation(line: 1992, column: 9, scope: !1598)
!1600 = !DILocation(line: 1995, column: 18, scope: !1583)
!1601 = !DILocation(line: 1995, column: 5, scope: !1583)
!1602 = !DILocation(line: 1996, column: 5, scope: !1583)
!1603 = !DILocation(line: 1997, column: 1, scope: !1583)
!1604 = distinct !DISubprogram(name: "cJSON_CreateFalse", scope: !3, file: !3, line: 2268, type: !1533, isLocal: false, isDefinition: true, scopeLine: 2269, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1605 = !DILocalVariable(name: "item", scope: !1604, file: !3, line: 2270, type: !22)
!1606 = !DILocation(line: 2270, column: 12, scope: !1604)
!1607 = !DILocation(line: 2270, column: 19, scope: !1604)
!1608 = !DILocation(line: 2271, column: 8, scope: !1609)
!1609 = distinct !DILexicalBlock(scope: !1604, file: !3, line: 2271, column: 8)
!1610 = !DILocation(line: 2271, column: 8, scope: !1604)
!1611 = !DILocation(line: 2273, column: 9, scope: !1612)
!1612 = distinct !DILexicalBlock(scope: !1609, file: !3, line: 2272, column: 5)
!1613 = !DILocation(line: 2273, column: 15, scope: !1612)
!1614 = !DILocation(line: 2273, column: 20, scope: !1612)
!1615 = !DILocation(line: 2274, column: 5, scope: !1612)
!1616 = !DILocation(line: 2276, column: 12, scope: !1604)
!1617 = !DILocation(line: 2276, column: 5, scope: !1604)
!1618 = distinct !DISubprogram(name: "cJSON_AddBoolToObject", scope: !3, file: !3, line: 1999, type: !1619, isLocal: false, isDefinition: true, scopeLine: 2000, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1619 = !DISubroutineType(types: !1620)
!1620 = !{!22, !455, !1141, !1001}
!1621 = !DILocalVariable(name: "object", arg: 1, scope: !1618, file: !3, line: 1999, type: !455)
!1622 = !DILocation(line: 1999, column: 58, scope: !1618)
!1623 = !DILocalVariable(name: "name", arg: 2, scope: !1618, file: !3, line: 1999, type: !1141)
!1624 = !DILocation(line: 1999, column: 85, scope: !1618)
!1625 = !DILocalVariable(name: "boolean", arg: 3, scope: !1618, file: !3, line: 1999, type: !1001)
!1626 = !DILocation(line: 1999, column: 108, scope: !1618)
!1627 = !DILocalVariable(name: "bool_item", scope: !1618, file: !3, line: 2001, type: !22)
!1628 = !DILocation(line: 2001, column: 12, scope: !1618)
!1629 = !DILocation(line: 2001, column: 41, scope: !1618)
!1630 = !DILocation(line: 2001, column: 24, scope: !1618)
!1631 = !DILocation(line: 2002, column: 28, scope: !1632)
!1632 = distinct !DILexicalBlock(scope: !1618, file: !3, line: 2002, column: 9)
!1633 = !DILocation(line: 2002, column: 36, scope: !1632)
!1634 = !DILocation(line: 2002, column: 42, scope: !1632)
!1635 = !DILocation(line: 2002, column: 9, scope: !1632)
!1636 = !DILocation(line: 2002, column: 9, scope: !1618)
!1637 = !DILocation(line: 2004, column: 16, scope: !1638)
!1638 = distinct !DILexicalBlock(scope: !1632, file: !3, line: 2003, column: 5)
!1639 = !DILocation(line: 2004, column: 9, scope: !1638)
!1640 = !DILocation(line: 2007, column: 18, scope: !1618)
!1641 = !DILocation(line: 2007, column: 5, scope: !1618)
!1642 = !DILocation(line: 2008, column: 5, scope: !1618)
!1643 = !DILocation(line: 2009, column: 1, scope: !1618)
!1644 = distinct !DISubprogram(name: "cJSON_CreateBool", scope: !3, file: !3, line: 2279, type: !1645, isLocal: false, isDefinition: true, scopeLine: 2280, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1645 = !DISubroutineType(types: !1646)
!1646 = !{!22, !16}
!1647 = !DILocalVariable(name: "b", arg: 1, scope: !1644, file: !3, line: 2279, type: !16)
!1648 = !DILocation(line: 2279, column: 51, scope: !1644)
!1649 = !DILocalVariable(name: "item", scope: !1644, file: !3, line: 2281, type: !22)
!1650 = !DILocation(line: 2281, column: 12, scope: !1644)
!1651 = !DILocation(line: 2281, column: 19, scope: !1644)
!1652 = !DILocation(line: 2282, column: 8, scope: !1653)
!1653 = distinct !DILexicalBlock(scope: !1644, file: !3, line: 2282, column: 8)
!1654 = !DILocation(line: 2282, column: 8, scope: !1644)
!1655 = !DILocation(line: 2284, column: 22, scope: !1656)
!1656 = distinct !DILexicalBlock(scope: !1653, file: !3, line: 2283, column: 5)
!1657 = !DILocation(line: 2284, column: 9, scope: !1656)
!1658 = !DILocation(line: 2284, column: 15, scope: !1656)
!1659 = !DILocation(line: 2284, column: 20, scope: !1656)
!1660 = !DILocation(line: 2285, column: 5, scope: !1656)
!1661 = !DILocation(line: 2287, column: 12, scope: !1644)
!1662 = !DILocation(line: 2287, column: 5, scope: !1644)
!1663 = distinct !DISubprogram(name: "cJSON_AddNumberToObject", scope: !3, file: !3, line: 2011, type: !1664, isLocal: false, isDefinition: true, scopeLine: 2012, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1664 = !DISubroutineType(types: !1665)
!1665 = !{!22, !455, !1141, !1666}
!1666 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10)
!1667 = !DILocalVariable(name: "object", arg: 1, scope: !1663, file: !3, line: 2011, type: !455)
!1668 = !DILocation(line: 2011, column: 60, scope: !1663)
!1669 = !DILocalVariable(name: "name", arg: 2, scope: !1663, file: !3, line: 2011, type: !1141)
!1670 = !DILocation(line: 2011, column: 87, scope: !1663)
!1671 = !DILocalVariable(name: "number", arg: 3, scope: !1663, file: !3, line: 2011, type: !1666)
!1672 = !DILocation(line: 2011, column: 106, scope: !1663)
!1673 = !DILocalVariable(name: "number_item", scope: !1663, file: !3, line: 2013, type: !22)
!1674 = !DILocation(line: 2013, column: 12, scope: !1663)
!1675 = !DILocation(line: 2013, column: 45, scope: !1663)
!1676 = !DILocation(line: 2013, column: 26, scope: !1663)
!1677 = !DILocation(line: 2014, column: 28, scope: !1678)
!1678 = distinct !DILexicalBlock(scope: !1663, file: !3, line: 2014, column: 9)
!1679 = !DILocation(line: 2014, column: 36, scope: !1678)
!1680 = !DILocation(line: 2014, column: 42, scope: !1678)
!1681 = !DILocation(line: 2014, column: 9, scope: !1678)
!1682 = !DILocation(line: 2014, column: 9, scope: !1663)
!1683 = !DILocation(line: 2016, column: 16, scope: !1684)
!1684 = distinct !DILexicalBlock(scope: !1678, file: !3, line: 2015, column: 5)
!1685 = !DILocation(line: 2016, column: 9, scope: !1684)
!1686 = !DILocation(line: 2019, column: 18, scope: !1663)
!1687 = !DILocation(line: 2019, column: 5, scope: !1663)
!1688 = !DILocation(line: 2020, column: 5, scope: !1663)
!1689 = !DILocation(line: 2021, column: 1, scope: !1663)
!1690 = distinct !DISubprogram(name: "cJSON_CreateNumber", scope: !3, file: !3, line: 2290, type: !1691, isLocal: false, isDefinition: true, scopeLine: 2291, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1691 = !DISubroutineType(types: !1692)
!1692 = !{!22, !10}
!1693 = !DILocalVariable(name: "num", arg: 1, scope: !1690, file: !3, line: 2290, type: !10)
!1694 = !DILocation(line: 2290, column: 49, scope: !1690)
!1695 = !DILocalVariable(name: "item", scope: !1690, file: !3, line: 2292, type: !22)
!1696 = !DILocation(line: 2292, column: 12, scope: !1690)
!1697 = !DILocation(line: 2292, column: 19, scope: !1690)
!1698 = !DILocation(line: 2293, column: 8, scope: !1699)
!1699 = distinct !DILexicalBlock(scope: !1690, file: !3, line: 2293, column: 8)
!1700 = !DILocation(line: 2293, column: 8, scope: !1690)
!1701 = !DILocation(line: 2295, column: 9, scope: !1702)
!1702 = distinct !DILexicalBlock(scope: !1699, file: !3, line: 2294, column: 5)
!1703 = !DILocation(line: 2295, column: 15, scope: !1702)
!1704 = !DILocation(line: 2295, column: 20, scope: !1702)
!1705 = !DILocation(line: 2296, column: 29, scope: !1702)
!1706 = !DILocation(line: 2296, column: 9, scope: !1702)
!1707 = !DILocation(line: 2296, column: 15, scope: !1702)
!1708 = !DILocation(line: 2296, column: 27, scope: !1702)
!1709 = !DILocation(line: 2299, column: 13, scope: !1710)
!1710 = distinct !DILexicalBlock(scope: !1702, file: !3, line: 2299, column: 13)
!1711 = !DILocation(line: 2299, column: 17, scope: !1710)
!1712 = !DILocation(line: 2299, column: 13, scope: !1702)
!1713 = !DILocation(line: 2301, column: 13, scope: !1714)
!1714 = distinct !DILexicalBlock(scope: !1710, file: !3, line: 2300, column: 9)
!1715 = !DILocation(line: 2301, column: 19, scope: !1714)
!1716 = !DILocation(line: 2301, column: 28, scope: !1714)
!1717 = !DILocation(line: 2302, column: 9, scope: !1714)
!1718 = !DILocation(line: 2303, column: 18, scope: !1719)
!1719 = distinct !DILexicalBlock(scope: !1710, file: !3, line: 2303, column: 18)
!1720 = !DILocation(line: 2303, column: 22, scope: !1719)
!1721 = !DILocation(line: 2303, column: 18, scope: !1710)
!1722 = !DILocation(line: 2305, column: 13, scope: !1723)
!1723 = distinct !DILexicalBlock(scope: !1719, file: !3, line: 2304, column: 9)
!1724 = !DILocation(line: 2305, column: 19, scope: !1723)
!1725 = !DILocation(line: 2305, column: 28, scope: !1723)
!1726 = !DILocation(line: 2306, column: 9, scope: !1723)
!1727 = !DILocation(line: 2309, column: 35, scope: !1728)
!1728 = distinct !DILexicalBlock(scope: !1719, file: !3, line: 2308, column: 9)
!1729 = !DILocation(line: 2309, column: 30, scope: !1728)
!1730 = !DILocation(line: 2309, column: 13, scope: !1728)
!1731 = !DILocation(line: 2309, column: 19, scope: !1728)
!1732 = !DILocation(line: 2309, column: 28, scope: !1728)
!1733 = !DILocation(line: 2311, column: 5, scope: !1702)
!1734 = !DILocation(line: 2313, column: 12, scope: !1690)
!1735 = !DILocation(line: 2313, column: 5, scope: !1690)
!1736 = distinct !DISubprogram(name: "cJSON_AddStringToObject", scope: !3, file: !3, line: 2023, type: !1737, isLocal: false, isDefinition: true, scopeLine: 2024, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1737 = !DISubroutineType(types: !1738)
!1738 = !{!22, !455, !1141, !1141}
!1739 = !DILocalVariable(name: "object", arg: 1, scope: !1736, file: !3, line: 2023, type: !455)
!1740 = !DILocation(line: 2023, column: 60, scope: !1736)
!1741 = !DILocalVariable(name: "name", arg: 2, scope: !1736, file: !3, line: 2023, type: !1141)
!1742 = !DILocation(line: 2023, column: 87, scope: !1736)
!1743 = !DILocalVariable(name: "string", arg: 3, scope: !1736, file: !3, line: 2023, type: !1141)
!1744 = !DILocation(line: 2023, column: 112, scope: !1736)
!1745 = !DILocalVariable(name: "string_item", scope: !1736, file: !3, line: 2025, type: !22)
!1746 = !DILocation(line: 2025, column: 12, scope: !1736)
!1747 = !DILocation(line: 2025, column: 45, scope: !1736)
!1748 = !DILocation(line: 2025, column: 26, scope: !1736)
!1749 = !DILocation(line: 2026, column: 28, scope: !1750)
!1750 = distinct !DILexicalBlock(scope: !1736, file: !3, line: 2026, column: 9)
!1751 = !DILocation(line: 2026, column: 36, scope: !1750)
!1752 = !DILocation(line: 2026, column: 42, scope: !1750)
!1753 = !DILocation(line: 2026, column: 9, scope: !1750)
!1754 = !DILocation(line: 2026, column: 9, scope: !1736)
!1755 = !DILocation(line: 2028, column: 16, scope: !1756)
!1756 = distinct !DILexicalBlock(scope: !1750, file: !3, line: 2027, column: 5)
!1757 = !DILocation(line: 2028, column: 9, scope: !1756)
!1758 = !DILocation(line: 2031, column: 18, scope: !1736)
!1759 = !DILocation(line: 2031, column: 5, scope: !1736)
!1760 = !DILocation(line: 2032, column: 5, scope: !1736)
!1761 = !DILocation(line: 2033, column: 1, scope: !1736)
!1762 = distinct !DISubprogram(name: "cJSON_CreateString", scope: !3, file: !3, line: 2316, type: !688, isLocal: false, isDefinition: true, scopeLine: 2317, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1763 = !DILocalVariable(name: "string", arg: 1, scope: !1762, file: !3, line: 2316, type: !6)
!1764 = !DILocation(line: 2316, column: 54, scope: !1762)
!1765 = !DILocalVariable(name: "item", scope: !1762, file: !3, line: 2318, type: !22)
!1766 = !DILocation(line: 2318, column: 12, scope: !1762)
!1767 = !DILocation(line: 2318, column: 19, scope: !1762)
!1768 = !DILocation(line: 2319, column: 8, scope: !1769)
!1769 = distinct !DILexicalBlock(scope: !1762, file: !3, line: 2319, column: 8)
!1770 = !DILocation(line: 2319, column: 8, scope: !1762)
!1771 = !DILocation(line: 2321, column: 9, scope: !1772)
!1772 = distinct !DILexicalBlock(scope: !1769, file: !3, line: 2320, column: 5)
!1773 = !DILocation(line: 2321, column: 15, scope: !1772)
!1774 = !DILocation(line: 2321, column: 20, scope: !1772)
!1775 = !DILocation(line: 2322, column: 71, scope: !1772)
!1776 = !DILocation(line: 2322, column: 36, scope: !1772)
!1777 = !DILocation(line: 2322, column: 9, scope: !1772)
!1778 = !DILocation(line: 2322, column: 15, scope: !1772)
!1779 = !DILocation(line: 2322, column: 27, scope: !1772)
!1780 = !DILocation(line: 2323, column: 13, scope: !1781)
!1781 = distinct !DILexicalBlock(scope: !1772, file: !3, line: 2323, column: 12)
!1782 = !DILocation(line: 2323, column: 19, scope: !1781)
!1783 = !DILocation(line: 2323, column: 12, scope: !1772)
!1784 = !DILocation(line: 2325, column: 26, scope: !1785)
!1785 = distinct !DILexicalBlock(scope: !1781, file: !3, line: 2324, column: 9)
!1786 = !DILocation(line: 2325, column: 13, scope: !1785)
!1787 = !DILocation(line: 2326, column: 13, scope: !1785)
!1788 = !DILocation(line: 2328, column: 5, scope: !1772)
!1789 = !DILocation(line: 2330, column: 12, scope: !1762)
!1790 = !DILocation(line: 2330, column: 5, scope: !1762)
!1791 = !DILocation(line: 2331, column: 1, scope: !1762)
!1792 = distinct !DISubprogram(name: "cJSON_AddRawToObject", scope: !3, file: !3, line: 2035, type: !1737, isLocal: false, isDefinition: true, scopeLine: 2036, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1793 = !DILocalVariable(name: "object", arg: 1, scope: !1792, file: !3, line: 2035, type: !455)
!1794 = !DILocation(line: 2035, column: 57, scope: !1792)
!1795 = !DILocalVariable(name: "name", arg: 2, scope: !1792, file: !3, line: 2035, type: !1141)
!1796 = !DILocation(line: 2035, column: 84, scope: !1792)
!1797 = !DILocalVariable(name: "raw", arg: 3, scope: !1792, file: !3, line: 2035, type: !1141)
!1798 = !DILocation(line: 2035, column: 109, scope: !1792)
!1799 = !DILocalVariable(name: "raw_item", scope: !1792, file: !3, line: 2037, type: !22)
!1800 = !DILocation(line: 2037, column: 12, scope: !1792)
!1801 = !DILocation(line: 2037, column: 39, scope: !1792)
!1802 = !DILocation(line: 2037, column: 23, scope: !1792)
!1803 = !DILocation(line: 2038, column: 28, scope: !1804)
!1804 = distinct !DILexicalBlock(scope: !1792, file: !3, line: 2038, column: 9)
!1805 = !DILocation(line: 2038, column: 36, scope: !1804)
!1806 = !DILocation(line: 2038, column: 42, scope: !1804)
!1807 = !DILocation(line: 2038, column: 9, scope: !1804)
!1808 = !DILocation(line: 2038, column: 9, scope: !1792)
!1809 = !DILocation(line: 2040, column: 16, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1804, file: !3, line: 2039, column: 5)
!1811 = !DILocation(line: 2040, column: 9, scope: !1810)
!1812 = !DILocation(line: 2043, column: 18, scope: !1792)
!1813 = !DILocation(line: 2043, column: 5, scope: !1792)
!1814 = !DILocation(line: 2044, column: 5, scope: !1792)
!1815 = !DILocation(line: 2045, column: 1, scope: !1792)
!1816 = distinct !DISubprogram(name: "cJSON_CreateRaw", scope: !3, file: !3, line: 2366, type: !688, isLocal: false, isDefinition: true, scopeLine: 2367, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1817 = !DILocalVariable(name: "raw", arg: 1, scope: !1816, file: !3, line: 2366, type: !6)
!1818 = !DILocation(line: 2366, column: 51, scope: !1816)
!1819 = !DILocalVariable(name: "item", scope: !1816, file: !3, line: 2368, type: !22)
!1820 = !DILocation(line: 2368, column: 12, scope: !1816)
!1821 = !DILocation(line: 2368, column: 19, scope: !1816)
!1822 = !DILocation(line: 2369, column: 8, scope: !1823)
!1823 = distinct !DILexicalBlock(scope: !1816, file: !3, line: 2369, column: 8)
!1824 = !DILocation(line: 2369, column: 8, scope: !1816)
!1825 = !DILocation(line: 2371, column: 9, scope: !1826)
!1826 = distinct !DILexicalBlock(scope: !1823, file: !3, line: 2370, column: 5)
!1827 = !DILocation(line: 2371, column: 15, scope: !1826)
!1828 = !DILocation(line: 2371, column: 20, scope: !1826)
!1829 = !DILocation(line: 2372, column: 71, scope: !1826)
!1830 = !DILocation(line: 2372, column: 36, scope: !1826)
!1831 = !DILocation(line: 2372, column: 9, scope: !1826)
!1832 = !DILocation(line: 2372, column: 15, scope: !1826)
!1833 = !DILocation(line: 2372, column: 27, scope: !1826)
!1834 = !DILocation(line: 2373, column: 13, scope: !1835)
!1835 = distinct !DILexicalBlock(scope: !1826, file: !3, line: 2373, column: 12)
!1836 = !DILocation(line: 2373, column: 19, scope: !1835)
!1837 = !DILocation(line: 2373, column: 12, scope: !1826)
!1838 = !DILocation(line: 2375, column: 26, scope: !1839)
!1839 = distinct !DILexicalBlock(scope: !1835, file: !3, line: 2374, column: 9)
!1840 = !DILocation(line: 2375, column: 13, scope: !1839)
!1841 = !DILocation(line: 2376, column: 13, scope: !1839)
!1842 = !DILocation(line: 2378, column: 5, scope: !1826)
!1843 = !DILocation(line: 2380, column: 12, scope: !1816)
!1844 = !DILocation(line: 2380, column: 5, scope: !1816)
!1845 = !DILocation(line: 2381, column: 1, scope: !1816)
!1846 = distinct !DISubprogram(name: "cJSON_AddObjectToObject", scope: !3, file: !3, line: 2047, type: !1510, isLocal: false, isDefinition: true, scopeLine: 2048, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1847 = !DILocalVariable(name: "object", arg: 1, scope: !1846, file: !3, line: 2047, type: !455)
!1848 = !DILocation(line: 2047, column: 60, scope: !1846)
!1849 = !DILocalVariable(name: "name", arg: 2, scope: !1846, file: !3, line: 2047, type: !1141)
!1850 = !DILocation(line: 2047, column: 87, scope: !1846)
!1851 = !DILocalVariable(name: "object_item", scope: !1846, file: !3, line: 2049, type: !22)
!1852 = !DILocation(line: 2049, column: 12, scope: !1846)
!1853 = !DILocation(line: 2049, column: 26, scope: !1846)
!1854 = !DILocation(line: 2050, column: 28, scope: !1855)
!1855 = distinct !DILexicalBlock(scope: !1846, file: !3, line: 2050, column: 9)
!1856 = !DILocation(line: 2050, column: 36, scope: !1855)
!1857 = !DILocation(line: 2050, column: 42, scope: !1855)
!1858 = !DILocation(line: 2050, column: 9, scope: !1855)
!1859 = !DILocation(line: 2050, column: 9, scope: !1846)
!1860 = !DILocation(line: 2052, column: 16, scope: !1861)
!1861 = distinct !DILexicalBlock(scope: !1855, file: !3, line: 2051, column: 5)
!1862 = !DILocation(line: 2052, column: 9, scope: !1861)
!1863 = !DILocation(line: 2055, column: 18, scope: !1846)
!1864 = !DILocation(line: 2055, column: 5, scope: !1846)
!1865 = !DILocation(line: 2056, column: 5, scope: !1846)
!1866 = !DILocation(line: 2057, column: 1, scope: !1846)
!1867 = distinct !DISubprogram(name: "cJSON_CreateObject", scope: !3, file: !3, line: 2394, type: !1533, isLocal: false, isDefinition: true, scopeLine: 2395, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1868 = !DILocalVariable(name: "item", scope: !1867, file: !3, line: 2396, type: !22)
!1869 = !DILocation(line: 2396, column: 12, scope: !1867)
!1870 = !DILocation(line: 2396, column: 19, scope: !1867)
!1871 = !DILocation(line: 2397, column: 9, scope: !1872)
!1872 = distinct !DILexicalBlock(scope: !1867, file: !3, line: 2397, column: 9)
!1873 = !DILocation(line: 2397, column: 9, scope: !1867)
!1874 = !DILocation(line: 2399, column: 9, scope: !1875)
!1875 = distinct !DILexicalBlock(scope: !1872, file: !3, line: 2398, column: 5)
!1876 = !DILocation(line: 2399, column: 15, scope: !1875)
!1877 = !DILocation(line: 2399, column: 20, scope: !1875)
!1878 = !DILocation(line: 2400, column: 5, scope: !1875)
!1879 = !DILocation(line: 2402, column: 12, scope: !1867)
!1880 = !DILocation(line: 2402, column: 5, scope: !1867)
!1881 = distinct !DISubprogram(name: "cJSON_AddArrayToObject", scope: !3, file: !3, line: 2059, type: !1510, isLocal: false, isDefinition: true, scopeLine: 2060, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1882 = !DILocalVariable(name: "object", arg: 1, scope: !1881, file: !3, line: 2059, type: !455)
!1883 = !DILocation(line: 2059, column: 59, scope: !1881)
!1884 = !DILocalVariable(name: "name", arg: 2, scope: !1881, file: !3, line: 2059, type: !1141)
!1885 = !DILocation(line: 2059, column: 86, scope: !1881)
!1886 = !DILocalVariable(name: "array", scope: !1881, file: !3, line: 2061, type: !22)
!1887 = !DILocation(line: 2061, column: 12, scope: !1881)
!1888 = !DILocation(line: 2061, column: 20, scope: !1881)
!1889 = !DILocation(line: 2062, column: 28, scope: !1890)
!1890 = distinct !DILexicalBlock(scope: !1881, file: !3, line: 2062, column: 9)
!1891 = !DILocation(line: 2062, column: 36, scope: !1890)
!1892 = !DILocation(line: 2062, column: 42, scope: !1890)
!1893 = !DILocation(line: 2062, column: 9, scope: !1890)
!1894 = !DILocation(line: 2062, column: 9, scope: !1881)
!1895 = !DILocation(line: 2064, column: 16, scope: !1896)
!1896 = distinct !DILexicalBlock(scope: !1890, file: !3, line: 2063, column: 5)
!1897 = !DILocation(line: 2064, column: 9, scope: !1896)
!1898 = !DILocation(line: 2067, column: 18, scope: !1881)
!1899 = !DILocation(line: 2067, column: 5, scope: !1881)
!1900 = !DILocation(line: 2068, column: 5, scope: !1881)
!1901 = !DILocation(line: 2069, column: 1, scope: !1881)
!1902 = distinct !DISubprogram(name: "cJSON_CreateArray", scope: !3, file: !3, line: 2383, type: !1533, isLocal: false, isDefinition: true, scopeLine: 2384, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1903 = !DILocalVariable(name: "item", scope: !1902, file: !3, line: 2385, type: !22)
!1904 = !DILocation(line: 2385, column: 12, scope: !1902)
!1905 = !DILocation(line: 2385, column: 19, scope: !1902)
!1906 = !DILocation(line: 2386, column: 8, scope: !1907)
!1907 = distinct !DILexicalBlock(scope: !1902, file: !3, line: 2386, column: 8)
!1908 = !DILocation(line: 2386, column: 8, scope: !1902)
!1909 = !DILocation(line: 2388, column: 9, scope: !1910)
!1910 = distinct !DILexicalBlock(scope: !1907, file: !3, line: 2387, column: 5)
!1911 = !DILocation(line: 2388, column: 15, scope: !1910)
!1912 = !DILocation(line: 2388, column: 19, scope: !1910)
!1913 = !DILocation(line: 2389, column: 5, scope: !1910)
!1914 = !DILocation(line: 2391, column: 12, scope: !1902)
!1915 = !DILocation(line: 2391, column: 5, scope: !1902)
!1916 = distinct !DISubprogram(name: "cJSON_DetachItemViaPointer", scope: !3, file: !3, line: 2071, type: !1917, isLocal: false, isDefinition: true, scopeLine: 2072, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1917 = !DISubroutineType(types: !1918)
!1918 = !{!22, !22, !455}
!1919 = !DILocalVariable(name: "parent", arg: 1, scope: !1916, file: !3, line: 2071, type: !22)
!1920 = !DILocation(line: 2071, column: 57, scope: !1916)
!1921 = !DILocalVariable(name: "item", arg: 2, scope: !1916, file: !3, line: 2071, type: !455)
!1922 = !DILocation(line: 2071, column: 79, scope: !1916)
!1923 = !DILocation(line: 2073, column: 10, scope: !1924)
!1924 = distinct !DILexicalBlock(scope: !1916, file: !3, line: 2073, column: 9)
!1925 = !DILocation(line: 2073, column: 17, scope: !1924)
!1926 = !DILocation(line: 2073, column: 26, scope: !1924)
!1927 = !DILocation(line: 2073, column: 30, scope: !1928)
!1928 = !DILexicalBlockFile(scope: !1924, file: !3, discriminator: 1)
!1929 = !DILocation(line: 2073, column: 35, scope: !1928)
!1930 = !DILocation(line: 2073, column: 9, scope: !1931)
!1931 = !DILexicalBlockFile(scope: !1916, file: !3, discriminator: 1)
!1932 = !DILocation(line: 2075, column: 9, scope: !1933)
!1933 = distinct !DILexicalBlock(scope: !1924, file: !3, line: 2074, column: 5)
!1934 = !DILocation(line: 2078, column: 9, scope: !1935)
!1935 = distinct !DILexicalBlock(scope: !1916, file: !3, line: 2078, column: 9)
!1936 = !DILocation(line: 2078, column: 15, scope: !1935)
!1937 = !DILocation(line: 2078, column: 20, scope: !1935)
!1938 = !DILocation(line: 2078, column: 9, scope: !1916)
!1939 = !DILocation(line: 2081, column: 28, scope: !1940)
!1940 = distinct !DILexicalBlock(scope: !1935, file: !3, line: 2079, column: 5)
!1941 = !DILocation(line: 2081, column: 34, scope: !1940)
!1942 = !DILocation(line: 2081, column: 9, scope: !1940)
!1943 = !DILocation(line: 2081, column: 15, scope: !1940)
!1944 = !DILocation(line: 2081, column: 21, scope: !1940)
!1945 = !DILocation(line: 2081, column: 26, scope: !1940)
!1946 = !DILocation(line: 2082, column: 5, scope: !1940)
!1947 = !DILocation(line: 2083, column: 9, scope: !1948)
!1948 = distinct !DILexicalBlock(scope: !1916, file: !3, line: 2083, column: 9)
!1949 = !DILocation(line: 2083, column: 15, scope: !1948)
!1950 = !DILocation(line: 2083, column: 20, scope: !1948)
!1951 = !DILocation(line: 2083, column: 9, scope: !1916)
!1952 = !DILocation(line: 2086, column: 28, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1948, file: !3, line: 2084, column: 5)
!1954 = !DILocation(line: 2086, column: 34, scope: !1953)
!1955 = !DILocation(line: 2086, column: 9, scope: !1953)
!1956 = !DILocation(line: 2086, column: 15, scope: !1953)
!1957 = !DILocation(line: 2086, column: 21, scope: !1953)
!1958 = !DILocation(line: 2086, column: 26, scope: !1953)
!1959 = !DILocation(line: 2087, column: 5, scope: !1953)
!1960 = !DILocation(line: 2089, column: 9, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1916, file: !3, line: 2089, column: 9)
!1962 = !DILocation(line: 2089, column: 17, scope: !1961)
!1963 = !DILocation(line: 2089, column: 25, scope: !1961)
!1964 = !DILocation(line: 2089, column: 14, scope: !1961)
!1965 = !DILocation(line: 2089, column: 9, scope: !1916)
!1966 = !DILocation(line: 2092, column: 25, scope: !1967)
!1967 = distinct !DILexicalBlock(scope: !1961, file: !3, line: 2090, column: 5)
!1968 = !DILocation(line: 2092, column: 31, scope: !1967)
!1969 = !DILocation(line: 2092, column: 9, scope: !1967)
!1970 = !DILocation(line: 2092, column: 17, scope: !1967)
!1971 = !DILocation(line: 2092, column: 23, scope: !1967)
!1972 = !DILocation(line: 2093, column: 5, scope: !1967)
!1973 = !DILocation(line: 2095, column: 5, scope: !1916)
!1974 = !DILocation(line: 2095, column: 11, scope: !1916)
!1975 = !DILocation(line: 2095, column: 16, scope: !1916)
!1976 = !DILocation(line: 2096, column: 5, scope: !1916)
!1977 = !DILocation(line: 2096, column: 11, scope: !1916)
!1978 = !DILocation(line: 2096, column: 16, scope: !1916)
!1979 = !DILocation(line: 2098, column: 12, scope: !1916)
!1980 = !DILocation(line: 2098, column: 5, scope: !1916)
!1981 = !DILocation(line: 2099, column: 1, scope: !1916)
!1982 = distinct !DISubprogram(name: "cJSON_DetachItemFromArray", scope: !3, file: !3, line: 2101, type: !1983, isLocal: false, isDefinition: true, scopeLine: 2102, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!1983 = !DISubroutineType(types: !1984)
!1984 = !{!22, !22, !11}
!1985 = !DILocalVariable(name: "array", arg: 1, scope: !1982, file: !3, line: 2101, type: !22)
!1986 = !DILocation(line: 2101, column: 56, scope: !1982)
!1987 = !DILocalVariable(name: "which", arg: 2, scope: !1982, file: !3, line: 2101, type: !11)
!1988 = !DILocation(line: 2101, column: 67, scope: !1982)
!1989 = !DILocation(line: 2103, column: 9, scope: !1990)
!1990 = distinct !DILexicalBlock(scope: !1982, file: !3, line: 2103, column: 9)
!1991 = !DILocation(line: 2103, column: 15, scope: !1990)
!1992 = !DILocation(line: 2103, column: 9, scope: !1982)
!1993 = !DILocation(line: 2105, column: 9, scope: !1994)
!1994 = distinct !DILexicalBlock(scope: !1990, file: !3, line: 2104, column: 5)
!1995 = !DILocation(line: 2108, column: 39, scope: !1982)
!1996 = !DILocation(line: 2108, column: 61, scope: !1982)
!1997 = !DILocation(line: 2108, column: 76, scope: !1982)
!1998 = !DILocation(line: 2108, column: 68, scope: !1982)
!1999 = !DILocation(line: 2108, column: 46, scope: !1982)
!2000 = !DILocation(line: 2108, column: 12, scope: !2001)
!2001 = !DILexicalBlockFile(scope: !1982, file: !3, discriminator: 1)
!2002 = !DILocation(line: 2108, column: 5, scope: !1982)
!2003 = !DILocation(line: 2109, column: 1, scope: !1982)
!2004 = distinct !DISubprogram(name: "cJSON_DeleteItemFromArray", scope: !3, file: !3, line: 2111, type: !2005, isLocal: false, isDefinition: true, scopeLine: 2112, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2005 = !DISubroutineType(types: !2006)
!2006 = !{null, !22, !11}
!2007 = !DILocalVariable(name: "array", arg: 1, scope: !2004, file: !3, line: 2111, type: !22)
!2008 = !DILocation(line: 2111, column: 53, scope: !2004)
!2009 = !DILocalVariable(name: "which", arg: 2, scope: !2004, file: !3, line: 2111, type: !11)
!2010 = !DILocation(line: 2111, column: 64, scope: !2004)
!2011 = !DILocation(line: 2113, column: 44, scope: !2004)
!2012 = !DILocation(line: 2113, column: 51, scope: !2004)
!2013 = !DILocation(line: 2113, column: 18, scope: !2004)
!2014 = !DILocation(line: 2113, column: 5, scope: !2015)
!2015 = !DILexicalBlockFile(scope: !2004, file: !3, discriminator: 1)
!2016 = !DILocation(line: 2114, column: 1, scope: !2004)
!2017 = distinct !DISubprogram(name: "cJSON_DetachItemFromObject", scope: !3, file: !3, line: 2116, type: !2018, isLocal: false, isDefinition: true, scopeLine: 2117, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2018 = !DISubroutineType(types: !2019)
!2019 = !{!22, !22, !6}
!2020 = !DILocalVariable(name: "object", arg: 1, scope: !2017, file: !3, line: 2116, type: !22)
!2021 = !DILocation(line: 2116, column: 57, scope: !2017)
!2022 = !DILocalVariable(name: "string", arg: 2, scope: !2017, file: !3, line: 2116, type: !6)
!2023 = !DILocation(line: 2116, column: 77, scope: !2017)
!2024 = !DILocalVariable(name: "to_detach", scope: !2017, file: !3, line: 2118, type: !22)
!2025 = !DILocation(line: 2118, column: 12, scope: !2017)
!2026 = !DILocation(line: 2118, column: 44, scope: !2017)
!2027 = !DILocation(line: 2118, column: 52, scope: !2017)
!2028 = !DILocation(line: 2118, column: 24, scope: !2017)
!2029 = !DILocation(line: 2120, column: 39, scope: !2017)
!2030 = !DILocation(line: 2120, column: 47, scope: !2017)
!2031 = !DILocation(line: 2120, column: 12, scope: !2017)
!2032 = !DILocation(line: 2120, column: 5, scope: !2017)
!2033 = distinct !DISubprogram(name: "cJSON_DetachItemFromObjectCaseSensitive", scope: !3, file: !3, line: 2123, type: !2018, isLocal: false, isDefinition: true, scopeLine: 2124, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2034 = !DILocalVariable(name: "object", arg: 1, scope: !2033, file: !3, line: 2123, type: !22)
!2035 = !DILocation(line: 2123, column: 70, scope: !2033)
!2036 = !DILocalVariable(name: "string", arg: 2, scope: !2033, file: !3, line: 2123, type: !6)
!2037 = !DILocation(line: 2123, column: 90, scope: !2033)
!2038 = !DILocalVariable(name: "to_detach", scope: !2033, file: !3, line: 2125, type: !22)
!2039 = !DILocation(line: 2125, column: 12, scope: !2033)
!2040 = !DILocation(line: 2125, column: 57, scope: !2033)
!2041 = !DILocation(line: 2125, column: 65, scope: !2033)
!2042 = !DILocation(line: 2125, column: 24, scope: !2033)
!2043 = !DILocation(line: 2127, column: 39, scope: !2033)
!2044 = !DILocation(line: 2127, column: 47, scope: !2033)
!2045 = !DILocation(line: 2127, column: 12, scope: !2033)
!2046 = !DILocation(line: 2127, column: 5, scope: !2033)
!2047 = distinct !DISubprogram(name: "cJSON_DeleteItemFromObject", scope: !3, file: !3, line: 2130, type: !2048, isLocal: false, isDefinition: true, scopeLine: 2131, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2048 = !DISubroutineType(types: !2049)
!2049 = !{null, !22, !6}
!2050 = !DILocalVariable(name: "object", arg: 1, scope: !2047, file: !3, line: 2130, type: !22)
!2051 = !DILocation(line: 2130, column: 54, scope: !2047)
!2052 = !DILocalVariable(name: "string", arg: 2, scope: !2047, file: !3, line: 2130, type: !6)
!2053 = !DILocation(line: 2130, column: 74, scope: !2047)
!2054 = !DILocation(line: 2132, column: 45, scope: !2047)
!2055 = !DILocation(line: 2132, column: 53, scope: !2047)
!2056 = !DILocation(line: 2132, column: 18, scope: !2047)
!2057 = !DILocation(line: 2132, column: 5, scope: !2058)
!2058 = !DILexicalBlockFile(scope: !2047, file: !3, discriminator: 1)
!2059 = !DILocation(line: 2133, column: 1, scope: !2047)
!2060 = distinct !DISubprogram(name: "cJSON_DeleteItemFromObjectCaseSensitive", scope: !3, file: !3, line: 2135, type: !2048, isLocal: false, isDefinition: true, scopeLine: 2136, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2061 = !DILocalVariable(name: "object", arg: 1, scope: !2060, file: !3, line: 2135, type: !22)
!2062 = !DILocation(line: 2135, column: 67, scope: !2060)
!2063 = !DILocalVariable(name: "string", arg: 2, scope: !2060, file: !3, line: 2135, type: !6)
!2064 = !DILocation(line: 2135, column: 87, scope: !2060)
!2065 = !DILocation(line: 2137, column: 58, scope: !2060)
!2066 = !DILocation(line: 2137, column: 66, scope: !2060)
!2067 = !DILocation(line: 2137, column: 18, scope: !2060)
!2068 = !DILocation(line: 2137, column: 5, scope: !2069)
!2069 = !DILexicalBlockFile(scope: !2060, file: !3, discriminator: 1)
!2070 = !DILocation(line: 2138, column: 1, scope: !2060)
!2071 = distinct !DISubprogram(name: "cJSON_InsertItemInArray", scope: !3, file: !3, line: 2141, type: !2072, isLocal: false, isDefinition: true, scopeLine: 2142, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2072 = !DISubroutineType(types: !2073)
!2073 = !{null, !22, !11, !22}
!2074 = !DILocalVariable(name: "array", arg: 1, scope: !2071, file: !3, line: 2141, type: !22)
!2075 = !DILocation(line: 2141, column: 51, scope: !2071)
!2076 = !DILocalVariable(name: "which", arg: 2, scope: !2071, file: !3, line: 2141, type: !11)
!2077 = !DILocation(line: 2141, column: 62, scope: !2071)
!2078 = !DILocalVariable(name: "newitem", arg: 3, scope: !2071, file: !3, line: 2141, type: !22)
!2079 = !DILocation(line: 2141, column: 76, scope: !2071)
!2080 = !DILocalVariable(name: "after_inserted", scope: !2071, file: !3, line: 2143, type: !22)
!2081 = !DILocation(line: 2143, column: 12, scope: !2071)
!2082 = !DILocation(line: 2145, column: 9, scope: !2083)
!2083 = distinct !DILexicalBlock(scope: !2071, file: !3, line: 2145, column: 9)
!2084 = !DILocation(line: 2145, column: 15, scope: !2083)
!2085 = !DILocation(line: 2145, column: 9, scope: !2071)
!2086 = !DILocation(line: 2147, column: 9, scope: !2087)
!2087 = distinct !DILexicalBlock(scope: !2083, file: !3, line: 2146, column: 5)
!2088 = !DILocation(line: 2150, column: 37, scope: !2071)
!2089 = !DILocation(line: 2150, column: 52, scope: !2071)
!2090 = !DILocation(line: 2150, column: 44, scope: !2071)
!2091 = !DILocation(line: 2150, column: 22, scope: !2071)
!2092 = !DILocation(line: 2150, column: 20, scope: !2071)
!2093 = !DILocation(line: 2151, column: 9, scope: !2094)
!2094 = distinct !DILexicalBlock(scope: !2071, file: !3, line: 2151, column: 9)
!2095 = !DILocation(line: 2151, column: 24, scope: !2094)
!2096 = !DILocation(line: 2151, column: 9, scope: !2071)
!2097 = !DILocation(line: 2153, column: 27, scope: !2098)
!2098 = distinct !DILexicalBlock(scope: !2094, file: !3, line: 2152, column: 5)
!2099 = !DILocation(line: 2153, column: 34, scope: !2098)
!2100 = !DILocation(line: 2153, column: 9, scope: !2098)
!2101 = !DILocation(line: 2154, column: 9, scope: !2098)
!2102 = !DILocation(line: 2157, column: 21, scope: !2071)
!2103 = !DILocation(line: 2157, column: 5, scope: !2071)
!2104 = !DILocation(line: 2157, column: 14, scope: !2071)
!2105 = !DILocation(line: 2157, column: 19, scope: !2071)
!2106 = !DILocation(line: 2158, column: 21, scope: !2071)
!2107 = !DILocation(line: 2158, column: 37, scope: !2071)
!2108 = !DILocation(line: 2158, column: 5, scope: !2071)
!2109 = !DILocation(line: 2158, column: 14, scope: !2071)
!2110 = !DILocation(line: 2158, column: 19, scope: !2071)
!2111 = !DILocation(line: 2159, column: 28, scope: !2071)
!2112 = !DILocation(line: 2159, column: 5, scope: !2071)
!2113 = !DILocation(line: 2159, column: 21, scope: !2071)
!2114 = !DILocation(line: 2159, column: 26, scope: !2071)
!2115 = !DILocation(line: 2160, column: 9, scope: !2116)
!2116 = distinct !DILexicalBlock(scope: !2071, file: !3, line: 2160, column: 9)
!2117 = !DILocation(line: 2160, column: 27, scope: !2116)
!2118 = !DILocation(line: 2160, column: 34, scope: !2116)
!2119 = !DILocation(line: 2160, column: 24, scope: !2116)
!2120 = !DILocation(line: 2160, column: 9, scope: !2071)
!2121 = !DILocation(line: 2162, column: 24, scope: !2122)
!2122 = distinct !DILexicalBlock(scope: !2116, file: !3, line: 2161, column: 5)
!2123 = !DILocation(line: 2162, column: 9, scope: !2122)
!2124 = !DILocation(line: 2162, column: 16, scope: !2122)
!2125 = !DILocation(line: 2162, column: 22, scope: !2122)
!2126 = !DILocation(line: 2163, column: 5, scope: !2122)
!2127 = !DILocation(line: 2166, column: 31, scope: !2128)
!2128 = distinct !DILexicalBlock(scope: !2116, file: !3, line: 2165, column: 5)
!2129 = !DILocation(line: 2166, column: 9, scope: !2128)
!2130 = !DILocation(line: 2166, column: 18, scope: !2128)
!2131 = !DILocation(line: 2166, column: 24, scope: !2128)
!2132 = !DILocation(line: 2166, column: 29, scope: !2128)
!2133 = !DILocation(line: 2168, column: 1, scope: !2071)
!2134 = distinct !DISubprogram(name: "cJSON_ReplaceItemViaPointer", scope: !3, file: !3, line: 2170, type: !2135, isLocal: false, isDefinition: true, scopeLine: 2171, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2135 = !DISubroutineType(types: !2136)
!2136 = !{!16, !455, !455, !22}
!2137 = !DILocalVariable(name: "parent", arg: 1, scope: !2134, file: !3, line: 2170, type: !455)
!2138 = !DILocation(line: 2170, column: 68, scope: !2134)
!2139 = !DILocalVariable(name: "item", arg: 2, scope: !2134, file: !3, line: 2170, type: !455)
!2140 = !DILocation(line: 2170, column: 90, scope: !2134)
!2141 = !DILocalVariable(name: "replacement", arg: 3, scope: !2134, file: !3, line: 2170, type: !22)
!2142 = !DILocation(line: 2170, column: 104, scope: !2134)
!2143 = !DILocation(line: 2172, column: 10, scope: !2144)
!2144 = distinct !DILexicalBlock(scope: !2134, file: !3, line: 2172, column: 9)
!2145 = !DILocation(line: 2172, column: 17, scope: !2144)
!2146 = !DILocation(line: 2172, column: 26, scope: !2144)
!2147 = !DILocation(line: 2172, column: 30, scope: !2148)
!2148 = !DILexicalBlockFile(scope: !2144, file: !3, discriminator: 1)
!2149 = !DILocation(line: 2172, column: 42, scope: !2148)
!2150 = !DILocation(line: 2172, column: 51, scope: !2148)
!2151 = !DILocation(line: 2172, column: 55, scope: !2152)
!2152 = !DILexicalBlockFile(scope: !2144, file: !3, discriminator: 2)
!2153 = !DILocation(line: 2172, column: 60, scope: !2152)
!2154 = !DILocation(line: 2172, column: 9, scope: !2155)
!2155 = !DILexicalBlockFile(scope: !2134, file: !3, discriminator: 2)
!2156 = !DILocation(line: 2174, column: 9, scope: !2157)
!2157 = distinct !DILexicalBlock(scope: !2144, file: !3, line: 2173, column: 5)
!2158 = !DILocation(line: 2177, column: 9, scope: !2159)
!2159 = distinct !DILexicalBlock(scope: !2134, file: !3, line: 2177, column: 9)
!2160 = !DILocation(line: 2177, column: 24, scope: !2159)
!2161 = !DILocation(line: 2177, column: 21, scope: !2159)
!2162 = !DILocation(line: 2177, column: 9, scope: !2134)
!2163 = !DILocation(line: 2179, column: 9, scope: !2164)
!2164 = distinct !DILexicalBlock(scope: !2159, file: !3, line: 2178, column: 5)
!2165 = !DILocation(line: 2182, column: 25, scope: !2134)
!2166 = !DILocation(line: 2182, column: 31, scope: !2134)
!2167 = !DILocation(line: 2182, column: 5, scope: !2134)
!2168 = !DILocation(line: 2182, column: 18, scope: !2134)
!2169 = !DILocation(line: 2182, column: 23, scope: !2134)
!2170 = !DILocation(line: 2183, column: 25, scope: !2134)
!2171 = !DILocation(line: 2183, column: 31, scope: !2134)
!2172 = !DILocation(line: 2183, column: 5, scope: !2134)
!2173 = !DILocation(line: 2183, column: 18, scope: !2134)
!2174 = !DILocation(line: 2183, column: 23, scope: !2134)
!2175 = !DILocation(line: 2185, column: 9, scope: !2176)
!2176 = distinct !DILexicalBlock(scope: !2134, file: !3, line: 2185, column: 9)
!2177 = !DILocation(line: 2185, column: 22, scope: !2176)
!2178 = !DILocation(line: 2185, column: 27, scope: !2176)
!2179 = !DILocation(line: 2185, column: 9, scope: !2134)
!2180 = !DILocation(line: 2187, column: 35, scope: !2181)
!2181 = distinct !DILexicalBlock(scope: !2176, file: !3, line: 2186, column: 5)
!2182 = !DILocation(line: 2187, column: 9, scope: !2181)
!2183 = !DILocation(line: 2187, column: 22, scope: !2181)
!2184 = !DILocation(line: 2187, column: 28, scope: !2181)
!2185 = !DILocation(line: 2187, column: 33, scope: !2181)
!2186 = !DILocation(line: 2188, column: 5, scope: !2181)
!2187 = !DILocation(line: 2189, column: 9, scope: !2188)
!2188 = distinct !DILexicalBlock(scope: !2134, file: !3, line: 2189, column: 9)
!2189 = !DILocation(line: 2189, column: 22, scope: !2188)
!2190 = !DILocation(line: 2189, column: 27, scope: !2188)
!2191 = !DILocation(line: 2189, column: 9, scope: !2134)
!2192 = !DILocation(line: 2191, column: 35, scope: !2193)
!2193 = distinct !DILexicalBlock(scope: !2188, file: !3, line: 2190, column: 5)
!2194 = !DILocation(line: 2191, column: 9, scope: !2193)
!2195 = !DILocation(line: 2191, column: 22, scope: !2193)
!2196 = !DILocation(line: 2191, column: 28, scope: !2193)
!2197 = !DILocation(line: 2191, column: 33, scope: !2193)
!2198 = !DILocation(line: 2192, column: 5, scope: !2193)
!2199 = !DILocation(line: 2193, column: 9, scope: !2200)
!2200 = distinct !DILexicalBlock(scope: !2134, file: !3, line: 2193, column: 9)
!2201 = !DILocation(line: 2193, column: 17, scope: !2200)
!2202 = !DILocation(line: 2193, column: 26, scope: !2200)
!2203 = !DILocation(line: 2193, column: 23, scope: !2200)
!2204 = !DILocation(line: 2193, column: 9, scope: !2134)
!2205 = !DILocation(line: 2195, column: 25, scope: !2206)
!2206 = distinct !DILexicalBlock(scope: !2200, file: !3, line: 2194, column: 5)
!2207 = !DILocation(line: 2195, column: 9, scope: !2206)
!2208 = !DILocation(line: 2195, column: 17, scope: !2206)
!2209 = !DILocation(line: 2195, column: 23, scope: !2206)
!2210 = !DILocation(line: 2196, column: 5, scope: !2206)
!2211 = !DILocation(line: 2198, column: 5, scope: !2134)
!2212 = !DILocation(line: 2198, column: 11, scope: !2134)
!2213 = !DILocation(line: 2198, column: 16, scope: !2134)
!2214 = !DILocation(line: 2199, column: 5, scope: !2134)
!2215 = !DILocation(line: 2199, column: 11, scope: !2134)
!2216 = !DILocation(line: 2199, column: 16, scope: !2134)
!2217 = !DILocation(line: 2200, column: 18, scope: !2134)
!2218 = !DILocation(line: 2200, column: 5, scope: !2134)
!2219 = !DILocation(line: 2202, column: 5, scope: !2134)
!2220 = !DILocation(line: 2203, column: 1, scope: !2134)
!2221 = distinct !DISubprogram(name: "cJSON_ReplaceItemInArray", scope: !3, file: !3, line: 2205, type: !2072, isLocal: false, isDefinition: true, scopeLine: 2206, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2222 = !DILocalVariable(name: "array", arg: 1, scope: !2221, file: !3, line: 2205, type: !22)
!2223 = !DILocation(line: 2205, column: 52, scope: !2221)
!2224 = !DILocalVariable(name: "which", arg: 2, scope: !2221, file: !3, line: 2205, type: !11)
!2225 = !DILocation(line: 2205, column: 63, scope: !2221)
!2226 = !DILocalVariable(name: "newitem", arg: 3, scope: !2221, file: !3, line: 2205, type: !22)
!2227 = !DILocation(line: 2205, column: 77, scope: !2221)
!2228 = !DILocation(line: 2207, column: 9, scope: !2229)
!2229 = distinct !DILexicalBlock(scope: !2221, file: !3, line: 2207, column: 9)
!2230 = !DILocation(line: 2207, column: 15, scope: !2229)
!2231 = !DILocation(line: 2207, column: 9, scope: !2221)
!2232 = !DILocation(line: 2209, column: 9, scope: !2233)
!2233 = distinct !DILexicalBlock(scope: !2229, file: !3, line: 2208, column: 5)
!2234 = !DILocation(line: 2212, column: 33, scope: !2221)
!2235 = !DILocation(line: 2212, column: 55, scope: !2221)
!2236 = !DILocation(line: 2212, column: 70, scope: !2221)
!2237 = !DILocation(line: 2212, column: 62, scope: !2221)
!2238 = !DILocation(line: 2212, column: 40, scope: !2221)
!2239 = !DILocation(line: 2212, column: 78, scope: !2221)
!2240 = !DILocation(line: 2212, column: 5, scope: !2241)
!2241 = !DILexicalBlockFile(scope: !2221, file: !3, discriminator: 1)
!2242 = !DILocation(line: 2213, column: 1, scope: !2221)
!2243 = !DILocation(line: 2213, column: 1, scope: !2241)
!2244 = distinct !DISubprogram(name: "cJSON_ReplaceItemInObject", scope: !3, file: !3, line: 2235, type: !1310, isLocal: false, isDefinition: true, scopeLine: 2236, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2245 = !DILocalVariable(name: "object", arg: 1, scope: !2244, file: !3, line: 2235, type: !22)
!2246 = !DILocation(line: 2235, column: 53, scope: !2244)
!2247 = !DILocalVariable(name: "string", arg: 2, scope: !2244, file: !3, line: 2235, type: !6)
!2248 = !DILocation(line: 2235, column: 73, scope: !2244)
!2249 = !DILocalVariable(name: "newitem", arg: 3, scope: !2244, file: !3, line: 2235, type: !22)
!2250 = !DILocation(line: 2235, column: 88, scope: !2244)
!2251 = !DILocation(line: 2237, column: 28, scope: !2244)
!2252 = !DILocation(line: 2237, column: 36, scope: !2244)
!2253 = !DILocation(line: 2237, column: 44, scope: !2244)
!2254 = !DILocation(line: 2237, column: 5, scope: !2244)
!2255 = !DILocation(line: 2238, column: 1, scope: !2244)
!2256 = distinct !DISubprogram(name: "replace_item_in_object", scope: !3, file: !3, line: 2215, type: !2257, isLocal: true, isDefinition: true, scopeLine: 2216, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2257 = !DISubroutineType(types: !2258)
!2258 = !{!16, !22, !6, !22, !16}
!2259 = !DILocalVariable(name: "object", arg: 1, scope: !2256, file: !3, line: 2215, type: !22)
!2260 = !DILocation(line: 2215, column: 49, scope: !2256)
!2261 = !DILocalVariable(name: "string", arg: 2, scope: !2256, file: !3, line: 2215, type: !6)
!2262 = !DILocation(line: 2215, column: 69, scope: !2256)
!2263 = !DILocalVariable(name: "replacement", arg: 3, scope: !2256, file: !3, line: 2215, type: !22)
!2264 = !DILocation(line: 2215, column: 84, scope: !2256)
!2265 = !DILocalVariable(name: "case_sensitive", arg: 4, scope: !2256, file: !3, line: 2215, type: !16)
!2266 = !DILocation(line: 2215, column: 108, scope: !2256)
!2267 = !DILocation(line: 2217, column: 10, scope: !2268)
!2268 = distinct !DILexicalBlock(scope: !2256, file: !3, line: 2217, column: 9)
!2269 = !DILocation(line: 2217, column: 22, scope: !2268)
!2270 = !DILocation(line: 2217, column: 31, scope: !2268)
!2271 = !DILocation(line: 2217, column: 35, scope: !2272)
!2272 = !DILexicalBlockFile(scope: !2268, file: !3, discriminator: 1)
!2273 = !DILocation(line: 2217, column: 42, scope: !2272)
!2274 = !DILocation(line: 2217, column: 9, scope: !2275)
!2275 = !DILexicalBlockFile(scope: !2256, file: !3, discriminator: 1)
!2276 = !DILocation(line: 2219, column: 9, scope: !2277)
!2277 = distinct !DILexicalBlock(scope: !2268, file: !3, line: 2218, column: 5)
!2278 = !DILocation(line: 2223, column: 11, scope: !2279)
!2279 = distinct !DILexicalBlock(scope: !2256, file: !3, line: 2223, column: 9)
!2280 = !DILocation(line: 2223, column: 24, scope: !2279)
!2281 = !DILocation(line: 2223, column: 29, scope: !2279)
!2282 = !DILocation(line: 2223, column: 52, scope: !2279)
!2283 = !DILocation(line: 2223, column: 56, scope: !2284)
!2284 = !DILexicalBlockFile(scope: !2279, file: !3, discriminator: 1)
!2285 = !DILocation(line: 2223, column: 69, scope: !2284)
!2286 = !DILocation(line: 2223, column: 76, scope: !2284)
!2287 = !DILocation(line: 2223, column: 9, scope: !2275)
!2288 = !DILocation(line: 2225, column: 20, scope: !2289)
!2289 = distinct !DILexicalBlock(scope: !2279, file: !3, line: 2224, column: 5)
!2290 = !DILocation(line: 2225, column: 33, scope: !2289)
!2291 = !DILocation(line: 2225, column: 9, scope: !2289)
!2292 = !DILocation(line: 2226, column: 5, scope: !2289)
!2293 = !DILocation(line: 2227, column: 69, scope: !2256)
!2294 = !DILocation(line: 2227, column: 34, scope: !2256)
!2295 = !DILocation(line: 2227, column: 5, scope: !2256)
!2296 = !DILocation(line: 2227, column: 18, scope: !2256)
!2297 = !DILocation(line: 2227, column: 25, scope: !2256)
!2298 = !DILocation(line: 2228, column: 5, scope: !2256)
!2299 = !DILocation(line: 2228, column: 18, scope: !2256)
!2300 = !DILocation(line: 2228, column: 23, scope: !2256)
!2301 = !DILocation(line: 2230, column: 33, scope: !2256)
!2302 = !DILocation(line: 2230, column: 57, scope: !2256)
!2303 = !DILocation(line: 2230, column: 65, scope: !2256)
!2304 = !DILocation(line: 2230, column: 73, scope: !2256)
!2305 = !DILocation(line: 2230, column: 41, scope: !2256)
!2306 = !DILocation(line: 2230, column: 90, scope: !2256)
!2307 = !DILocation(line: 2230, column: 5, scope: !2275)
!2308 = !DILocation(line: 2232, column: 5, scope: !2256)
!2309 = !DILocation(line: 2233, column: 1, scope: !2256)
!2310 = distinct !DISubprogram(name: "cJSON_ReplaceItemInObjectCaseSensitive", scope: !3, file: !3, line: 2240, type: !1310, isLocal: false, isDefinition: true, scopeLine: 2241, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2311 = !DILocalVariable(name: "object", arg: 1, scope: !2310, file: !3, line: 2240, type: !22)
!2312 = !DILocation(line: 2240, column: 66, scope: !2310)
!2313 = !DILocalVariable(name: "string", arg: 2, scope: !2310, file: !3, line: 2240, type: !6)
!2314 = !DILocation(line: 2240, column: 86, scope: !2310)
!2315 = !DILocalVariable(name: "newitem", arg: 3, scope: !2310, file: !3, line: 2240, type: !22)
!2316 = !DILocation(line: 2240, column: 101, scope: !2310)
!2317 = !DILocation(line: 2242, column: 28, scope: !2310)
!2318 = !DILocation(line: 2242, column: 36, scope: !2310)
!2319 = !DILocation(line: 2242, column: 44, scope: !2310)
!2320 = !DILocation(line: 2242, column: 5, scope: !2310)
!2321 = !DILocation(line: 2243, column: 1, scope: !2310)
!2322 = distinct !DISubprogram(name: "cJSON_strdup", scope: !3, file: !3, line: 149, type: !2323, isLocal: true, isDefinition: true, scopeLine: 150, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2323 = !DISubroutineType(types: !2324)
!2324 = !{!18, !12, !71}
!2325 = !DILocalVariable(name: "string", arg: 1, scope: !2322, file: !3, line: 149, type: !12)
!2326 = !DILocation(line: 149, column: 57, scope: !2322)
!2327 = !DILocalVariable(name: "hooks", arg: 2, scope: !2322, file: !3, line: 149, type: !71)
!2328 = !DILocation(line: 149, column: 94, scope: !2322)
!2329 = !DILocalVariable(name: "length", scope: !2322, file: !3, line: 151, type: !19)
!2330 = !DILocation(line: 151, column: 12, scope: !2322)
!2331 = !DILocalVariable(name: "copy", scope: !2322, file: !3, line: 152, type: !18)
!2332 = !DILocation(line: 152, column: 20, scope: !2322)
!2333 = !DILocation(line: 154, column: 9, scope: !2334)
!2334 = distinct !DILexicalBlock(scope: !2322, file: !3, line: 154, column: 9)
!2335 = !DILocation(line: 154, column: 16, scope: !2334)
!2336 = !DILocation(line: 154, column: 9, scope: !2322)
!2337 = !DILocation(line: 156, column: 9, scope: !2338)
!2338 = distinct !DILexicalBlock(scope: !2334, file: !3, line: 155, column: 5)
!2339 = !DILocation(line: 159, column: 34, scope: !2322)
!2340 = !DILocation(line: 159, column: 14, scope: !2322)
!2341 = !DILocation(line: 159, column: 42, scope: !2322)
!2342 = !DILocation(line: 159, column: 12, scope: !2322)
!2343 = !DILocation(line: 160, column: 28, scope: !2322)
!2344 = !DILocation(line: 160, column: 35, scope: !2322)
!2345 = !DILocation(line: 160, column: 44, scope: !2322)
!2346 = !DILocation(line: 160, column: 10, scope: !2322)
!2347 = !DILocation(line: 161, column: 9, scope: !2348)
!2348 = distinct !DILexicalBlock(scope: !2322, file: !3, line: 161, column: 9)
!2349 = !DILocation(line: 161, column: 14, scope: !2348)
!2350 = !DILocation(line: 161, column: 9, scope: !2322)
!2351 = !DILocation(line: 163, column: 9, scope: !2352)
!2352 = distinct !DILexicalBlock(scope: !2348, file: !3, line: 162, column: 5)
!2353 = !DILocation(line: 165, column: 12, scope: !2322)
!2354 = !DILocation(line: 165, column: 18, scope: !2322)
!2355 = !DILocation(line: 165, column: 26, scope: !2322)
!2356 = !DILocation(line: 165, column: 5, scope: !2322)
!2357 = !DILocation(line: 167, column: 12, scope: !2322)
!2358 = !DILocation(line: 167, column: 5, scope: !2322)
!2359 = !DILocation(line: 168, column: 1, scope: !2322)
!2360 = distinct !DISubprogram(name: "cJSON_CreateStringReference", scope: !3, file: !3, line: 2333, type: !688, isLocal: false, isDefinition: true, scopeLine: 2334, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2361 = !DILocalVariable(name: "string", arg: 1, scope: !2360, file: !3, line: 2333, type: !6)
!2362 = !DILocation(line: 2333, column: 63, scope: !2360)
!2363 = !DILocalVariable(name: "item", scope: !2360, file: !3, line: 2335, type: !22)
!2364 = !DILocation(line: 2335, column: 12, scope: !2360)
!2365 = !DILocation(line: 2335, column: 19, scope: !2360)
!2366 = !DILocation(line: 2336, column: 9, scope: !2367)
!2367 = distinct !DILexicalBlock(scope: !2360, file: !3, line: 2336, column: 9)
!2368 = !DILocation(line: 2336, column: 14, scope: !2367)
!2369 = !DILocation(line: 2336, column: 9, scope: !2360)
!2370 = !DILocation(line: 2338, column: 9, scope: !2371)
!2371 = distinct !DILexicalBlock(scope: !2367, file: !3, line: 2337, column: 5)
!2372 = !DILocation(line: 2338, column: 15, scope: !2371)
!2373 = !DILocation(line: 2338, column: 20, scope: !2371)
!2374 = !DILocation(line: 2339, column: 52, scope: !2371)
!2375 = !DILocation(line: 2339, column: 36, scope: !2371)
!2376 = !DILocation(line: 2339, column: 9, scope: !2371)
!2377 = !DILocation(line: 2339, column: 15, scope: !2371)
!2378 = !DILocation(line: 2339, column: 27, scope: !2371)
!2379 = !DILocation(line: 2340, column: 5, scope: !2371)
!2380 = !DILocation(line: 2342, column: 12, scope: !2360)
!2381 = !DILocation(line: 2342, column: 5, scope: !2360)
!2382 = distinct !DISubprogram(name: "cast_away_const", scope: !3, file: !3, line: 1886, type: !2383, isLocal: true, isDefinition: true, scopeLine: 1887, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2383 = !DISubroutineType(types: !2384)
!2384 = !{!9, !2385}
!2385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2386, size: 64)
!2386 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2387 = !DILocalVariable(name: "string", arg: 1, scope: !2382, file: !3, line: 1886, type: !2385)
!2388 = !DILocation(line: 1886, column: 42, scope: !2382)
!2389 = !DILocation(line: 1888, column: 19, scope: !2382)
!2390 = !DILocation(line: 1888, column: 5, scope: !2382)
!2391 = distinct !DISubprogram(name: "cJSON_CreateObjectReference", scope: !3, file: !3, line: 2345, type: !2392, isLocal: false, isDefinition: true, scopeLine: 2346, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2392 = !DISubroutineType(types: !2393)
!2393 = !{!22, !69}
!2394 = !DILocalVariable(name: "child", arg: 1, scope: !2391, file: !3, line: 2345, type: !69)
!2395 = !DILocation(line: 2345, column: 64, scope: !2391)
!2396 = !DILocalVariable(name: "item", scope: !2391, file: !3, line: 2347, type: !22)
!2397 = !DILocation(line: 2347, column: 12, scope: !2391)
!2398 = !DILocation(line: 2347, column: 19, scope: !2391)
!2399 = !DILocation(line: 2348, column: 9, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !2391, file: !3, line: 2348, column: 9)
!2401 = !DILocation(line: 2348, column: 14, scope: !2400)
!2402 = !DILocation(line: 2348, column: 9, scope: !2391)
!2403 = !DILocation(line: 2349, column: 9, scope: !2404)
!2404 = distinct !DILexicalBlock(scope: !2400, file: !3, line: 2348, column: 23)
!2405 = !DILocation(line: 2349, column: 15, scope: !2404)
!2406 = !DILocation(line: 2349, column: 20, scope: !2404)
!2407 = !DILocation(line: 2350, column: 47, scope: !2404)
!2408 = !DILocation(line: 2350, column: 31, scope: !2404)
!2409 = !DILocation(line: 2350, column: 23, scope: !2404)
!2410 = !DILocation(line: 2350, column: 9, scope: !2404)
!2411 = !DILocation(line: 2350, column: 15, scope: !2404)
!2412 = !DILocation(line: 2350, column: 21, scope: !2404)
!2413 = !DILocation(line: 2351, column: 5, scope: !2404)
!2414 = !DILocation(line: 2353, column: 12, scope: !2391)
!2415 = !DILocation(line: 2353, column: 5, scope: !2391)
!2416 = distinct !DISubprogram(name: "cJSON_CreateArrayReference", scope: !3, file: !3, line: 2356, type: !2392, isLocal: false, isDefinition: true, scopeLine: 2356, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2417 = !DILocalVariable(name: "child", arg: 1, scope: !2416, file: !3, line: 2356, type: !69)
!2418 = !DILocation(line: 2356, column: 63, scope: !2416)
!2419 = !DILocalVariable(name: "item", scope: !2416, file: !3, line: 2357, type: !22)
!2420 = !DILocation(line: 2357, column: 12, scope: !2416)
!2421 = !DILocation(line: 2357, column: 19, scope: !2416)
!2422 = !DILocation(line: 2358, column: 9, scope: !2423)
!2423 = distinct !DILexicalBlock(scope: !2416, file: !3, line: 2358, column: 9)
!2424 = !DILocation(line: 2358, column: 14, scope: !2423)
!2425 = !DILocation(line: 2358, column: 9, scope: !2416)
!2426 = !DILocation(line: 2359, column: 9, scope: !2427)
!2427 = distinct !DILexicalBlock(scope: !2423, file: !3, line: 2358, column: 23)
!2428 = !DILocation(line: 2359, column: 15, scope: !2427)
!2429 = !DILocation(line: 2359, column: 20, scope: !2427)
!2430 = !DILocation(line: 2360, column: 47, scope: !2427)
!2431 = !DILocation(line: 2360, column: 31, scope: !2427)
!2432 = !DILocation(line: 2360, column: 23, scope: !2427)
!2433 = !DILocation(line: 2360, column: 9, scope: !2427)
!2434 = !DILocation(line: 2360, column: 15, scope: !2427)
!2435 = !DILocation(line: 2360, column: 21, scope: !2427)
!2436 = !DILocation(line: 2361, column: 5, scope: !2427)
!2437 = !DILocation(line: 2363, column: 12, scope: !2416)
!2438 = !DILocation(line: 2363, column: 5, scope: !2416)
!2439 = distinct !DISubprogram(name: "cJSON_CreateIntArray", scope: !3, file: !3, line: 2406, type: !2440, isLocal: false, isDefinition: true, scopeLine: 2407, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2440 = !DISubroutineType(types: !2441)
!2441 = !{!22, !2442, !11}
!2442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1000, size: 64)
!2443 = !DILocalVariable(name: "numbers", arg: 1, scope: !2439, file: !3, line: 2406, type: !2442)
!2444 = !DILocation(line: 2406, column: 55, scope: !2439)
!2445 = !DILocalVariable(name: "count", arg: 2, scope: !2439, file: !3, line: 2406, type: !11)
!2446 = !DILocation(line: 2406, column: 68, scope: !2439)
!2447 = !DILocalVariable(name: "i", scope: !2439, file: !3, line: 2408, type: !19)
!2448 = !DILocation(line: 2408, column: 12, scope: !2439)
!2449 = !DILocalVariable(name: "n", scope: !2439, file: !3, line: 2409, type: !22)
!2450 = !DILocation(line: 2409, column: 12, scope: !2439)
!2451 = !DILocalVariable(name: "p", scope: !2439, file: !3, line: 2410, type: !22)
!2452 = !DILocation(line: 2410, column: 12, scope: !2439)
!2453 = !DILocalVariable(name: "a", scope: !2439, file: !3, line: 2411, type: !22)
!2454 = !DILocation(line: 2411, column: 12, scope: !2439)
!2455 = !DILocation(line: 2413, column: 10, scope: !2456)
!2456 = distinct !DILexicalBlock(scope: !2439, file: !3, line: 2413, column: 9)
!2457 = !DILocation(line: 2413, column: 16, scope: !2456)
!2458 = !DILocation(line: 2413, column: 21, scope: !2456)
!2459 = !DILocation(line: 2413, column: 25, scope: !2460)
!2460 = !DILexicalBlockFile(scope: !2456, file: !3, discriminator: 1)
!2461 = !DILocation(line: 2413, column: 33, scope: !2460)
!2462 = !DILocation(line: 2413, column: 9, scope: !2463)
!2463 = !DILexicalBlockFile(scope: !2439, file: !3, discriminator: 1)
!2464 = !DILocation(line: 2415, column: 9, scope: !2465)
!2465 = distinct !DILexicalBlock(scope: !2456, file: !3, line: 2414, column: 5)
!2466 = !DILocation(line: 2418, column: 9, scope: !2439)
!2467 = !DILocation(line: 2418, column: 7, scope: !2439)
!2468 = !DILocation(line: 2419, column: 11, scope: !2469)
!2469 = distinct !DILexicalBlock(scope: !2439, file: !3, line: 2419, column: 5)
!2470 = !DILocation(line: 2419, column: 9, scope: !2469)
!2471 = !DILocation(line: 2419, column: 16, scope: !2472)
!2472 = !DILexicalBlockFile(scope: !2473, file: !3, discriminator: 1)
!2473 = distinct !DILexicalBlock(scope: !2469, file: !3, line: 2419, column: 5)
!2474 = !DILocation(line: 2419, column: 18, scope: !2472)
!2475 = !DILocation(line: 2419, column: 22, scope: !2476)
!2476 = !DILexicalBlockFile(scope: !2473, file: !3, discriminator: 2)
!2477 = !DILocation(line: 2419, column: 34, scope: !2476)
!2478 = !DILocation(line: 2419, column: 26, scope: !2476)
!2479 = !DILocation(line: 2419, column: 24, scope: !2476)
!2480 = !DILocation(line: 2419, column: 5, scope: !2481)
!2481 = !DILexicalBlockFile(scope: !2469, file: !3, discriminator: 3)
!2482 = !DILocation(line: 2421, column: 32, scope: !2483)
!2483 = distinct !DILexicalBlock(scope: !2473, file: !3, line: 2420, column: 5)
!2484 = !DILocation(line: 2421, column: 40, scope: !2483)
!2485 = !DILocation(line: 2421, column: 13, scope: !2483)
!2486 = !DILocation(line: 2421, column: 11, scope: !2483)
!2487 = !DILocation(line: 2422, column: 14, scope: !2488)
!2488 = distinct !DILexicalBlock(scope: !2483, file: !3, line: 2422, column: 13)
!2489 = !DILocation(line: 2422, column: 13, scope: !2483)
!2490 = !DILocation(line: 2424, column: 26, scope: !2491)
!2491 = distinct !DILexicalBlock(scope: !2488, file: !3, line: 2423, column: 9)
!2492 = !DILocation(line: 2424, column: 13, scope: !2491)
!2493 = !DILocation(line: 2425, column: 13, scope: !2491)
!2494 = !DILocation(line: 2427, column: 13, scope: !2495)
!2495 = distinct !DILexicalBlock(scope: !2483, file: !3, line: 2427, column: 12)
!2496 = !DILocation(line: 2427, column: 12, scope: !2483)
!2497 = !DILocation(line: 2429, column: 24, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2495, file: !3, line: 2428, column: 9)
!2499 = !DILocation(line: 2429, column: 13, scope: !2498)
!2500 = !DILocation(line: 2429, column: 16, scope: !2498)
!2501 = !DILocation(line: 2429, column: 22, scope: !2498)
!2502 = !DILocation(line: 2430, column: 9, scope: !2498)
!2503 = !DILocation(line: 2433, column: 27, scope: !2504)
!2504 = distinct !DILexicalBlock(scope: !2495, file: !3, line: 2432, column: 9)
!2505 = !DILocation(line: 2433, column: 30, scope: !2504)
!2506 = !DILocation(line: 2433, column: 13, scope: !2504)
!2507 = !DILocation(line: 2435, column: 13, scope: !2483)
!2508 = !DILocation(line: 2435, column: 11, scope: !2483)
!2509 = !DILocation(line: 2436, column: 5, scope: !2483)
!2510 = !DILocation(line: 2419, column: 43, scope: !2511)
!2511 = !DILexicalBlockFile(scope: !2473, file: !3, discriminator: 4)
!2512 = !DILocation(line: 2419, column: 5, scope: !2511)
!2513 = distinct !{!2513, !2514, !2515}
!2514 = !DILocation(line: 2419, column: 5, scope: !2469)
!2515 = !DILocation(line: 2436, column: 5, scope: !2469)
!2516 = !DILocation(line: 2438, column: 12, scope: !2439)
!2517 = !DILocation(line: 2438, column: 5, scope: !2439)
!2518 = !DILocation(line: 2439, column: 1, scope: !2439)
!2519 = distinct !DISubprogram(name: "suffix_object", scope: !3, file: !3, line: 1816, type: !1247, isLocal: true, isDefinition: true, scopeLine: 1817, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2520 = !DILocalVariable(name: "prev", arg: 1, scope: !2519, file: !3, line: 1816, type: !22)
!2521 = !DILocation(line: 1816, column: 34, scope: !2519)
!2522 = !DILocalVariable(name: "item", arg: 2, scope: !2519, file: !3, line: 1816, type: !22)
!2523 = !DILocation(line: 1816, column: 47, scope: !2519)
!2524 = !DILocation(line: 1818, column: 18, scope: !2519)
!2525 = !DILocation(line: 1818, column: 5, scope: !2519)
!2526 = !DILocation(line: 1818, column: 11, scope: !2519)
!2527 = !DILocation(line: 1818, column: 16, scope: !2519)
!2528 = !DILocation(line: 1819, column: 18, scope: !2519)
!2529 = !DILocation(line: 1819, column: 5, scope: !2519)
!2530 = !DILocation(line: 1819, column: 11, scope: !2519)
!2531 = !DILocation(line: 1819, column: 16, scope: !2519)
!2532 = !DILocation(line: 1820, column: 1, scope: !2519)
!2533 = distinct !DISubprogram(name: "cJSON_CreateFloatArray", scope: !3, file: !3, line: 2441, type: !2534, isLocal: false, isDefinition: true, scopeLine: 2442, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2534 = !DISubroutineType(types: !2535)
!2535 = !{!22, !2536, !11}
!2536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2537, size: 64)
!2537 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2538)
!2538 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!2539 = !DILocalVariable(name: "numbers", arg: 1, scope: !2533, file: !3, line: 2441, type: !2536)
!2540 = !DILocation(line: 2441, column: 59, scope: !2533)
!2541 = !DILocalVariable(name: "count", arg: 2, scope: !2533, file: !3, line: 2441, type: !11)
!2542 = !DILocation(line: 2441, column: 72, scope: !2533)
!2543 = !DILocalVariable(name: "i", scope: !2533, file: !3, line: 2443, type: !19)
!2544 = !DILocation(line: 2443, column: 12, scope: !2533)
!2545 = !DILocalVariable(name: "n", scope: !2533, file: !3, line: 2444, type: !22)
!2546 = !DILocation(line: 2444, column: 12, scope: !2533)
!2547 = !DILocalVariable(name: "p", scope: !2533, file: !3, line: 2445, type: !22)
!2548 = !DILocation(line: 2445, column: 12, scope: !2533)
!2549 = !DILocalVariable(name: "a", scope: !2533, file: !3, line: 2446, type: !22)
!2550 = !DILocation(line: 2446, column: 12, scope: !2533)
!2551 = !DILocation(line: 2448, column: 10, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2533, file: !3, line: 2448, column: 9)
!2553 = !DILocation(line: 2448, column: 16, scope: !2552)
!2554 = !DILocation(line: 2448, column: 21, scope: !2552)
!2555 = !DILocation(line: 2448, column: 25, scope: !2556)
!2556 = !DILexicalBlockFile(scope: !2552, file: !3, discriminator: 1)
!2557 = !DILocation(line: 2448, column: 33, scope: !2556)
!2558 = !DILocation(line: 2448, column: 9, scope: !2559)
!2559 = !DILexicalBlockFile(scope: !2533, file: !3, discriminator: 1)
!2560 = !DILocation(line: 2450, column: 9, scope: !2561)
!2561 = distinct !DILexicalBlock(scope: !2552, file: !3, line: 2449, column: 5)
!2562 = !DILocation(line: 2453, column: 9, scope: !2533)
!2563 = !DILocation(line: 2453, column: 7, scope: !2533)
!2564 = !DILocation(line: 2455, column: 11, scope: !2565)
!2565 = distinct !DILexicalBlock(scope: !2533, file: !3, line: 2455, column: 5)
!2566 = !DILocation(line: 2455, column: 9, scope: !2565)
!2567 = !DILocation(line: 2455, column: 16, scope: !2568)
!2568 = !DILexicalBlockFile(scope: !2569, file: !3, discriminator: 1)
!2569 = distinct !DILexicalBlock(scope: !2565, file: !3, line: 2455, column: 5)
!2570 = !DILocation(line: 2455, column: 18, scope: !2568)
!2571 = !DILocation(line: 2455, column: 22, scope: !2572)
!2572 = !DILexicalBlockFile(scope: !2569, file: !3, discriminator: 2)
!2573 = !DILocation(line: 2455, column: 34, scope: !2572)
!2574 = !DILocation(line: 2455, column: 26, scope: !2572)
!2575 = !DILocation(line: 2455, column: 24, scope: !2572)
!2576 = !DILocation(line: 2455, column: 5, scope: !2577)
!2577 = !DILexicalBlockFile(scope: !2565, file: !3, discriminator: 3)
!2578 = !DILocation(line: 2457, column: 40, scope: !2579)
!2579 = distinct !DILexicalBlock(scope: !2569, file: !3, line: 2456, column: 5)
!2580 = !DILocation(line: 2457, column: 48, scope: !2579)
!2581 = !DILocation(line: 2457, column: 32, scope: !2579)
!2582 = !DILocation(line: 2457, column: 13, scope: !2579)
!2583 = !DILocation(line: 2457, column: 11, scope: !2579)
!2584 = !DILocation(line: 2458, column: 13, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2579, file: !3, line: 2458, column: 12)
!2586 = !DILocation(line: 2458, column: 12, scope: !2579)
!2587 = !DILocation(line: 2460, column: 26, scope: !2588)
!2588 = distinct !DILexicalBlock(scope: !2585, file: !3, line: 2459, column: 9)
!2589 = !DILocation(line: 2460, column: 13, scope: !2588)
!2590 = !DILocation(line: 2461, column: 13, scope: !2588)
!2591 = !DILocation(line: 2463, column: 13, scope: !2592)
!2592 = distinct !DILexicalBlock(scope: !2579, file: !3, line: 2463, column: 12)
!2593 = !DILocation(line: 2463, column: 12, scope: !2579)
!2594 = !DILocation(line: 2465, column: 24, scope: !2595)
!2595 = distinct !DILexicalBlock(scope: !2592, file: !3, line: 2464, column: 9)
!2596 = !DILocation(line: 2465, column: 13, scope: !2595)
!2597 = !DILocation(line: 2465, column: 16, scope: !2595)
!2598 = !DILocation(line: 2465, column: 22, scope: !2595)
!2599 = !DILocation(line: 2466, column: 9, scope: !2595)
!2600 = !DILocation(line: 2469, column: 27, scope: !2601)
!2601 = distinct !DILexicalBlock(scope: !2592, file: !3, line: 2468, column: 9)
!2602 = !DILocation(line: 2469, column: 30, scope: !2601)
!2603 = !DILocation(line: 2469, column: 13, scope: !2601)
!2604 = !DILocation(line: 2471, column: 13, scope: !2579)
!2605 = !DILocation(line: 2471, column: 11, scope: !2579)
!2606 = !DILocation(line: 2472, column: 5, scope: !2579)
!2607 = !DILocation(line: 2455, column: 43, scope: !2608)
!2608 = !DILexicalBlockFile(scope: !2569, file: !3, discriminator: 4)
!2609 = !DILocation(line: 2455, column: 5, scope: !2608)
!2610 = distinct !{!2610, !2611, !2612}
!2611 = !DILocation(line: 2455, column: 5, scope: !2565)
!2612 = !DILocation(line: 2472, column: 5, scope: !2565)
!2613 = !DILocation(line: 2474, column: 12, scope: !2533)
!2614 = !DILocation(line: 2474, column: 5, scope: !2533)
!2615 = !DILocation(line: 2475, column: 1, scope: !2533)
!2616 = distinct !DISubprogram(name: "cJSON_CreateDoubleArray", scope: !3, file: !3, line: 2477, type: !2617, isLocal: false, isDefinition: true, scopeLine: 2478, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2617 = !DISubroutineType(types: !2618)
!2618 = !{!22, !2619, !11}
!2619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1666, size: 64)
!2620 = !DILocalVariable(name: "numbers", arg: 1, scope: !2616, file: !3, line: 2477, type: !2619)
!2621 = !DILocation(line: 2477, column: 61, scope: !2616)
!2622 = !DILocalVariable(name: "count", arg: 2, scope: !2616, file: !3, line: 2477, type: !11)
!2623 = !DILocation(line: 2477, column: 74, scope: !2616)
!2624 = !DILocalVariable(name: "i", scope: !2616, file: !3, line: 2479, type: !19)
!2625 = !DILocation(line: 2479, column: 12, scope: !2616)
!2626 = !DILocalVariable(name: "n", scope: !2616, file: !3, line: 2480, type: !22)
!2627 = !DILocation(line: 2480, column: 12, scope: !2616)
!2628 = !DILocalVariable(name: "p", scope: !2616, file: !3, line: 2481, type: !22)
!2629 = !DILocation(line: 2481, column: 12, scope: !2616)
!2630 = !DILocalVariable(name: "a", scope: !2616, file: !3, line: 2482, type: !22)
!2631 = !DILocation(line: 2482, column: 12, scope: !2616)
!2632 = !DILocation(line: 2484, column: 10, scope: !2633)
!2633 = distinct !DILexicalBlock(scope: !2616, file: !3, line: 2484, column: 9)
!2634 = !DILocation(line: 2484, column: 16, scope: !2633)
!2635 = !DILocation(line: 2484, column: 21, scope: !2633)
!2636 = !DILocation(line: 2484, column: 25, scope: !2637)
!2637 = !DILexicalBlockFile(scope: !2633, file: !3, discriminator: 1)
!2638 = !DILocation(line: 2484, column: 33, scope: !2637)
!2639 = !DILocation(line: 2484, column: 9, scope: !2640)
!2640 = !DILexicalBlockFile(scope: !2616, file: !3, discriminator: 1)
!2641 = !DILocation(line: 2486, column: 9, scope: !2642)
!2642 = distinct !DILexicalBlock(scope: !2633, file: !3, line: 2485, column: 5)
!2643 = !DILocation(line: 2489, column: 9, scope: !2616)
!2644 = !DILocation(line: 2489, column: 7, scope: !2616)
!2645 = !DILocation(line: 2491, column: 11, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2616, file: !3, line: 2491, column: 5)
!2647 = !DILocation(line: 2491, column: 9, scope: !2646)
!2648 = !DILocation(line: 2491, column: 15, scope: !2649)
!2649 = !DILexicalBlockFile(scope: !2650, file: !3, discriminator: 1)
!2650 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 2491, column: 5)
!2651 = !DILocation(line: 2491, column: 17, scope: !2649)
!2652 = !DILocation(line: 2491, column: 21, scope: !2653)
!2653 = !DILexicalBlockFile(scope: !2650, file: !3, discriminator: 2)
!2654 = !DILocation(line: 2491, column: 33, scope: !2653)
!2655 = !DILocation(line: 2491, column: 25, scope: !2653)
!2656 = !DILocation(line: 2491, column: 23, scope: !2653)
!2657 = !DILocation(line: 2491, column: 5, scope: !2658)
!2658 = !DILexicalBlockFile(scope: !2646, file: !3, discriminator: 3)
!2659 = !DILocation(line: 2493, column: 32, scope: !2660)
!2660 = distinct !DILexicalBlock(scope: !2650, file: !3, line: 2492, column: 5)
!2661 = !DILocation(line: 2493, column: 40, scope: !2660)
!2662 = !DILocation(line: 2493, column: 13, scope: !2660)
!2663 = !DILocation(line: 2493, column: 11, scope: !2660)
!2664 = !DILocation(line: 2494, column: 13, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 2494, column: 12)
!2666 = !DILocation(line: 2494, column: 12, scope: !2660)
!2667 = !DILocation(line: 2496, column: 26, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2665, file: !3, line: 2495, column: 9)
!2669 = !DILocation(line: 2496, column: 13, scope: !2668)
!2670 = !DILocation(line: 2497, column: 13, scope: !2668)
!2671 = !DILocation(line: 2499, column: 13, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 2499, column: 12)
!2673 = !DILocation(line: 2499, column: 12, scope: !2660)
!2674 = !DILocation(line: 2501, column: 24, scope: !2675)
!2675 = distinct !DILexicalBlock(scope: !2672, file: !3, line: 2500, column: 9)
!2676 = !DILocation(line: 2501, column: 13, scope: !2675)
!2677 = !DILocation(line: 2501, column: 16, scope: !2675)
!2678 = !DILocation(line: 2501, column: 22, scope: !2675)
!2679 = !DILocation(line: 2502, column: 9, scope: !2675)
!2680 = !DILocation(line: 2505, column: 27, scope: !2681)
!2681 = distinct !DILexicalBlock(scope: !2672, file: !3, line: 2504, column: 9)
!2682 = !DILocation(line: 2505, column: 30, scope: !2681)
!2683 = !DILocation(line: 2505, column: 13, scope: !2681)
!2684 = !DILocation(line: 2507, column: 13, scope: !2660)
!2685 = !DILocation(line: 2507, column: 11, scope: !2660)
!2686 = !DILocation(line: 2508, column: 5, scope: !2660)
!2687 = !DILocation(line: 2491, column: 42, scope: !2688)
!2688 = !DILexicalBlockFile(scope: !2650, file: !3, discriminator: 4)
!2689 = !DILocation(line: 2491, column: 5, scope: !2688)
!2690 = distinct !{!2690, !2691, !2692}
!2691 = !DILocation(line: 2491, column: 5, scope: !2646)
!2692 = !DILocation(line: 2508, column: 5, scope: !2646)
!2693 = !DILocation(line: 2510, column: 12, scope: !2616)
!2694 = !DILocation(line: 2510, column: 5, scope: !2616)
!2695 = !DILocation(line: 2511, column: 1, scope: !2616)
!2696 = distinct !DISubprogram(name: "cJSON_CreateStringArray", scope: !3, file: !3, line: 2513, type: !2697, isLocal: false, isDefinition: true, scopeLine: 2514, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2697 = !DISubroutineType(types: !2698)
!2698 = !{!22, !292, !11}
!2699 = !DILocalVariable(name: "strings", arg: 1, scope: !2696, file: !3, line: 2513, type: !292)
!2700 = !DILocation(line: 2513, column: 60, scope: !2696)
!2701 = !DILocalVariable(name: "count", arg: 2, scope: !2696, file: !3, line: 2513, type: !11)
!2702 = !DILocation(line: 2513, column: 73, scope: !2696)
!2703 = !DILocalVariable(name: "i", scope: !2696, file: !3, line: 2515, type: !19)
!2704 = !DILocation(line: 2515, column: 12, scope: !2696)
!2705 = !DILocalVariable(name: "n", scope: !2696, file: !3, line: 2516, type: !22)
!2706 = !DILocation(line: 2516, column: 12, scope: !2696)
!2707 = !DILocalVariable(name: "p", scope: !2696, file: !3, line: 2517, type: !22)
!2708 = !DILocation(line: 2517, column: 12, scope: !2696)
!2709 = !DILocalVariable(name: "a", scope: !2696, file: !3, line: 2518, type: !22)
!2710 = !DILocation(line: 2518, column: 12, scope: !2696)
!2711 = !DILocation(line: 2520, column: 10, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 2520, column: 9)
!2713 = !DILocation(line: 2520, column: 16, scope: !2712)
!2714 = !DILocation(line: 2520, column: 21, scope: !2712)
!2715 = !DILocation(line: 2520, column: 25, scope: !2716)
!2716 = !DILexicalBlockFile(scope: !2712, file: !3, discriminator: 1)
!2717 = !DILocation(line: 2520, column: 33, scope: !2716)
!2718 = !DILocation(line: 2520, column: 9, scope: !2719)
!2719 = !DILexicalBlockFile(scope: !2696, file: !3, discriminator: 1)
!2720 = !DILocation(line: 2522, column: 9, scope: !2721)
!2721 = distinct !DILexicalBlock(scope: !2712, file: !3, line: 2521, column: 5)
!2722 = !DILocation(line: 2525, column: 9, scope: !2696)
!2723 = !DILocation(line: 2525, column: 7, scope: !2696)
!2724 = !DILocation(line: 2527, column: 12, scope: !2725)
!2725 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 2527, column: 5)
!2726 = !DILocation(line: 2527, column: 10, scope: !2725)
!2727 = !DILocation(line: 2527, column: 17, scope: !2728)
!2728 = !DILexicalBlockFile(scope: !2729, file: !3, discriminator: 1)
!2729 = distinct !DILexicalBlock(scope: !2725, file: !3, line: 2527, column: 5)
!2730 = !DILocation(line: 2527, column: 19, scope: !2728)
!2731 = !DILocation(line: 2527, column: 23, scope: !2732)
!2732 = !DILexicalBlockFile(scope: !2729, file: !3, discriminator: 2)
!2733 = !DILocation(line: 2527, column: 35, scope: !2732)
!2734 = !DILocation(line: 2527, column: 27, scope: !2732)
!2735 = !DILocation(line: 2527, column: 25, scope: !2732)
!2736 = !DILocation(line: 2527, column: 5, scope: !2737)
!2737 = !DILexicalBlockFile(scope: !2725, file: !3, discriminator: 3)
!2738 = !DILocation(line: 2529, column: 32, scope: !2739)
!2739 = distinct !DILexicalBlock(scope: !2729, file: !3, line: 2528, column: 5)
!2740 = !DILocation(line: 2529, column: 40, scope: !2739)
!2741 = !DILocation(line: 2529, column: 13, scope: !2739)
!2742 = !DILocation(line: 2529, column: 11, scope: !2739)
!2743 = !DILocation(line: 2530, column: 13, scope: !2744)
!2744 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 2530, column: 12)
!2745 = !DILocation(line: 2530, column: 12, scope: !2739)
!2746 = !DILocation(line: 2532, column: 26, scope: !2747)
!2747 = distinct !DILexicalBlock(scope: !2744, file: !3, line: 2531, column: 9)
!2748 = !DILocation(line: 2532, column: 13, scope: !2747)
!2749 = !DILocation(line: 2533, column: 13, scope: !2747)
!2750 = !DILocation(line: 2535, column: 13, scope: !2751)
!2751 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 2535, column: 12)
!2752 = !DILocation(line: 2535, column: 12, scope: !2739)
!2753 = !DILocation(line: 2537, column: 24, scope: !2754)
!2754 = distinct !DILexicalBlock(scope: !2751, file: !3, line: 2536, column: 9)
!2755 = !DILocation(line: 2537, column: 13, scope: !2754)
!2756 = !DILocation(line: 2537, column: 16, scope: !2754)
!2757 = !DILocation(line: 2537, column: 22, scope: !2754)
!2758 = !DILocation(line: 2538, column: 9, scope: !2754)
!2759 = !DILocation(line: 2541, column: 27, scope: !2760)
!2760 = distinct !DILexicalBlock(scope: !2751, file: !3, line: 2540, column: 9)
!2761 = !DILocation(line: 2541, column: 29, scope: !2760)
!2762 = !DILocation(line: 2541, column: 13, scope: !2760)
!2763 = !DILocation(line: 2543, column: 13, scope: !2739)
!2764 = !DILocation(line: 2543, column: 11, scope: !2739)
!2765 = !DILocation(line: 2544, column: 5, scope: !2739)
!2766 = !DILocation(line: 2527, column: 44, scope: !2767)
!2767 = !DILexicalBlockFile(scope: !2729, file: !3, discriminator: 4)
!2768 = !DILocation(line: 2527, column: 5, scope: !2767)
!2769 = distinct !{!2769, !2770, !2771}
!2770 = !DILocation(line: 2527, column: 5, scope: !2725)
!2771 = !DILocation(line: 2544, column: 5, scope: !2725)
!2772 = !DILocation(line: 2546, column: 12, scope: !2696)
!2773 = !DILocation(line: 2546, column: 5, scope: !2696)
!2774 = !DILocation(line: 2547, column: 1, scope: !2696)
!2775 = distinct !DISubprogram(name: "cJSON_Duplicate", scope: !3, file: !3, line: 2550, type: !2776, isLocal: false, isDefinition: true, scopeLine: 2551, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2776 = !DISubroutineType(types: !2777)
!2777 = !{!22, !69, !16}
!2778 = !DILocalVariable(name: "item", arg: 1, scope: !2775, file: !3, line: 2550, type: !69)
!2779 = !DILocation(line: 2550, column: 52, scope: !2775)
!2780 = !DILocalVariable(name: "recurse", arg: 2, scope: !2775, file: !3, line: 2550, type: !16)
!2781 = !DILocation(line: 2550, column: 69, scope: !2775)
!2782 = !DILocalVariable(name: "newitem", scope: !2775, file: !3, line: 2552, type: !22)
!2783 = !DILocation(line: 2552, column: 12, scope: !2775)
!2784 = !DILocalVariable(name: "child", scope: !2775, file: !3, line: 2553, type: !22)
!2785 = !DILocation(line: 2553, column: 12, scope: !2775)
!2786 = !DILocalVariable(name: "next", scope: !2775, file: !3, line: 2554, type: !22)
!2787 = !DILocation(line: 2554, column: 12, scope: !2775)
!2788 = !DILocalVariable(name: "newchild", scope: !2775, file: !3, line: 2555, type: !22)
!2789 = !DILocation(line: 2555, column: 12, scope: !2775)
!2790 = !DILocation(line: 2558, column: 10, scope: !2791)
!2791 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2558, column: 9)
!2792 = !DILocation(line: 2558, column: 9, scope: !2775)
!2793 = !DILocation(line: 2560, column: 9, scope: !2794)
!2794 = distinct !DILexicalBlock(scope: !2791, file: !3, line: 2559, column: 5)
!2795 = !DILocation(line: 2563, column: 15, scope: !2775)
!2796 = !DILocation(line: 2563, column: 13, scope: !2775)
!2797 = !DILocation(line: 2564, column: 10, scope: !2798)
!2798 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2564, column: 9)
!2799 = !DILocation(line: 2564, column: 9, scope: !2775)
!2800 = !DILocation(line: 2566, column: 9, scope: !2801)
!2801 = distinct !DILexicalBlock(scope: !2798, file: !3, line: 2565, column: 5)
!2802 = !DILocation(line: 2569, column: 21, scope: !2775)
!2803 = !DILocation(line: 2569, column: 27, scope: !2775)
!2804 = !DILocation(line: 2569, column: 32, scope: !2775)
!2805 = !DILocation(line: 2569, column: 5, scope: !2775)
!2806 = !DILocation(line: 2569, column: 14, scope: !2775)
!2807 = !DILocation(line: 2569, column: 19, scope: !2775)
!2808 = !DILocation(line: 2570, column: 25, scope: !2775)
!2809 = !DILocation(line: 2570, column: 31, scope: !2775)
!2810 = !DILocation(line: 2570, column: 5, scope: !2775)
!2811 = !DILocation(line: 2570, column: 14, scope: !2775)
!2812 = !DILocation(line: 2570, column: 23, scope: !2775)
!2813 = !DILocation(line: 2571, column: 28, scope: !2775)
!2814 = !DILocation(line: 2571, column: 34, scope: !2775)
!2815 = !DILocation(line: 2571, column: 5, scope: !2775)
!2816 = !DILocation(line: 2571, column: 14, scope: !2775)
!2817 = !DILocation(line: 2571, column: 26, scope: !2775)
!2818 = !DILocation(line: 2572, column: 9, scope: !2819)
!2819 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2572, column: 9)
!2820 = !DILocation(line: 2572, column: 15, scope: !2819)
!2821 = !DILocation(line: 2572, column: 9, scope: !2775)
!2822 = !DILocation(line: 2574, column: 68, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2819, file: !3, line: 2573, column: 5)
!2824 = !DILocation(line: 2574, column: 74, scope: !2823)
!2825 = !DILocation(line: 2574, column: 39, scope: !2823)
!2826 = !DILocation(line: 2574, column: 9, scope: !2823)
!2827 = !DILocation(line: 2574, column: 18, scope: !2823)
!2828 = !DILocation(line: 2574, column: 30, scope: !2823)
!2829 = !DILocation(line: 2575, column: 14, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2823, file: !3, line: 2575, column: 13)
!2831 = !DILocation(line: 2575, column: 23, scope: !2830)
!2832 = !DILocation(line: 2575, column: 13, scope: !2823)
!2833 = !DILocation(line: 2577, column: 13, scope: !2834)
!2834 = distinct !DILexicalBlock(scope: !2830, file: !3, line: 2576, column: 9)
!2835 = !DILocation(line: 2579, column: 5, scope: !2823)
!2836 = !DILocation(line: 2580, column: 9, scope: !2837)
!2837 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2580, column: 9)
!2838 = !DILocation(line: 2580, column: 15, scope: !2837)
!2839 = !DILocation(line: 2580, column: 9, scope: !2775)
!2840 = !DILocation(line: 2582, column: 28, scope: !2841)
!2841 = distinct !DILexicalBlock(scope: !2837, file: !3, line: 2581, column: 5)
!2842 = !DILocation(line: 2582, column: 34, scope: !2841)
!2843 = !DILocation(line: 2582, column: 38, scope: !2841)
!2844 = !DILocation(line: 2582, column: 27, scope: !2841)
!2845 = !DILocation(line: 2582, column: 62, scope: !2846)
!2846 = !DILexicalBlockFile(scope: !2841, file: !3, discriminator: 1)
!2847 = !DILocation(line: 2582, column: 68, scope: !2846)
!2848 = !DILocation(line: 2582, column: 27, scope: !2846)
!2849 = !DILocation(line: 2582, column: 113, scope: !2850)
!2850 = !DILexicalBlockFile(scope: !2841, file: !3, discriminator: 2)
!2851 = !DILocation(line: 2582, column: 119, scope: !2850)
!2852 = !DILocation(line: 2582, column: 84, scope: !2850)
!2853 = !DILocation(line: 2582, column: 27, scope: !2850)
!2854 = !DILocation(line: 2582, column: 27, scope: !2855)
!2855 = !DILexicalBlockFile(scope: !2841, file: !3, discriminator: 3)
!2856 = !DILocation(line: 2582, column: 9, scope: !2855)
!2857 = !DILocation(line: 2582, column: 18, scope: !2855)
!2858 = !DILocation(line: 2582, column: 25, scope: !2855)
!2859 = !DILocation(line: 2583, column: 14, scope: !2860)
!2860 = distinct !DILexicalBlock(scope: !2841, file: !3, line: 2583, column: 13)
!2861 = !DILocation(line: 2583, column: 23, scope: !2860)
!2862 = !DILocation(line: 2583, column: 13, scope: !2841)
!2863 = !DILocation(line: 2585, column: 13, scope: !2864)
!2864 = distinct !DILexicalBlock(scope: !2860, file: !3, line: 2584, column: 9)
!2865 = !DILocation(line: 2587, column: 5, scope: !2841)
!2866 = !DILocation(line: 2589, column: 10, scope: !2867)
!2867 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2589, column: 9)
!2868 = !DILocation(line: 2589, column: 9, scope: !2775)
!2869 = !DILocation(line: 2591, column: 16, scope: !2870)
!2870 = distinct !DILexicalBlock(scope: !2867, file: !3, line: 2590, column: 5)
!2871 = !DILocation(line: 2591, column: 9, scope: !2870)
!2872 = !DILocation(line: 2594, column: 13, scope: !2775)
!2873 = !DILocation(line: 2594, column: 19, scope: !2775)
!2874 = !DILocation(line: 2594, column: 11, scope: !2775)
!2875 = !DILocation(line: 2595, column: 5, scope: !2775)
!2876 = !DILocation(line: 2595, column: 12, scope: !2877)
!2877 = !DILexicalBlockFile(scope: !2775, file: !3, discriminator: 1)
!2878 = !DILocation(line: 2595, column: 18, scope: !2877)
!2879 = !DILocation(line: 2595, column: 5, scope: !2877)
!2880 = !DILocation(line: 2597, column: 36, scope: !2881)
!2881 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2596, column: 5)
!2882 = !DILocation(line: 2597, column: 20, scope: !2881)
!2883 = !DILocation(line: 2597, column: 18, scope: !2881)
!2884 = !DILocation(line: 2598, column: 14, scope: !2885)
!2885 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 2598, column: 13)
!2886 = !DILocation(line: 2598, column: 13, scope: !2881)
!2887 = !DILocation(line: 2600, column: 13, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2885, file: !3, line: 2599, column: 9)
!2889 = !DILocation(line: 2602, column: 13, scope: !2890)
!2890 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 2602, column: 13)
!2891 = !DILocation(line: 2602, column: 18, scope: !2890)
!2892 = !DILocation(line: 2602, column: 13, scope: !2881)
!2893 = !DILocation(line: 2605, column: 26, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2890, file: !3, line: 2603, column: 9)
!2895 = !DILocation(line: 2605, column: 13, scope: !2894)
!2896 = !DILocation(line: 2605, column: 19, scope: !2894)
!2897 = !DILocation(line: 2605, column: 24, scope: !2894)
!2898 = !DILocation(line: 2606, column: 30, scope: !2894)
!2899 = !DILocation(line: 2606, column: 13, scope: !2894)
!2900 = !DILocation(line: 2606, column: 23, scope: !2894)
!2901 = !DILocation(line: 2606, column: 28, scope: !2894)
!2902 = !DILocation(line: 2607, column: 20, scope: !2894)
!2903 = !DILocation(line: 2607, column: 18, scope: !2894)
!2904 = !DILocation(line: 2608, column: 9, scope: !2894)
!2905 = !DILocation(line: 2612, column: 30, scope: !2906)
!2906 = distinct !DILexicalBlock(scope: !2890, file: !3, line: 2610, column: 9)
!2907 = !DILocation(line: 2612, column: 13, scope: !2906)
!2908 = !DILocation(line: 2612, column: 22, scope: !2906)
!2909 = !DILocation(line: 2612, column: 28, scope: !2906)
!2910 = !DILocation(line: 2613, column: 20, scope: !2906)
!2911 = !DILocation(line: 2613, column: 18, scope: !2906)
!2912 = !DILocation(line: 2615, column: 17, scope: !2881)
!2913 = !DILocation(line: 2615, column: 24, scope: !2881)
!2914 = !DILocation(line: 2615, column: 15, scope: !2881)
!2915 = !DILocation(line: 2595, column: 5, scope: !2916)
!2916 = !DILexicalBlockFile(scope: !2775, file: !3, discriminator: 2)
!2917 = distinct !{!2917, !2875, !2918}
!2918 = !DILocation(line: 2616, column: 5, scope: !2775)
!2919 = !DILocation(line: 2618, column: 12, scope: !2775)
!2920 = !DILocation(line: 2618, column: 5, scope: !2775)
!2921 = !DILocation(line: 2621, column: 9, scope: !2922)
!2922 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2621, column: 9)
!2923 = !DILocation(line: 2621, column: 17, scope: !2922)
!2924 = !DILocation(line: 2621, column: 9, scope: !2775)
!2925 = !DILocation(line: 2623, column: 22, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !2922, file: !3, line: 2622, column: 5)
!2927 = !DILocation(line: 2623, column: 9, scope: !2926)
!2928 = !DILocation(line: 2624, column: 5, scope: !2926)
!2929 = !DILocation(line: 2626, column: 5, scope: !2775)
!2930 = !DILocation(line: 2627, column: 1, scope: !2775)
!2931 = distinct !DISubprogram(name: "cJSON_Minify", scope: !3, file: !3, line: 2629, type: !2932, isLocal: false, isDefinition: true, scopeLine: 2630, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!2932 = !DISubroutineType(types: !2933)
!2933 = !{null, !15}
!2934 = !DILocalVariable(name: "json", arg: 1, scope: !2931, file: !3, line: 2629, type: !15)
!2935 = !DILocation(line: 2629, column: 39, scope: !2931)
!2936 = !DILocalVariable(name: "into", scope: !2931, file: !3, line: 2631, type: !18)
!2937 = !DILocation(line: 2631, column: 20, scope: !2931)
!2938 = !DILocation(line: 2631, column: 43, scope: !2931)
!2939 = !DILocation(line: 2633, column: 9, scope: !2940)
!2940 = distinct !DILexicalBlock(scope: !2931, file: !3, line: 2633, column: 9)
!2941 = !DILocation(line: 2633, column: 14, scope: !2940)
!2942 = !DILocation(line: 2633, column: 9, scope: !2931)
!2943 = !DILocation(line: 2635, column: 9, scope: !2944)
!2944 = distinct !DILexicalBlock(scope: !2940, file: !3, line: 2634, column: 5)
!2945 = !DILocation(line: 2638, column: 5, scope: !2931)
!2946 = !DILocation(line: 2638, column: 13, scope: !2947)
!2947 = !DILexicalBlockFile(scope: !2931, file: !3, discriminator: 1)
!2948 = !DILocation(line: 2638, column: 12, scope: !2947)
!2949 = !DILocation(line: 2638, column: 5, scope: !2947)
!2950 = !DILocation(line: 2640, column: 14, scope: !2951)
!2951 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 2640, column: 13)
!2952 = distinct !DILexicalBlock(scope: !2931, file: !3, line: 2639, column: 5)
!2953 = !DILocation(line: 2640, column: 13, scope: !2951)
!2954 = !DILocation(line: 2640, column: 19, scope: !2951)
!2955 = !DILocation(line: 2640, column: 13, scope: !2952)
!2956 = !DILocation(line: 2642, column: 17, scope: !2957)
!2957 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2641, column: 9)
!2958 = !DILocation(line: 2643, column: 9, scope: !2957)
!2959 = !DILocation(line: 2644, column: 19, scope: !2960)
!2960 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2644, column: 18)
!2961 = !DILocation(line: 2644, column: 18, scope: !2960)
!2962 = !DILocation(line: 2644, column: 24, scope: !2960)
!2963 = !DILocation(line: 2644, column: 18, scope: !2951)
!2964 = !DILocation(line: 2647, column: 17, scope: !2965)
!2965 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 2645, column: 9)
!2966 = !DILocation(line: 2648, column: 9, scope: !2965)
!2967 = !DILocation(line: 2649, column: 19, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 2649, column: 18)
!2969 = !DILocation(line: 2649, column: 18, scope: !2968)
!2970 = !DILocation(line: 2649, column: 24, scope: !2968)
!2971 = !DILocation(line: 2649, column: 18, scope: !2960)
!2972 = !DILocation(line: 2651, column: 17, scope: !2973)
!2973 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 2650, column: 9)
!2974 = !DILocation(line: 2652, column: 9, scope: !2973)
!2975 = !DILocation(line: 2653, column: 19, scope: !2976)
!2976 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 2653, column: 18)
!2977 = !DILocation(line: 2653, column: 18, scope: !2976)
!2978 = !DILocation(line: 2653, column: 23, scope: !2976)
!2979 = !DILocation(line: 2653, column: 18, scope: !2968)
!2980 = !DILocation(line: 2655, column: 17, scope: !2981)
!2981 = distinct !DILexicalBlock(scope: !2976, file: !3, line: 2654, column: 9)
!2982 = !DILocation(line: 2656, column: 9, scope: !2981)
!2983 = !DILocation(line: 2657, column: 20, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2976, file: !3, line: 2657, column: 18)
!2985 = !DILocation(line: 2657, column: 19, scope: !2984)
!2986 = !DILocation(line: 2657, column: 25, scope: !2984)
!2987 = !DILocation(line: 2657, column: 33, scope: !2984)
!2988 = !DILocation(line: 2657, column: 37, scope: !2989)
!2989 = !DILexicalBlockFile(scope: !2984, file: !3, discriminator: 1)
!2990 = !DILocation(line: 2657, column: 45, scope: !2989)
!2991 = !DILocation(line: 2657, column: 18, scope: !2992)
!2992 = !DILexicalBlockFile(scope: !2976, file: !3, discriminator: 1)
!2993 = !DILocation(line: 2660, column: 13, scope: !2994)
!2994 = distinct !DILexicalBlock(scope: !2984, file: !3, line: 2658, column: 9)
!2995 = !DILocation(line: 2660, column: 21, scope: !2996)
!2996 = !DILexicalBlockFile(scope: !2994, file: !3, discriminator: 1)
!2997 = !DILocation(line: 2660, column: 20, scope: !2996)
!2998 = !DILocation(line: 2660, column: 26, scope: !2996)
!2999 = !DILocation(line: 2660, column: 31, scope: !3000)
!3000 = !DILexicalBlockFile(scope: !2994, file: !3, discriminator: 2)
!3001 = !DILocation(line: 2660, column: 30, scope: !3000)
!3002 = !DILocation(line: 2660, column: 36, scope: !3000)
!3003 = !DILocation(line: 2660, column: 13, scope: !3004)
!3004 = !DILexicalBlockFile(scope: !2994, file: !3, discriminator: 3)
!3005 = !DILocation(line: 2662, column: 21, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !2994, file: !3, line: 2661, column: 13)
!3007 = !DILocation(line: 2660, column: 13, scope: !3008)
!3008 = !DILexicalBlockFile(scope: !2994, file: !3, discriminator: 4)
!3009 = distinct !{!3009, !2993, !3010}
!3010 = !DILocation(line: 2663, column: 13, scope: !2994)
!3011 = !DILocation(line: 2664, column: 9, scope: !2994)
!3012 = !DILocation(line: 2665, column: 20, scope: !3013)
!3013 = distinct !DILexicalBlock(scope: !2984, file: !3, line: 2665, column: 18)
!3014 = !DILocation(line: 2665, column: 19, scope: !3013)
!3015 = !DILocation(line: 2665, column: 25, scope: !3013)
!3016 = !DILocation(line: 2665, column: 33, scope: !3013)
!3017 = !DILocation(line: 2665, column: 37, scope: !3018)
!3018 = !DILexicalBlockFile(scope: !3013, file: !3, discriminator: 1)
!3019 = !DILocation(line: 2665, column: 45, scope: !3018)
!3020 = !DILocation(line: 2665, column: 18, scope: !2989)
!3021 = !DILocation(line: 2668, column: 13, scope: !3022)
!3022 = distinct !DILexicalBlock(scope: !3013, file: !3, line: 2666, column: 9)
!3023 = !DILocation(line: 2668, column: 21, scope: !3024)
!3024 = !DILexicalBlockFile(scope: !3022, file: !3, discriminator: 1)
!3025 = !DILocation(line: 2668, column: 20, scope: !3024)
!3026 = !DILocation(line: 2668, column: 26, scope: !3024)
!3027 = !DILocation(line: 2668, column: 33, scope: !3028)
!3028 = !DILexicalBlockFile(scope: !3022, file: !3, discriminator: 2)
!3029 = !DILocation(line: 2668, column: 32, scope: !3028)
!3030 = !DILocation(line: 2668, column: 38, scope: !3028)
!3031 = !DILocation(line: 2668, column: 46, scope: !3028)
!3032 = !DILocation(line: 2668, column: 50, scope: !3033)
!3033 = !DILexicalBlockFile(scope: !3022, file: !3, discriminator: 3)
!3034 = !DILocation(line: 2668, column: 58, scope: !3033)
!3035 = !DILocation(line: 2668, column: 29, scope: !3036)
!3036 = !DILexicalBlockFile(scope: !3022, file: !3, discriminator: 4)
!3037 = !DILocation(line: 2668, column: 13, scope: !3038)
!3038 = !DILexicalBlockFile(scope: !3022, file: !3, discriminator: 5)
!3039 = !DILocation(line: 2670, column: 21, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 2669, column: 13)
!3041 = !DILocation(line: 2668, column: 13, scope: !3042)
!3042 = !DILexicalBlockFile(scope: !3022, file: !3, discriminator: 6)
!3043 = distinct !{!3043, !3021, !3044}
!3044 = !DILocation(line: 2671, column: 13, scope: !3022)
!3045 = !DILocation(line: 2672, column: 18, scope: !3022)
!3046 = !DILocation(line: 2673, column: 9, scope: !3022)
!3047 = !DILocation(line: 2674, column: 19, scope: !3048)
!3048 = distinct !DILexicalBlock(scope: !3013, file: !3, line: 2674, column: 18)
!3049 = !DILocation(line: 2674, column: 18, scope: !3048)
!3050 = !DILocation(line: 2674, column: 24, scope: !3048)
!3051 = !DILocation(line: 2674, column: 18, scope: !3013)
!3052 = !DILocation(line: 2677, column: 43, scope: !3053)
!3053 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 2675, column: 9)
!3054 = !DILocation(line: 2677, column: 38, scope: !3053)
!3055 = !DILocation(line: 2677, column: 18, scope: !3053)
!3056 = !DILocation(line: 2677, column: 21, scope: !3053)
!3057 = !DILocation(line: 2678, column: 13, scope: !3053)
!3058 = !DILocation(line: 2678, column: 21, scope: !3059)
!3059 = !DILexicalBlockFile(scope: !3053, file: !3, discriminator: 1)
!3060 = !DILocation(line: 2678, column: 20, scope: !3059)
!3061 = !DILocation(line: 2678, column: 26, scope: !3059)
!3062 = !DILocation(line: 2678, column: 31, scope: !3063)
!3063 = !DILexicalBlockFile(scope: !3053, file: !3, discriminator: 2)
!3064 = !DILocation(line: 2678, column: 30, scope: !3063)
!3065 = !DILocation(line: 2678, column: 36, scope: !3063)
!3066 = !DILocation(line: 2678, column: 13, scope: !3067)
!3067 = !DILexicalBlockFile(scope: !3053, file: !3, discriminator: 3)
!3068 = !DILocation(line: 2680, column: 22, scope: !3069)
!3069 = distinct !DILexicalBlock(scope: !3070, file: !3, line: 2680, column: 21)
!3070 = distinct !DILexicalBlock(scope: !3053, file: !3, line: 2679, column: 13)
!3071 = !DILocation(line: 2680, column: 21, scope: !3069)
!3072 = !DILocation(line: 2680, column: 27, scope: !3069)
!3073 = !DILocation(line: 2680, column: 21, scope: !3070)
!3074 = !DILocation(line: 2682, column: 51, scope: !3075)
!3075 = distinct !DILexicalBlock(scope: !3069, file: !3, line: 2681, column: 17)
!3076 = !DILocation(line: 2682, column: 46, scope: !3075)
!3077 = !DILocation(line: 2682, column: 26, scope: !3075)
!3078 = !DILocation(line: 2682, column: 29, scope: !3075)
!3079 = !DILocation(line: 2683, column: 17, scope: !3075)
!3080 = !DILocation(line: 2684, column: 47, scope: !3070)
!3081 = !DILocation(line: 2684, column: 42, scope: !3070)
!3082 = !DILocation(line: 2684, column: 22, scope: !3070)
!3083 = !DILocation(line: 2684, column: 25, scope: !3070)
!3084 = !DILocation(line: 2678, column: 13, scope: !3085)
!3085 = !DILexicalBlockFile(scope: !3053, file: !3, discriminator: 4)
!3086 = distinct !{!3086, !3057, !3087}
!3087 = !DILocation(line: 2685, column: 13, scope: !3053)
!3088 = !DILocation(line: 2686, column: 43, scope: !3053)
!3089 = !DILocation(line: 2686, column: 38, scope: !3053)
!3090 = !DILocation(line: 2686, column: 18, scope: !3053)
!3091 = !DILocation(line: 2686, column: 21, scope: !3053)
!3092 = !DILocation(line: 2687, column: 9, scope: !3053)
!3093 = !DILocation(line: 2691, column: 43, scope: !3094)
!3094 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 2689, column: 9)
!3095 = !DILocation(line: 2691, column: 38, scope: !3094)
!3096 = !DILocation(line: 2691, column: 18, scope: !3094)
!3097 = !DILocation(line: 2691, column: 21, scope: !3094)
!3098 = !DILocation(line: 2638, column: 5, scope: !3099)
!3099 = !DILexicalBlockFile(scope: !2931, file: !3, discriminator: 2)
!3100 = distinct !{!3100, !2945, !3101}
!3101 = !DILocation(line: 2693, column: 5, scope: !2931)
!3102 = !DILocation(line: 2696, column: 6, scope: !2931)
!3103 = !DILocation(line: 2696, column: 11, scope: !2931)
!3104 = !DILocation(line: 2697, column: 1, scope: !2931)
!3105 = !DILocation(line: 2697, column: 1, scope: !2947)
!3106 = distinct !DISubprogram(name: "cJSON_IsInvalid", scope: !3, file: !3, line: 2699, type: !105, isLocal: false, isDefinition: true, scopeLine: 2700, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3107 = !DILocalVariable(name: "item", arg: 1, scope: !3106, file: !3, line: 2699, type: !68)
!3108 = !DILocation(line: 2699, column: 62, scope: !3106)
!3109 = !DILocation(line: 2701, column: 9, scope: !3110)
!3110 = distinct !DILexicalBlock(scope: !3106, file: !3, line: 2701, column: 9)
!3111 = !DILocation(line: 2701, column: 14, scope: !3110)
!3112 = !DILocation(line: 2701, column: 9, scope: !3106)
!3113 = !DILocation(line: 2703, column: 9, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 2702, column: 5)
!3115 = !DILocation(line: 2706, column: 13, scope: !3106)
!3116 = !DILocation(line: 2706, column: 19, scope: !3106)
!3117 = !DILocation(line: 2706, column: 24, scope: !3106)
!3118 = !DILocation(line: 2706, column: 32, scope: !3106)
!3119 = !DILocation(line: 2706, column: 5, scope: !3106)
!3120 = !DILocation(line: 2707, column: 1, scope: !3106)
!3121 = distinct !DISubprogram(name: "cJSON_IsFalse", scope: !3, file: !3, line: 2709, type: !105, isLocal: false, isDefinition: true, scopeLine: 2710, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3122 = !DILocalVariable(name: "item", arg: 1, scope: !3121, file: !3, line: 2709, type: !68)
!3123 = !DILocation(line: 2709, column: 60, scope: !3121)
!3124 = !DILocation(line: 2711, column: 9, scope: !3125)
!3125 = distinct !DILexicalBlock(scope: !3121, file: !3, line: 2711, column: 9)
!3126 = !DILocation(line: 2711, column: 14, scope: !3125)
!3127 = !DILocation(line: 2711, column: 9, scope: !3121)
!3128 = !DILocation(line: 2713, column: 9, scope: !3129)
!3129 = distinct !DILexicalBlock(scope: !3125, file: !3, line: 2712, column: 5)
!3130 = !DILocation(line: 2716, column: 13, scope: !3121)
!3131 = !DILocation(line: 2716, column: 19, scope: !3121)
!3132 = !DILocation(line: 2716, column: 24, scope: !3121)
!3133 = !DILocation(line: 2716, column: 32, scope: !3121)
!3134 = !DILocation(line: 2716, column: 5, scope: !3121)
!3135 = !DILocation(line: 2717, column: 1, scope: !3121)
!3136 = distinct !DISubprogram(name: "cJSON_IsTrue", scope: !3, file: !3, line: 2719, type: !105, isLocal: false, isDefinition: true, scopeLine: 2720, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3137 = !DILocalVariable(name: "item", arg: 1, scope: !3136, file: !3, line: 2719, type: !68)
!3138 = !DILocation(line: 2719, column: 59, scope: !3136)
!3139 = !DILocation(line: 2721, column: 9, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3136, file: !3, line: 2721, column: 9)
!3141 = !DILocation(line: 2721, column: 14, scope: !3140)
!3142 = !DILocation(line: 2721, column: 9, scope: !3136)
!3143 = !DILocation(line: 2723, column: 9, scope: !3144)
!3144 = distinct !DILexicalBlock(scope: !3140, file: !3, line: 2722, column: 5)
!3145 = !DILocation(line: 2726, column: 13, scope: !3136)
!3146 = !DILocation(line: 2726, column: 19, scope: !3136)
!3147 = !DILocation(line: 2726, column: 24, scope: !3136)
!3148 = !DILocation(line: 2726, column: 32, scope: !3136)
!3149 = !DILocation(line: 2726, column: 5, scope: !3136)
!3150 = !DILocation(line: 2727, column: 1, scope: !3136)
!3151 = distinct !DISubprogram(name: "cJSON_IsBool", scope: !3, file: !3, line: 2730, type: !105, isLocal: false, isDefinition: true, scopeLine: 2731, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3152 = !DILocalVariable(name: "item", arg: 1, scope: !3151, file: !3, line: 2730, type: !68)
!3153 = !DILocation(line: 2730, column: 59, scope: !3151)
!3154 = !DILocation(line: 2732, column: 9, scope: !3155)
!3155 = distinct !DILexicalBlock(scope: !3151, file: !3, line: 2732, column: 9)
!3156 = !DILocation(line: 2732, column: 14, scope: !3155)
!3157 = !DILocation(line: 2732, column: 9, scope: !3151)
!3158 = !DILocation(line: 2734, column: 9, scope: !3159)
!3159 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 2733, column: 5)
!3160 = !DILocation(line: 2737, column: 13, scope: !3151)
!3161 = !DILocation(line: 2737, column: 19, scope: !3151)
!3162 = !DILocation(line: 2737, column: 24, scope: !3151)
!3163 = !DILocation(line: 2737, column: 54, scope: !3151)
!3164 = !DILocation(line: 2737, column: 5, scope: !3151)
!3165 = !DILocation(line: 2738, column: 1, scope: !3151)
!3166 = distinct !DISubprogram(name: "cJSON_IsNull", scope: !3, file: !3, line: 2739, type: !105, isLocal: false, isDefinition: true, scopeLine: 2740, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3167 = !DILocalVariable(name: "item", arg: 1, scope: !3166, file: !3, line: 2739, type: !68)
!3168 = !DILocation(line: 2739, column: 59, scope: !3166)
!3169 = !DILocation(line: 2741, column: 9, scope: !3170)
!3170 = distinct !DILexicalBlock(scope: !3166, file: !3, line: 2741, column: 9)
!3171 = !DILocation(line: 2741, column: 14, scope: !3170)
!3172 = !DILocation(line: 2741, column: 9, scope: !3166)
!3173 = !DILocation(line: 2743, column: 9, scope: !3174)
!3174 = distinct !DILexicalBlock(scope: !3170, file: !3, line: 2742, column: 5)
!3175 = !DILocation(line: 2746, column: 13, scope: !3166)
!3176 = !DILocation(line: 2746, column: 19, scope: !3166)
!3177 = !DILocation(line: 2746, column: 24, scope: !3166)
!3178 = !DILocation(line: 2746, column: 32, scope: !3166)
!3179 = !DILocation(line: 2746, column: 5, scope: !3166)
!3180 = !DILocation(line: 2747, column: 1, scope: !3166)
!3181 = distinct !DISubprogram(name: "cJSON_IsNumber", scope: !3, file: !3, line: 2749, type: !105, isLocal: false, isDefinition: true, scopeLine: 2750, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3182 = !DILocalVariable(name: "item", arg: 1, scope: !3181, file: !3, line: 2749, type: !68)
!3183 = !DILocation(line: 2749, column: 61, scope: !3181)
!3184 = !DILocation(line: 2751, column: 9, scope: !3185)
!3185 = distinct !DILexicalBlock(scope: !3181, file: !3, line: 2751, column: 9)
!3186 = !DILocation(line: 2751, column: 14, scope: !3185)
!3187 = !DILocation(line: 2751, column: 9, scope: !3181)
!3188 = !DILocation(line: 2753, column: 9, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3185, file: !3, line: 2752, column: 5)
!3190 = !DILocation(line: 2756, column: 13, scope: !3181)
!3191 = !DILocation(line: 2756, column: 19, scope: !3181)
!3192 = !DILocation(line: 2756, column: 24, scope: !3181)
!3193 = !DILocation(line: 2756, column: 32, scope: !3181)
!3194 = !DILocation(line: 2756, column: 5, scope: !3181)
!3195 = !DILocation(line: 2757, column: 1, scope: !3181)
!3196 = distinct !DISubprogram(name: "cJSON_IsArray", scope: !3, file: !3, line: 2769, type: !105, isLocal: false, isDefinition: true, scopeLine: 2770, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3197 = !DILocalVariable(name: "item", arg: 1, scope: !3196, file: !3, line: 2769, type: !68)
!3198 = !DILocation(line: 2769, column: 60, scope: !3196)
!3199 = !DILocation(line: 2771, column: 9, scope: !3200)
!3200 = distinct !DILexicalBlock(scope: !3196, file: !3, line: 2771, column: 9)
!3201 = !DILocation(line: 2771, column: 14, scope: !3200)
!3202 = !DILocation(line: 2771, column: 9, scope: !3196)
!3203 = !DILocation(line: 2773, column: 9, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3200, file: !3, line: 2772, column: 5)
!3205 = !DILocation(line: 2776, column: 13, scope: !3196)
!3206 = !DILocation(line: 2776, column: 19, scope: !3196)
!3207 = !DILocation(line: 2776, column: 24, scope: !3196)
!3208 = !DILocation(line: 2776, column: 32, scope: !3196)
!3209 = !DILocation(line: 2776, column: 5, scope: !3196)
!3210 = !DILocation(line: 2777, column: 1, scope: !3196)
!3211 = distinct !DISubprogram(name: "cJSON_IsObject", scope: !3, file: !3, line: 2779, type: !105, isLocal: false, isDefinition: true, scopeLine: 2780, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3212 = !DILocalVariable(name: "item", arg: 1, scope: !3211, file: !3, line: 2779, type: !68)
!3213 = !DILocation(line: 2779, column: 61, scope: !3211)
!3214 = !DILocation(line: 2781, column: 9, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3211, file: !3, line: 2781, column: 9)
!3216 = !DILocation(line: 2781, column: 14, scope: !3215)
!3217 = !DILocation(line: 2781, column: 9, scope: !3211)
!3218 = !DILocation(line: 2783, column: 9, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3215, file: !3, line: 2782, column: 5)
!3220 = !DILocation(line: 2786, column: 13, scope: !3211)
!3221 = !DILocation(line: 2786, column: 19, scope: !3211)
!3222 = !DILocation(line: 2786, column: 24, scope: !3211)
!3223 = !DILocation(line: 2786, column: 32, scope: !3211)
!3224 = !DILocation(line: 2786, column: 5, scope: !3211)
!3225 = !DILocation(line: 2787, column: 1, scope: !3211)
!3226 = distinct !DISubprogram(name: "cJSON_IsRaw", scope: !3, file: !3, line: 2789, type: !105, isLocal: false, isDefinition: true, scopeLine: 2790, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3227 = !DILocalVariable(name: "item", arg: 1, scope: !3226, file: !3, line: 2789, type: !68)
!3228 = !DILocation(line: 2789, column: 58, scope: !3226)
!3229 = !DILocation(line: 2791, column: 9, scope: !3230)
!3230 = distinct !DILexicalBlock(scope: !3226, file: !3, line: 2791, column: 9)
!3231 = !DILocation(line: 2791, column: 14, scope: !3230)
!3232 = !DILocation(line: 2791, column: 9, scope: !3226)
!3233 = !DILocation(line: 2793, column: 9, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3230, file: !3, line: 2792, column: 5)
!3235 = !DILocation(line: 2796, column: 13, scope: !3226)
!3236 = !DILocation(line: 2796, column: 19, scope: !3226)
!3237 = !DILocation(line: 2796, column: 24, scope: !3226)
!3238 = !DILocation(line: 2796, column: 32, scope: !3226)
!3239 = !DILocation(line: 2796, column: 5, scope: !3226)
!3240 = !DILocation(line: 2797, column: 1, scope: !3226)
!3241 = distinct !DISubprogram(name: "cJSON_Compare", scope: !3, file: !3, line: 2799, type: !3242, isLocal: false, isDefinition: true, scopeLine: 2800, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3242 = !DISubroutineType(types: !3243)
!3243 = !{!16, !68, !68, !1001}
!3244 = !DILocalVariable(name: "a", arg: 1, scope: !3241, file: !3, line: 2799, type: !68)
!3245 = !DILocation(line: 2799, column: 60, scope: !3241)
!3246 = !DILocalVariable(name: "b", arg: 2, scope: !3241, file: !3, line: 2799, type: !68)
!3247 = !DILocation(line: 2799, column: 83, scope: !3241)
!3248 = !DILocalVariable(name: "case_sensitive", arg: 3, scope: !3241, file: !3, line: 2799, type: !1001)
!3249 = !DILocation(line: 2799, column: 103, scope: !3241)
!3250 = !DILocation(line: 2801, column: 10, scope: !3251)
!3251 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 2801, column: 9)
!3252 = !DILocation(line: 2801, column: 12, scope: !3251)
!3253 = !DILocation(line: 2801, column: 21, scope: !3251)
!3254 = !DILocation(line: 2801, column: 25, scope: !3255)
!3255 = !DILexicalBlockFile(scope: !3251, file: !3, discriminator: 1)
!3256 = !DILocation(line: 2801, column: 27, scope: !3255)
!3257 = !DILocation(line: 2801, column: 36, scope: !3255)
!3258 = !DILocation(line: 2801, column: 41, scope: !3259)
!3259 = !DILexicalBlockFile(scope: !3251, file: !3, discriminator: 2)
!3260 = !DILocation(line: 2801, column: 44, scope: !3259)
!3261 = !DILocation(line: 2801, column: 49, scope: !3259)
!3262 = !DILocation(line: 2801, column: 61, scope: !3259)
!3263 = !DILocation(line: 2801, column: 64, scope: !3259)
!3264 = !DILocation(line: 2801, column: 69, scope: !3259)
!3265 = !DILocation(line: 2801, column: 57, scope: !3259)
!3266 = !DILocation(line: 2801, column: 78, scope: !3259)
!3267 = !DILocation(line: 2801, column: 97, scope: !3268)
!3268 = !DILexicalBlockFile(scope: !3251, file: !3, discriminator: 3)
!3269 = !DILocation(line: 2801, column: 81, scope: !3268)
!3270 = !DILocation(line: 2801, column: 9, scope: !3271)
!3271 = !DILexicalBlockFile(scope: !3241, file: !3, discriminator: 3)
!3272 = !DILocation(line: 2803, column: 9, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3251, file: !3, line: 2802, column: 5)
!3274 = !DILocation(line: 2807, column: 13, scope: !3241)
!3275 = !DILocation(line: 2807, column: 16, scope: !3241)
!3276 = !DILocation(line: 2807, column: 21, scope: !3241)
!3277 = !DILocation(line: 2807, column: 5, scope: !3241)
!3278 = !DILocation(line: 2817, column: 13, scope: !3279)
!3279 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 2808, column: 5)
!3280 = !DILocation(line: 2820, column: 13, scope: !3279)
!3281 = !DILocation(line: 2824, column: 9, scope: !3282)
!3282 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 2824, column: 9)
!3283 = !DILocation(line: 2824, column: 14, scope: !3282)
!3284 = !DILocation(line: 2824, column: 11, scope: !3282)
!3285 = !DILocation(line: 2824, column: 9, scope: !3241)
!3286 = !DILocation(line: 2826, column: 9, scope: !3287)
!3287 = distinct !DILexicalBlock(scope: !3282, file: !3, line: 2825, column: 5)
!3288 = !DILocation(line: 2829, column: 13, scope: !3241)
!3289 = !DILocation(line: 2829, column: 16, scope: !3241)
!3290 = !DILocation(line: 2829, column: 21, scope: !3241)
!3291 = !DILocation(line: 2829, column: 5, scope: !3241)
!3292 = !DILocation(line: 2835, column: 13, scope: !3293)
!3293 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 2830, column: 5)
!3294 = !DILocation(line: 2838, column: 17, scope: !3295)
!3295 = distinct !DILexicalBlock(scope: !3293, file: !3, line: 2838, column: 17)
!3296 = !DILocation(line: 2838, column: 20, scope: !3295)
!3297 = !DILocation(line: 2838, column: 35, scope: !3295)
!3298 = !DILocation(line: 2838, column: 38, scope: !3295)
!3299 = !DILocation(line: 2838, column: 32, scope: !3295)
!3300 = !DILocation(line: 2838, column: 17, scope: !3293)
!3301 = !DILocation(line: 2840, column: 17, scope: !3302)
!3302 = distinct !DILexicalBlock(scope: !3295, file: !3, line: 2839, column: 13)
!3303 = !DILocation(line: 2842, column: 13, scope: !3293)
!3304 = !DILocation(line: 2846, column: 18, scope: !3305)
!3305 = distinct !DILexicalBlock(scope: !3293, file: !3, line: 2846, column: 17)
!3306 = !DILocation(line: 2846, column: 21, scope: !3305)
!3307 = !DILocation(line: 2846, column: 33, scope: !3305)
!3308 = !DILocation(line: 2846, column: 42, scope: !3305)
!3309 = !DILocation(line: 2846, column: 46, scope: !3310)
!3310 = !DILexicalBlockFile(scope: !3305, file: !3, discriminator: 1)
!3311 = !DILocation(line: 2846, column: 49, scope: !3310)
!3312 = !DILocation(line: 2846, column: 61, scope: !3310)
!3313 = !DILocation(line: 2846, column: 17, scope: !3314)
!3314 = !DILexicalBlockFile(scope: !3293, file: !3, discriminator: 1)
!3315 = !DILocation(line: 2848, column: 17, scope: !3316)
!3316 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 2847, column: 13)
!3317 = !DILocation(line: 2850, column: 24, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3293, file: !3, line: 2850, column: 17)
!3319 = !DILocation(line: 2850, column: 27, scope: !3318)
!3320 = !DILocation(line: 2850, column: 40, scope: !3318)
!3321 = !DILocation(line: 2850, column: 43, scope: !3318)
!3322 = !DILocation(line: 2850, column: 17, scope: !3318)
!3323 = !DILocation(line: 2850, column: 56, scope: !3318)
!3324 = !DILocation(line: 2850, column: 17, scope: !3293)
!3325 = !DILocation(line: 2852, column: 17, scope: !3326)
!3326 = distinct !DILexicalBlock(scope: !3318, file: !3, line: 2851, column: 13)
!3327 = !DILocation(line: 2855, column: 13, scope: !3293)
!3328 = !DILocalVariable(name: "a_element", scope: !3329, file: !3, line: 2859, type: !22)
!3329 = distinct !DILexicalBlock(scope: !3293, file: !3, line: 2858, column: 9)
!3330 = !DILocation(line: 2859, column: 20, scope: !3329)
!3331 = !DILocation(line: 2859, column: 32, scope: !3329)
!3332 = !DILocation(line: 2859, column: 35, scope: !3329)
!3333 = !DILocalVariable(name: "b_element", scope: !3329, file: !3, line: 2860, type: !22)
!3334 = !DILocation(line: 2860, column: 20, scope: !3329)
!3335 = !DILocation(line: 2860, column: 32, scope: !3329)
!3336 = !DILocation(line: 2860, column: 35, scope: !3329)
!3337 = !DILocation(line: 2862, column: 13, scope: !3329)
!3338 = !DILocation(line: 2862, column: 21, scope: !3339)
!3339 = !DILexicalBlockFile(scope: !3340, file: !3, discriminator: 1)
!3340 = distinct !DILexicalBlock(scope: !3341, file: !3, line: 2862, column: 13)
!3341 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 2862, column: 13)
!3342 = !DILocation(line: 2862, column: 31, scope: !3339)
!3343 = !DILocation(line: 2862, column: 40, scope: !3339)
!3344 = !DILocation(line: 2862, column: 44, scope: !3345)
!3345 = !DILexicalBlockFile(scope: !3340, file: !3, discriminator: 2)
!3346 = !DILocation(line: 2862, column: 54, scope: !3345)
!3347 = !DILocation(line: 2862, column: 13, scope: !3348)
!3348 = !DILexicalBlockFile(scope: !3341, file: !3, discriminator: 3)
!3349 = !DILocation(line: 2864, column: 36, scope: !3350)
!3350 = distinct !DILexicalBlock(scope: !3351, file: !3, line: 2864, column: 21)
!3351 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 2863, column: 13)
!3352 = !DILocation(line: 2864, column: 47, scope: !3350)
!3353 = !DILocation(line: 2864, column: 58, scope: !3350)
!3354 = !DILocation(line: 2864, column: 22, scope: !3350)
!3355 = !DILocation(line: 2864, column: 21, scope: !3351)
!3356 = !DILocation(line: 2866, column: 21, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3350, file: !3, line: 2865, column: 17)
!3358 = !DILocation(line: 2869, column: 29, scope: !3351)
!3359 = !DILocation(line: 2869, column: 40, scope: !3351)
!3360 = !DILocation(line: 2869, column: 27, scope: !3351)
!3361 = !DILocation(line: 2870, column: 29, scope: !3351)
!3362 = !DILocation(line: 2870, column: 40, scope: !3351)
!3363 = !DILocation(line: 2870, column: 27, scope: !3351)
!3364 = !DILocation(line: 2862, column: 13, scope: !3365)
!3365 = !DILexicalBlockFile(scope: !3340, file: !3, discriminator: 4)
!3366 = distinct !{!3366, !3367, !3368}
!3367 = !DILocation(line: 2862, column: 13, scope: !3341)
!3368 = !DILocation(line: 2871, column: 13, scope: !3341)
!3369 = !DILocation(line: 2874, column: 17, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 2874, column: 17)
!3371 = !DILocation(line: 2874, column: 30, scope: !3370)
!3372 = !DILocation(line: 2874, column: 27, scope: !3370)
!3373 = !DILocation(line: 2874, column: 17, scope: !3329)
!3374 = !DILocation(line: 2875, column: 17, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3370, file: !3, line: 2874, column: 41)
!3376 = !DILocation(line: 2878, column: 13, scope: !3329)
!3377 = !DILocalVariable(name: "a_element", scope: !3378, file: !3, line: 2883, type: !22)
!3378 = distinct !DILexicalBlock(scope: !3293, file: !3, line: 2882, column: 9)
!3379 = !DILocation(line: 2883, column: 20, scope: !3378)
!3380 = !DILocalVariable(name: "b_element", scope: !3378, file: !3, line: 2884, type: !22)
!3381 = !DILocation(line: 2884, column: 20, scope: !3378)
!3382 = !DILocation(line: 2885, column: 13, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3378, file: !3, line: 2885, column: 13)
!3384 = !DILocation(line: 2885, column: 13, scope: !3385)
!3385 = !DILexicalBlockFile(scope: !3383, file: !3, discriminator: 1)
!3386 = !DILocation(line: 2885, column: 13, scope: !3387)
!3387 = !DILexicalBlockFile(scope: !3383, file: !3, discriminator: 2)
!3388 = !DILocation(line: 2885, column: 13, scope: !3389)
!3389 = !DILexicalBlockFile(scope: !3383, file: !3, discriminator: 3)
!3390 = !DILocation(line: 2885, column: 13, scope: !3391)
!3391 = !DILexicalBlockFile(scope: !3392, file: !3, discriminator: 4)
!3392 = distinct !DILexicalBlock(scope: !3383, file: !3, line: 2885, column: 13)
!3393 = !DILocation(line: 2885, column: 13, scope: !3394)
!3394 = !DILexicalBlockFile(scope: !3383, file: !3, discriminator: 4)
!3395 = !DILocation(line: 2888, column: 45, scope: !3396)
!3396 = distinct !DILexicalBlock(scope: !3392, file: !3, line: 2886, column: 13)
!3397 = !DILocation(line: 2888, column: 48, scope: !3396)
!3398 = !DILocation(line: 2888, column: 59, scope: !3396)
!3399 = !DILocation(line: 2888, column: 67, scope: !3396)
!3400 = !DILocation(line: 2888, column: 29, scope: !3396)
!3401 = !DILocation(line: 2888, column: 27, scope: !3396)
!3402 = !DILocation(line: 2889, column: 21, scope: !3403)
!3403 = distinct !DILexicalBlock(scope: !3396, file: !3, line: 2889, column: 21)
!3404 = !DILocation(line: 2889, column: 31, scope: !3403)
!3405 = !DILocation(line: 2889, column: 21, scope: !3396)
!3406 = !DILocation(line: 2891, column: 21, scope: !3407)
!3407 = distinct !DILexicalBlock(scope: !3403, file: !3, line: 2890, column: 17)
!3408 = !DILocation(line: 2894, column: 36, scope: !3409)
!3409 = distinct !DILexicalBlock(scope: !3396, file: !3, line: 2894, column: 21)
!3410 = !DILocation(line: 2894, column: 47, scope: !3409)
!3411 = !DILocation(line: 2894, column: 58, scope: !3409)
!3412 = !DILocation(line: 2894, column: 22, scope: !3409)
!3413 = !DILocation(line: 2894, column: 21, scope: !3396)
!3414 = !DILocation(line: 2896, column: 21, scope: !3415)
!3415 = distinct !DILexicalBlock(scope: !3409, file: !3, line: 2895, column: 17)
!3416 = !DILocation(line: 2898, column: 13, scope: !3396)
!3417 = !DILocation(line: 2885, column: 13, scope: !3418)
!3418 = !DILexicalBlockFile(scope: !3392, file: !3, discriminator: 5)
!3419 = distinct !{!3419, !3382, !3420}
!3420 = !DILocation(line: 2898, column: 13, scope: !3383)
!3421 = !DILocation(line: 2902, column: 13, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3378, file: !3, line: 2902, column: 13)
!3423 = !DILocation(line: 2902, column: 13, scope: !3424)
!3424 = !DILexicalBlockFile(scope: !3422, file: !3, discriminator: 1)
!3425 = !DILocation(line: 2902, column: 13, scope: !3426)
!3426 = !DILexicalBlockFile(scope: !3422, file: !3, discriminator: 2)
!3427 = !DILocation(line: 2902, column: 13, scope: !3428)
!3428 = !DILexicalBlockFile(scope: !3422, file: !3, discriminator: 3)
!3429 = !DILocation(line: 2902, column: 13, scope: !3430)
!3430 = !DILexicalBlockFile(scope: !3431, file: !3, discriminator: 4)
!3431 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 2902, column: 13)
!3432 = !DILocation(line: 2902, column: 13, scope: !3433)
!3433 = !DILexicalBlockFile(scope: !3422, file: !3, discriminator: 4)
!3434 = !DILocation(line: 2904, column: 45, scope: !3435)
!3435 = distinct !DILexicalBlock(scope: !3431, file: !3, line: 2903, column: 13)
!3436 = !DILocation(line: 2904, column: 48, scope: !3435)
!3437 = !DILocation(line: 2904, column: 59, scope: !3435)
!3438 = !DILocation(line: 2904, column: 67, scope: !3435)
!3439 = !DILocation(line: 2904, column: 29, scope: !3435)
!3440 = !DILocation(line: 2904, column: 27, scope: !3435)
!3441 = !DILocation(line: 2905, column: 21, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3435, file: !3, line: 2905, column: 21)
!3443 = !DILocation(line: 2905, column: 31, scope: !3442)
!3444 = !DILocation(line: 2905, column: 21, scope: !3435)
!3445 = !DILocation(line: 2907, column: 21, scope: !3446)
!3446 = distinct !DILexicalBlock(scope: !3442, file: !3, line: 2906, column: 17)
!3447 = !DILocation(line: 2910, column: 36, scope: !3448)
!3448 = distinct !DILexicalBlock(scope: !3435, file: !3, line: 2910, column: 21)
!3449 = !DILocation(line: 2910, column: 47, scope: !3448)
!3450 = !DILocation(line: 2910, column: 58, scope: !3448)
!3451 = !DILocation(line: 2910, column: 22, scope: !3448)
!3452 = !DILocation(line: 2910, column: 21, scope: !3435)
!3453 = !DILocation(line: 2912, column: 21, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3448, file: !3, line: 2911, column: 17)
!3455 = !DILocation(line: 2914, column: 13, scope: !3435)
!3456 = !DILocation(line: 2902, column: 13, scope: !3457)
!3457 = !DILexicalBlockFile(scope: !3431, file: !3, discriminator: 5)
!3458 = distinct !{!3458, !3421, !3459}
!3459 = !DILocation(line: 2914, column: 13, scope: !3422)
!3460 = !DILocation(line: 2916, column: 13, scope: !3378)
!3461 = !DILocation(line: 2920, column: 13, scope: !3293)
!3462 = !DILocation(line: 2922, column: 1, scope: !3241)
!3463 = distinct !DISubprogram(name: "cJSON_malloc", scope: !3, file: !3, line: 2924, type: !53, isLocal: false, isDefinition: true, scopeLine: 2925, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3464 = !DILocalVariable(name: "size", arg: 1, scope: !3463, file: !3, line: 2924, type: !19)
!3465 = !DILocation(line: 2924, column: 42, scope: !3463)
!3466 = !DILocation(line: 2926, column: 25, scope: !3463)
!3467 = !DILocation(line: 2926, column: 34, scope: !3463)
!3468 = !DILocation(line: 2926, column: 12, scope: !3463)
!3469 = !DILocation(line: 2926, column: 5, scope: !3463)
!3470 = distinct !DISubprogram(name: "cJSON_free", scope: !3, file: !3, line: 2929, type: !57, isLocal: false, isDefinition: true, scopeLine: 2930, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3471 = !DILocalVariable(name: "object", arg: 1, scope: !3470, file: !3, line: 2929, type: !9)
!3472 = !DILocation(line: 2929, column: 37, scope: !3470)
!3473 = !DILocation(line: 2931, column: 18, scope: !3470)
!3474 = !DILocation(line: 2931, column: 29, scope: !3470)
!3475 = !DILocation(line: 2931, column: 5, scope: !3470)
!3476 = !DILocation(line: 2932, column: 1, scope: !3470)
!3477 = distinct !DISubprogram(name: "read_input", scope: !3, file: !3, line: 2937, type: !3478, isLocal: false, isDefinition: true, scopeLine: 2937, isOptimized: false, unit: !2, variables: !4)
!3478 = !DISubroutineType(types: !3479)
!3479 = !{!15}
!3480 = !DILocalVariable(name: "counter", scope: !3477, file: !3, line: 2938, type: !11)
!3481 = !DILocation(line: 2938, column: 9, scope: !3477)
!3482 = !DILocalVariable(name: "chars", scope: !3477, file: !3, line: 2939, type: !15)
!3483 = !DILocation(line: 2939, column: 11, scope: !3477)
!3484 = !DILocation(line: 2939, column: 19, scope: !3477)
!3485 = !DILocalVariable(name: "c", scope: !3477, file: !3, line: 2940, type: !8)
!3486 = !DILocation(line: 2940, column: 10, scope: !3477)
!3487 = !DILocation(line: 2941, column: 5, scope: !3477)
!3488 = !DILocation(line: 2941, column: 22, scope: !3489)
!3489 = !DILexicalBlockFile(scope: !3477, file: !3, discriminator: 1)
!3490 = !DILocation(line: 2941, column: 16, scope: !3489)
!3491 = !DILocation(line: 2941, column: 14, scope: !3489)
!3492 = !DILocation(line: 2941, column: 11, scope: !3489)
!3493 = !DILocation(line: 2941, column: 30, scope: !3489)
!3494 = !DILocation(line: 2941, column: 5, scope: !3489)
!3495 = !DILocation(line: 2942, column: 13, scope: !3496)
!3496 = distinct !DILexicalBlock(scope: !3497, file: !3, line: 2942, column: 13)
!3497 = distinct !DILexicalBlock(scope: !3477, file: !3, line: 2941, column: 37)
!3498 = !DILocation(line: 2942, column: 21, scope: !3496)
!3499 = !DILocation(line: 2942, column: 13, scope: !3497)
!3500 = !DILocation(line: 2943, column: 13, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3496, file: !3, line: 2942, column: 30)
!3502 = !DILocation(line: 2945, column: 28, scope: !3497)
!3503 = !DILocation(line: 2945, column: 9, scope: !3497)
!3504 = !DILocation(line: 2945, column: 22, scope: !3497)
!3505 = !DILocation(line: 2945, column: 26, scope: !3497)
!3506 = !DILocation(line: 2941, column: 5, scope: !3507)
!3507 = !DILexicalBlockFile(scope: !3477, file: !3, discriminator: 2)
!3508 = distinct !{!3508, !3487, !3509}
!3509 = !DILocation(line: 2946, column: 5, scope: !3477)
!3510 = !DILocation(line: 2947, column: 5, scope: !3477)
!3511 = !DILocation(line: 2947, column: 11, scope: !3477)
!3512 = !DILocation(line: 2947, column: 20, scope: !3477)
!3513 = !DILocation(line: 2948, column: 12, scope: !3477)
!3514 = !DILocation(line: 2948, column: 5, scope: !3477)
!3515 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 2951, type: !3516, isLocal: false, isDefinition: true, scopeLine: 2951, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3516 = !DISubroutineType(types: !3517)
!3517 = !{!11, !11, !36}
!3518 = !DILocalVariable(name: "argc", arg: 1, scope: !3515, file: !3, line: 2951, type: !11)
!3519 = !DILocation(line: 2951, column: 14, scope: !3515)
!3520 = !DILocalVariable(name: "argv", arg: 2, scope: !3515, file: !3, line: 2951, type: !36)
!3521 = !DILocation(line: 2951, column: 27, scope: !3515)
!3522 = !DILocalVariable(name: "string", scope: !3515, file: !3, line: 2952, type: !15)
!3523 = !DILocation(line: 2952, column: 11, scope: !3515)
!3524 = !DILocation(line: 2952, column: 20, scope: !3515)
!3525 = !DILocation(line: 2953, column: 12, scope: !3515)
!3526 = !DILocation(line: 2953, column: 5, scope: !3515)
!3527 = !DILocalVariable(name: "json", scope: !3515, file: !3, line: 2954, type: !22)
!3528 = !DILocation(line: 2954, column: 12, scope: !3515)
!3529 = !DILocation(line: 2954, column: 31, scope: !3515)
!3530 = !DILocation(line: 2954, column: 19, scope: !3515)
!3531 = !DILocation(line: 2955, column: 9, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3515, file: !3, line: 2955, column: 9)
!3533 = !DILocation(line: 2955, column: 14, scope: !3532)
!3534 = !DILocation(line: 2955, column: 9, scope: !3515)
!3535 = !DILocation(line: 2956, column: 9, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 2955, column: 23)
!3537 = !DILocation(line: 2957, column: 9, scope: !3536)
!3538 = !DILocation(line: 2961, column: 1, scope: !3515)
!3539 = distinct !DISubprogram(name: "update_offset", scope: !3, file: !3, line: 461, type: !3540, isLocal: true, isDefinition: true, scopeLine: 462, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3540 = !DISubroutineType(types: !3541)
!3541 = !{null, !888}
!3542 = !DILocalVariable(name: "buffer", arg: 1, scope: !3539, file: !3, line: 461, type: !888)
!3543 = !DILocation(line: 461, column: 47, scope: !3539)
!3544 = !DILocalVariable(name: "buffer_pointer", scope: !3539, file: !3, line: 463, type: !12)
!3545 = !DILocation(line: 463, column: 26, scope: !3539)
!3546 = !DILocation(line: 464, column: 10, scope: !3547)
!3547 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 464, column: 9)
!3548 = !DILocation(line: 464, column: 17, scope: !3547)
!3549 = !DILocation(line: 464, column: 26, scope: !3547)
!3550 = !DILocation(line: 464, column: 30, scope: !3551)
!3551 = !DILexicalBlockFile(scope: !3547, file: !3, discriminator: 1)
!3552 = !DILocation(line: 464, column: 38, scope: !3551)
!3553 = !DILocation(line: 464, column: 45, scope: !3551)
!3554 = !DILocation(line: 464, column: 9, scope: !3555)
!3555 = !DILexicalBlockFile(scope: !3539, file: !3, discriminator: 1)
!3556 = !DILocation(line: 466, column: 9, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 465, column: 5)
!3558 = !DILocation(line: 468, column: 22, scope: !3539)
!3559 = !DILocation(line: 468, column: 30, scope: !3539)
!3560 = !DILocation(line: 468, column: 39, scope: !3539)
!3561 = !DILocation(line: 468, column: 47, scope: !3539)
!3562 = !DILocation(line: 468, column: 37, scope: !3539)
!3563 = !DILocation(line: 468, column: 20, scope: !3539)
!3564 = !DILocation(line: 470, column: 43, scope: !3539)
!3565 = !DILocation(line: 470, column: 23, scope: !3539)
!3566 = !DILocation(line: 470, column: 5, scope: !3539)
!3567 = !DILocation(line: 470, column: 13, scope: !3539)
!3568 = !DILocation(line: 470, column: 20, scope: !3539)
!3569 = !DILocation(line: 471, column: 1, scope: !3539)
!3570 = !DILocation(line: 471, column: 1, scope: !3555)
!3571 = distinct !DISubprogram(name: "parse_string", scope: !3, file: !3, line: 698, type: !453, isLocal: true, isDefinition: true, scopeLine: 699, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3572 = !DILocalVariable(name: "item", arg: 1, scope: !3571, file: !3, line: 698, type: !455)
!3573 = !DILocation(line: 698, column: 46, scope: !3571)
!3574 = !DILocalVariable(name: "input_buffer", arg: 2, scope: !3571, file: !3, line: 698, type: !456)
!3575 = !DILocation(line: 698, column: 73, scope: !3571)
!3576 = !DILocalVariable(name: "input_pointer", scope: !3571, file: !3, line: 700, type: !12)
!3577 = !DILocation(line: 700, column: 26, scope: !3571)
!3578 = !DILocation(line: 700, column: 42, scope: !3571)
!3579 = !DILocation(line: 700, column: 73, scope: !3571)
!3580 = !DILocalVariable(name: "input_end", scope: !3571, file: !3, line: 701, type: !12)
!3581 = !DILocation(line: 701, column: 26, scope: !3571)
!3582 = !DILocation(line: 701, column: 38, scope: !3571)
!3583 = !DILocation(line: 701, column: 69, scope: !3571)
!3584 = !DILocalVariable(name: "output_pointer", scope: !3571, file: !3, line: 702, type: !18)
!3585 = !DILocation(line: 702, column: 20, scope: !3571)
!3586 = !DILocalVariable(name: "output", scope: !3571, file: !3, line: 703, type: !18)
!3587 = !DILocation(line: 703, column: 20, scope: !3571)
!3588 = !DILocation(line: 706, column: 9, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 706, column: 9)
!3590 = !DILocation(line: 706, column: 43, scope: !3589)
!3591 = !DILocation(line: 706, column: 9, scope: !3571)
!3592 = !DILocation(line: 708, column: 9, scope: !3593)
!3593 = distinct !DILexicalBlock(scope: !3589, file: !3, line: 707, column: 5)
!3594 = !DILocalVariable(name: "allocation_length", scope: !3595, file: !3, line: 713, type: !19)
!3595 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 711, column: 5)
!3596 = !DILocation(line: 713, column: 16, scope: !3595)
!3597 = !DILocalVariable(name: "skipped_bytes", scope: !3595, file: !3, line: 714, type: !19)
!3598 = !DILocation(line: 714, column: 16, scope: !3595)
!3599 = !DILocation(line: 715, column: 9, scope: !3595)
!3600 = !DILocation(line: 715, column: 26, scope: !3601)
!3601 = !DILexicalBlockFile(scope: !3595, file: !3, discriminator: 1)
!3602 = !DILocation(line: 715, column: 38, scope: !3601)
!3603 = !DILocation(line: 715, column: 52, scope: !3601)
!3604 = !DILocation(line: 715, column: 36, scope: !3601)
!3605 = !DILocation(line: 715, column: 63, scope: !3601)
!3606 = !DILocation(line: 715, column: 77, scope: !3601)
!3607 = !DILocation(line: 715, column: 61, scope: !3601)
!3608 = !DILocation(line: 715, column: 85, scope: !3601)
!3609 = !DILocation(line: 715, column: 90, scope: !3610)
!3610 = !DILexicalBlockFile(scope: !3595, file: !3, discriminator: 2)
!3611 = !DILocation(line: 715, column: 89, scope: !3610)
!3612 = !DILocation(line: 715, column: 100, scope: !3610)
!3613 = !DILocation(line: 715, column: 9, scope: !3614)
!3614 = !DILexicalBlockFile(scope: !3595, file: !3, discriminator: 3)
!3615 = !DILocation(line: 718, column: 17, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3617, file: !3, line: 718, column: 17)
!3617 = distinct !DILexicalBlock(scope: !3595, file: !3, line: 716, column: 9)
!3618 = !DILocation(line: 718, column: 30, scope: !3616)
!3619 = !DILocation(line: 718, column: 17, scope: !3617)
!3620 = !DILocation(line: 720, column: 30, scope: !3621)
!3621 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 720, column: 21)
!3622 = distinct !DILexicalBlock(scope: !3616, file: !3, line: 719, column: 13)
!3623 = !DILocation(line: 720, column: 40, scope: !3621)
!3624 = !DILocation(line: 720, column: 46, scope: !3621)
!3625 = !DILocation(line: 720, column: 60, scope: !3621)
!3626 = !DILocation(line: 720, column: 44, scope: !3621)
!3627 = !DILocation(line: 720, column: 72, scope: !3621)
!3628 = !DILocation(line: 720, column: 86, scope: !3621)
!3629 = !DILocation(line: 720, column: 69, scope: !3621)
!3630 = !DILocation(line: 720, column: 21, scope: !3622)
!3631 = !DILocation(line: 723, column: 21, scope: !3632)
!3632 = distinct !DILexicalBlock(scope: !3621, file: !3, line: 721, column: 17)
!3633 = !DILocation(line: 725, column: 30, scope: !3622)
!3634 = !DILocation(line: 726, column: 26, scope: !3622)
!3635 = !DILocation(line: 727, column: 13, scope: !3622)
!3636 = !DILocation(line: 728, column: 22, scope: !3617)
!3637 = !DILocation(line: 715, column: 9, scope: !3638)
!3638 = !DILexicalBlockFile(scope: !3595, file: !3, discriminator: 4)
!3639 = distinct !{!3639, !3599, !3640}
!3640 = !DILocation(line: 729, column: 9, scope: !3595)
!3641 = !DILocation(line: 730, column: 23, scope: !3642)
!3642 = distinct !DILexicalBlock(scope: !3595, file: !3, line: 730, column: 13)
!3643 = !DILocation(line: 730, column: 35, scope: !3642)
!3644 = !DILocation(line: 730, column: 49, scope: !3642)
!3645 = !DILocation(line: 730, column: 33, scope: !3642)
!3646 = !DILocation(line: 730, column: 61, scope: !3642)
!3647 = !DILocation(line: 730, column: 75, scope: !3642)
!3648 = !DILocation(line: 730, column: 58, scope: !3642)
!3649 = !DILocation(line: 730, column: 83, scope: !3642)
!3650 = !DILocation(line: 730, column: 88, scope: !3651)
!3651 = !DILexicalBlockFile(scope: !3642, file: !3, discriminator: 1)
!3652 = !DILocation(line: 730, column: 87, scope: !3651)
!3653 = !DILocation(line: 730, column: 98, scope: !3651)
!3654 = !DILocation(line: 730, column: 13, scope: !3601)
!3655 = !DILocation(line: 732, column: 13, scope: !3656)
!3656 = distinct !DILexicalBlock(scope: !3642, file: !3, line: 731, column: 9)
!3657 = !DILocation(line: 736, column: 39, scope: !3595)
!3658 = !DILocation(line: 736, column: 51, scope: !3595)
!3659 = !DILocation(line: 736, column: 49, scope: !3595)
!3660 = !DILocation(line: 736, column: 85, scope: !3595)
!3661 = !DILocation(line: 736, column: 83, scope: !3595)
!3662 = !DILocation(line: 736, column: 27, scope: !3595)
!3663 = !DILocation(line: 737, column: 34, scope: !3595)
!3664 = !DILocation(line: 737, column: 48, scope: !3595)
!3665 = !DILocation(line: 737, column: 54, scope: !3595)
!3666 = !DILocation(line: 737, column: 63, scope: !3595)
!3667 = !DILocation(line: 737, column: 81, scope: !3595)
!3668 = !DILocation(line: 737, column: 16, scope: !3595)
!3669 = !DILocation(line: 738, column: 13, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3595, file: !3, line: 738, column: 13)
!3671 = !DILocation(line: 738, column: 20, scope: !3670)
!3672 = !DILocation(line: 738, column: 13, scope: !3595)
!3673 = !DILocation(line: 740, column: 13, scope: !3674)
!3674 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 739, column: 9)
!3675 = !DILocation(line: 744, column: 22, scope: !3571)
!3676 = !DILocation(line: 744, column: 20, scope: !3571)
!3677 = !DILocation(line: 746, column: 5, scope: !3571)
!3678 = !DILocation(line: 746, column: 12, scope: !3679)
!3679 = !DILexicalBlockFile(scope: !3571, file: !3, discriminator: 1)
!3680 = !DILocation(line: 746, column: 28, scope: !3679)
!3681 = !DILocation(line: 746, column: 26, scope: !3679)
!3682 = !DILocation(line: 746, column: 5, scope: !3679)
!3683 = !DILocation(line: 748, column: 14, scope: !3684)
!3684 = distinct !DILexicalBlock(scope: !3685, file: !3, line: 748, column: 13)
!3685 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 747, column: 5)
!3686 = !DILocation(line: 748, column: 13, scope: !3684)
!3687 = !DILocation(line: 748, column: 28, scope: !3684)
!3688 = !DILocation(line: 748, column: 13, scope: !3685)
!3689 = !DILocation(line: 750, column: 47, scope: !3690)
!3690 = distinct !DILexicalBlock(scope: !3684, file: !3, line: 749, column: 9)
!3691 = !DILocation(line: 750, column: 33, scope: !3690)
!3692 = !DILocation(line: 750, column: 28, scope: !3690)
!3693 = !DILocation(line: 750, column: 31, scope: !3690)
!3694 = !DILocation(line: 751, column: 9, scope: !3690)
!3695 = !DILocalVariable(name: "sequence_length", scope: !3696, file: !3, line: 755, type: !14)
!3696 = distinct !DILexicalBlock(scope: !3684, file: !3, line: 754, column: 9)
!3697 = !DILocation(line: 755, column: 27, scope: !3696)
!3698 = !DILocation(line: 756, column: 18, scope: !3699)
!3699 = distinct !DILexicalBlock(scope: !3696, file: !3, line: 756, column: 17)
!3700 = !DILocation(line: 756, column: 30, scope: !3699)
!3701 = !DILocation(line: 756, column: 28, scope: !3699)
!3702 = !DILocation(line: 756, column: 45, scope: !3699)
!3703 = !DILocation(line: 756, column: 17, scope: !3696)
!3704 = !DILocation(line: 758, column: 17, scope: !3705)
!3705 = distinct !DILexicalBlock(scope: !3699, file: !3, line: 757, column: 13)
!3706 = !DILocation(line: 761, column: 21, scope: !3696)
!3707 = !DILocation(line: 761, column: 13, scope: !3696)
!3708 = !DILocation(line: 764, column: 36, scope: !3709)
!3709 = distinct !DILexicalBlock(scope: !3696, file: !3, line: 762, column: 13)
!3710 = !DILocation(line: 764, column: 39, scope: !3709)
!3711 = !DILocation(line: 765, column: 21, scope: !3709)
!3712 = !DILocation(line: 767, column: 36, scope: !3709)
!3713 = !DILocation(line: 767, column: 39, scope: !3709)
!3714 = !DILocation(line: 768, column: 21, scope: !3709)
!3715 = !DILocation(line: 770, column: 36, scope: !3709)
!3716 = !DILocation(line: 770, column: 39, scope: !3709)
!3717 = !DILocation(line: 771, column: 21, scope: !3709)
!3718 = !DILocation(line: 773, column: 36, scope: !3709)
!3719 = !DILocation(line: 773, column: 39, scope: !3709)
!3720 = !DILocation(line: 774, column: 21, scope: !3709)
!3721 = !DILocation(line: 776, column: 36, scope: !3709)
!3722 = !DILocation(line: 776, column: 39, scope: !3709)
!3723 = !DILocation(line: 777, column: 21, scope: !3709)
!3724 = !DILocation(line: 781, column: 41, scope: !3709)
!3725 = !DILocation(line: 781, column: 36, scope: !3709)
!3726 = !DILocation(line: 781, column: 39, scope: !3709)
!3727 = !DILocation(line: 782, column: 21, scope: !3709)
!3728 = !DILocation(line: 786, column: 61, scope: !3709)
!3729 = !DILocation(line: 786, column: 76, scope: !3709)
!3730 = !DILocation(line: 786, column: 39, scope: !3709)
!3731 = !DILocation(line: 786, column: 37, scope: !3709)
!3732 = !DILocation(line: 787, column: 25, scope: !3733)
!3733 = distinct !DILexicalBlock(scope: !3709, file: !3, line: 787, column: 25)
!3734 = !DILocation(line: 787, column: 41, scope: !3733)
!3735 = !DILocation(line: 787, column: 25, scope: !3709)
!3736 = !DILocation(line: 790, column: 25, scope: !3737)
!3737 = distinct !DILexicalBlock(scope: !3733, file: !3, line: 788, column: 21)
!3738 = !DILocation(line: 792, column: 21, scope: !3709)
!3739 = !DILocation(line: 795, column: 21, scope: !3709)
!3740 = !DILocation(line: 797, column: 30, scope: !3696)
!3741 = !DILocation(line: 797, column: 27, scope: !3696)
!3742 = !DILocation(line: 746, column: 5, scope: !3743)
!3743 = !DILexicalBlockFile(scope: !3571, file: !3, discriminator: 2)
!3744 = distinct !{!3744, !3677, !3745}
!3745 = !DILocation(line: 799, column: 5, scope: !3571)
!3746 = !DILocation(line: 802, column: 6, scope: !3571)
!3747 = !DILocation(line: 802, column: 21, scope: !3571)
!3748 = !DILocation(line: 804, column: 5, scope: !3571)
!3749 = !DILocation(line: 804, column: 11, scope: !3571)
!3750 = !DILocation(line: 804, column: 16, scope: !3571)
!3751 = !DILocation(line: 805, column: 32, scope: !3571)
!3752 = !DILocation(line: 805, column: 5, scope: !3571)
!3753 = !DILocation(line: 805, column: 11, scope: !3571)
!3754 = !DILocation(line: 805, column: 23, scope: !3571)
!3755 = !DILocation(line: 807, column: 38, scope: !3571)
!3756 = !DILocation(line: 807, column: 50, scope: !3571)
!3757 = !DILocation(line: 807, column: 64, scope: !3571)
!3758 = !DILocation(line: 807, column: 48, scope: !3571)
!3759 = !DILocation(line: 807, column: 5, scope: !3571)
!3760 = !DILocation(line: 807, column: 19, scope: !3571)
!3761 = !DILocation(line: 807, column: 26, scope: !3571)
!3762 = !DILocation(line: 808, column: 5, scope: !3571)
!3763 = !DILocation(line: 808, column: 19, scope: !3571)
!3764 = !DILocation(line: 808, column: 25, scope: !3571)
!3765 = !DILocation(line: 810, column: 5, scope: !3571)
!3766 = !DILocation(line: 813, column: 9, scope: !3767)
!3767 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 813, column: 9)
!3768 = !DILocation(line: 813, column: 16, scope: !3767)
!3769 = !DILocation(line: 813, column: 9, scope: !3571)
!3770 = !DILocation(line: 815, column: 9, scope: !3771)
!3771 = distinct !DILexicalBlock(scope: !3767, file: !3, line: 814, column: 5)
!3772 = !DILocation(line: 815, column: 23, scope: !3771)
!3773 = !DILocation(line: 815, column: 29, scope: !3771)
!3774 = !DILocation(line: 815, column: 40, scope: !3771)
!3775 = !DILocation(line: 816, column: 5, scope: !3771)
!3776 = !DILocation(line: 818, column: 9, scope: !3777)
!3777 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 818, column: 9)
!3778 = !DILocation(line: 818, column: 23, scope: !3777)
!3779 = !DILocation(line: 818, column: 9, scope: !3571)
!3780 = !DILocation(line: 820, column: 41, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 819, column: 5)
!3782 = !DILocation(line: 820, column: 57, scope: !3781)
!3783 = !DILocation(line: 820, column: 71, scope: !3781)
!3784 = !DILocation(line: 820, column: 55, scope: !3781)
!3785 = !DILocation(line: 820, column: 9, scope: !3781)
!3786 = !DILocation(line: 820, column: 23, scope: !3781)
!3787 = !DILocation(line: 820, column: 30, scope: !3781)
!3788 = !DILocation(line: 821, column: 5, scope: !3781)
!3789 = !DILocation(line: 823, column: 5, scope: !3571)
!3790 = !DILocation(line: 824, column: 1, scope: !3571)
!3791 = distinct !DISubprogram(name: "parse_number", scope: !3, file: !3, line: 266, type: !453, isLocal: true, isDefinition: true, scopeLine: 267, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3792 = !DILocalVariable(name: "item", arg: 1, scope: !3791, file: !3, line: 266, type: !455)
!3793 = !DILocation(line: 266, column: 46, scope: !3791)
!3794 = !DILocalVariable(name: "input_buffer", arg: 2, scope: !3791, file: !3, line: 266, type: !456)
!3795 = !DILocation(line: 266, column: 73, scope: !3791)
!3796 = !DILocalVariable(name: "number", scope: !3791, file: !3, line: 268, type: !10)
!3797 = !DILocation(line: 268, column: 12, scope: !3791)
!3798 = !DILocalVariable(name: "after_end", scope: !3791, file: !3, line: 269, type: !18)
!3799 = !DILocation(line: 269, column: 20, scope: !3791)
!3800 = !DILocalVariable(name: "number_c_string", scope: !3791, file: !3, line: 270, type: !3801)
!3801 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 512, elements: !3802)
!3802 = !{!3803}
!3803 = !DISubrange(count: 64)
!3804 = !DILocation(line: 270, column: 19, scope: !3791)
!3805 = !DILocalVariable(name: "decimal_point", scope: !3791, file: !3, line: 271, type: !14)
!3806 = !DILocation(line: 271, column: 19, scope: !3791)
!3807 = !DILocation(line: 271, column: 35, scope: !3791)
!3808 = !DILocalVariable(name: "i", scope: !3791, file: !3, line: 272, type: !19)
!3809 = !DILocation(line: 272, column: 12, scope: !3791)
!3810 = !DILocation(line: 274, column: 10, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3791, file: !3, line: 274, column: 9)
!3812 = !DILocation(line: 274, column: 23, scope: !3811)
!3813 = !DILocation(line: 274, column: 32, scope: !3811)
!3814 = !DILocation(line: 274, column: 36, scope: !3815)
!3815 = !DILexicalBlockFile(scope: !3811, file: !3, discriminator: 1)
!3816 = !DILocation(line: 274, column: 50, scope: !3815)
!3817 = !DILocation(line: 274, column: 58, scope: !3815)
!3818 = !DILocation(line: 274, column: 9, scope: !3819)
!3819 = !DILexicalBlockFile(scope: !3791, file: !3, discriminator: 1)
!3820 = !DILocation(line: 276, column: 9, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3811, file: !3, line: 275, column: 5)
!3822 = !DILocation(line: 282, column: 12, scope: !3823)
!3823 = distinct !DILexicalBlock(scope: !3791, file: !3, line: 282, column: 5)
!3824 = !DILocation(line: 282, column: 10, scope: !3823)
!3825 = !DILocation(line: 282, column: 18, scope: !3826)
!3826 = !DILexicalBlockFile(scope: !3827, file: !3, discriminator: 1)
!3827 = distinct !DILexicalBlock(scope: !3823, file: !3, line: 282, column: 5)
!3828 = !DILocation(line: 282, column: 20, scope: !3826)
!3829 = !DILocation(line: 282, column: 53, scope: !3826)
!3830 = !DILocation(line: 282, column: 56, scope: !3831)
!3831 = !DILexicalBlockFile(scope: !3827, file: !3, discriminator: 2)
!3832 = !DILocation(line: 282, column: 56, scope: !3833)
!3833 = !DILexicalBlockFile(scope: !3827, file: !3, discriminator: 3)
!3834 = !DILocation(line: 282, column: 5, scope: !3835)
!3835 = !DILexicalBlockFile(scope: !3823, file: !3, discriminator: 4)
!3836 = !DILocation(line: 284, column: 17, scope: !3837)
!3837 = distinct !DILexicalBlock(scope: !3827, file: !3, line: 283, column: 5)
!3838 = !DILocation(line: 284, column: 48, scope: !3837)
!3839 = !DILocation(line: 284, column: 9, scope: !3837)
!3840 = !DILocation(line: 300, column: 38, scope: !3841)
!3841 = distinct !DILexicalBlock(scope: !3837, file: !3, line: 285, column: 9)
!3842 = !DILocation(line: 300, column: 69, scope: !3841)
!3843 = !DILocation(line: 300, column: 33, scope: !3841)
!3844 = !DILocation(line: 300, column: 17, scope: !3841)
!3845 = !DILocation(line: 300, column: 36, scope: !3841)
!3846 = !DILocation(line: 301, column: 17, scope: !3841)
!3847 = !DILocation(line: 304, column: 38, scope: !3841)
!3848 = !DILocation(line: 304, column: 33, scope: !3841)
!3849 = !DILocation(line: 304, column: 17, scope: !3841)
!3850 = !DILocation(line: 304, column: 36, scope: !3841)
!3851 = !DILocation(line: 305, column: 17, scope: !3841)
!3852 = !DILocation(line: 308, column: 17, scope: !3841)
!3853 = !DILocation(line: 310, column: 5, scope: !3837)
!3854 = !DILocation(line: 282, column: 95, scope: !3855)
!3855 = !DILexicalBlockFile(scope: !3827, file: !3, discriminator: 5)
!3856 = !DILocation(line: 282, column: 5, scope: !3855)
!3857 = distinct !{!3857, !3858, !3859}
!3858 = !DILocation(line: 282, column: 5, scope: !3823)
!3859 = !DILocation(line: 310, column: 5, scope: !3823)
!3860 = !DILocation(line: 310, column: 5, scope: !3861)
!3861 = !DILexicalBlockFile(scope: !3823, file: !3, discriminator: 1)
!3862 = !DILocation(line: 312, column: 21, scope: !3791)
!3863 = !DILocation(line: 312, column: 5, scope: !3791)
!3864 = !DILocation(line: 312, column: 24, scope: !3791)
!3865 = !DILocation(line: 314, column: 34, scope: !3791)
!3866 = !DILocation(line: 314, column: 14, scope: !3791)
!3867 = !DILocation(line: 314, column: 12, scope: !3791)
!3868 = !DILocation(line: 315, column: 9, scope: !3869)
!3869 = distinct !DILexicalBlock(scope: !3791, file: !3, line: 315, column: 9)
!3870 = !DILocation(line: 315, column: 28, scope: !3869)
!3871 = !DILocation(line: 315, column: 25, scope: !3869)
!3872 = !DILocation(line: 315, column: 9, scope: !3791)
!3873 = !DILocation(line: 317, column: 9, scope: !3874)
!3874 = distinct !DILexicalBlock(scope: !3869, file: !3, line: 316, column: 5)
!3875 = !DILocation(line: 320, column: 25, scope: !3791)
!3876 = !DILocation(line: 320, column: 5, scope: !3791)
!3877 = !DILocation(line: 320, column: 11, scope: !3791)
!3878 = !DILocation(line: 320, column: 23, scope: !3791)
!3879 = !DILocation(line: 323, column: 9, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !3791, file: !3, line: 323, column: 9)
!3881 = !DILocation(line: 323, column: 16, scope: !3880)
!3882 = !DILocation(line: 323, column: 9, scope: !3791)
!3883 = !DILocation(line: 325, column: 9, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 324, column: 5)
!3885 = !DILocation(line: 325, column: 15, scope: !3884)
!3886 = !DILocation(line: 325, column: 24, scope: !3884)
!3887 = !DILocation(line: 326, column: 5, scope: !3884)
!3888 = !DILocation(line: 327, column: 14, scope: !3889)
!3889 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 327, column: 14)
!3890 = !DILocation(line: 327, column: 21, scope: !3889)
!3891 = !DILocation(line: 327, column: 14, scope: !3880)
!3892 = !DILocation(line: 329, column: 9, scope: !3893)
!3893 = distinct !DILexicalBlock(scope: !3889, file: !3, line: 328, column: 5)
!3894 = !DILocation(line: 329, column: 15, scope: !3893)
!3895 = !DILocation(line: 329, column: 24, scope: !3893)
!3896 = !DILocation(line: 330, column: 5, scope: !3893)
!3897 = !DILocation(line: 333, column: 31, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3889, file: !3, line: 332, column: 5)
!3899 = !DILocation(line: 333, column: 26, scope: !3898)
!3900 = !DILocation(line: 333, column: 9, scope: !3898)
!3901 = !DILocation(line: 333, column: 15, scope: !3898)
!3902 = !DILocation(line: 333, column: 24, scope: !3898)
!3903 = !DILocation(line: 336, column: 5, scope: !3791)
!3904 = !DILocation(line: 336, column: 11, scope: !3791)
!3905 = !DILocation(line: 336, column: 16, scope: !3791)
!3906 = !DILocation(line: 338, column: 38, scope: !3791)
!3907 = !DILocation(line: 338, column: 50, scope: !3791)
!3908 = !DILocation(line: 338, column: 48, scope: !3791)
!3909 = !DILocation(line: 338, column: 5, scope: !3791)
!3910 = !DILocation(line: 338, column: 19, scope: !3791)
!3911 = !DILocation(line: 338, column: 26, scope: !3791)
!3912 = !DILocation(line: 339, column: 5, scope: !3791)
!3913 = !DILocation(line: 340, column: 1, scope: !3791)
!3914 = distinct !DISubprogram(name: "parse_array", scope: !3, file: !3, line: 1341, type: !453, isLocal: true, isDefinition: true, scopeLine: 1342, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!3915 = !DILocalVariable(name: "item", arg: 1, scope: !3914, file: !3, line: 1341, type: !455)
!3916 = !DILocation(line: 1341, column: 45, scope: !3914)
!3917 = !DILocalVariable(name: "input_buffer", arg: 2, scope: !3914, file: !3, line: 1341, type: !456)
!3918 = !DILocation(line: 1341, column: 72, scope: !3914)
!3919 = !DILocalVariable(name: "head", scope: !3914, file: !3, line: 1343, type: !22)
!3920 = !DILocation(line: 1343, column: 12, scope: !3914)
!3921 = !DILocalVariable(name: "current_item", scope: !3914, file: !3, line: 1344, type: !22)
!3922 = !DILocation(line: 1344, column: 12, scope: !3914)
!3923 = !DILocation(line: 1346, column: 9, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 1346, column: 9)
!3925 = !DILocation(line: 1346, column: 23, scope: !3924)
!3926 = !DILocation(line: 1346, column: 29, scope: !3924)
!3927 = !DILocation(line: 1346, column: 9, scope: !3914)
!3928 = !DILocation(line: 1348, column: 9, scope: !3929)
!3929 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 1347, column: 5)
!3930 = !DILocation(line: 1350, column: 5, scope: !3914)
!3931 = !DILocation(line: 1350, column: 19, scope: !3914)
!3932 = !DILocation(line: 1350, column: 24, scope: !3914)
!3933 = !DILocation(line: 1352, column: 9, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 1352, column: 9)
!3935 = !DILocation(line: 1352, column: 43, scope: !3934)
!3936 = !DILocation(line: 1352, column: 9, scope: !3914)
!3937 = !DILocation(line: 1355, column: 9, scope: !3938)
!3938 = distinct !DILexicalBlock(scope: !3934, file: !3, line: 1353, column: 5)
!3939 = !DILocation(line: 1358, column: 5, scope: !3914)
!3940 = !DILocation(line: 1358, column: 19, scope: !3914)
!3941 = !DILocation(line: 1358, column: 25, scope: !3914)
!3942 = !DILocation(line: 1359, column: 28, scope: !3914)
!3943 = !DILocation(line: 1359, column: 5, scope: !3914)
!3944 = !DILocation(line: 1360, column: 9, scope: !3945)
!3945 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 1360, column: 9)
!3946 = !DILocation(line: 1360, column: 9, scope: !3947)
!3947 = !DILexicalBlockFile(scope: !3945, file: !3, discriminator: 1)
!3948 = !DILocation(line: 1360, column: 46, scope: !3947)
!3949 = !DILocation(line: 1360, column: 50, scope: !3950)
!3950 = !DILexicalBlockFile(scope: !3945, file: !3, discriminator: 2)
!3951 = !DILocation(line: 1360, column: 84, scope: !3950)
!3952 = !DILocation(line: 1360, column: 9, scope: !3953)
!3953 = !DILexicalBlockFile(scope: !3914, file: !3, discriminator: 2)
!3954 = !DILocation(line: 1363, column: 9, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 1361, column: 5)
!3956 = !DILocation(line: 1367, column: 9, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 1367, column: 9)
!3958 = !DILocation(line: 1367, column: 9, scope: !3959)
!3959 = !DILexicalBlockFile(scope: !3957, file: !3, discriminator: 1)
!3960 = !DILocation(line: 1367, column: 9, scope: !3961)
!3961 = !DILexicalBlockFile(scope: !3914, file: !3, discriminator: 1)
!3962 = !DILocation(line: 1369, column: 9, scope: !3963)
!3963 = distinct !DILexicalBlock(scope: !3957, file: !3, line: 1368, column: 5)
!3964 = !DILocation(line: 1369, column: 23, scope: !3963)
!3965 = !DILocation(line: 1369, column: 29, scope: !3963)
!3966 = !DILocation(line: 1370, column: 9, scope: !3963)
!3967 = !DILocation(line: 1374, column: 5, scope: !3914)
!3968 = !DILocation(line: 1374, column: 19, scope: !3914)
!3969 = !DILocation(line: 1374, column: 25, scope: !3914)
!3970 = !DILocation(line: 1376, column: 5, scope: !3914)
!3971 = distinct !{!3971, !3970, !3972}
!3972 = !DILocation(line: 1408, column: 94, scope: !3914)
!3973 = !DILocalVariable(name: "new_item", scope: !3974, file: !3, line: 1379, type: !22)
!3974 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 1377, column: 5)
!3975 = !DILocation(line: 1379, column: 16, scope: !3974)
!3976 = !DILocation(line: 1379, column: 44, scope: !3974)
!3977 = !DILocation(line: 1379, column: 58, scope: !3974)
!3978 = !DILocation(line: 1379, column: 27, scope: !3974)
!3979 = !DILocation(line: 1380, column: 13, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3974, file: !3, line: 1380, column: 13)
!3981 = !DILocation(line: 1380, column: 22, scope: !3980)
!3982 = !DILocation(line: 1380, column: 13, scope: !3974)
!3983 = !DILocation(line: 1382, column: 13, scope: !3984)
!3984 = distinct !DILexicalBlock(scope: !3980, file: !3, line: 1381, column: 9)
!3985 = !DILocation(line: 1386, column: 13, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !3974, file: !3, line: 1386, column: 13)
!3987 = !DILocation(line: 1386, column: 18, scope: !3986)
!3988 = !DILocation(line: 1386, column: 13, scope: !3974)
!3989 = !DILocation(line: 1389, column: 35, scope: !3990)
!3990 = distinct !DILexicalBlock(scope: !3986, file: !3, line: 1387, column: 9)
!3991 = !DILocation(line: 1389, column: 33, scope: !3990)
!3992 = !DILocation(line: 1389, column: 26, scope: !3990)
!3993 = !DILocation(line: 1390, column: 9, scope: !3990)
!3994 = !DILocation(line: 1394, column: 34, scope: !3995)
!3995 = distinct !DILexicalBlock(scope: !3986, file: !3, line: 1392, column: 9)
!3996 = !DILocation(line: 1394, column: 13, scope: !3995)
!3997 = !DILocation(line: 1394, column: 27, scope: !3995)
!3998 = !DILocation(line: 1394, column: 32, scope: !3995)
!3999 = !DILocation(line: 1395, column: 30, scope: !3995)
!4000 = !DILocation(line: 1395, column: 13, scope: !3995)
!4001 = !DILocation(line: 1395, column: 23, scope: !3995)
!4002 = !DILocation(line: 1395, column: 28, scope: !3995)
!4003 = !DILocation(line: 1396, column: 28, scope: !3995)
!4004 = !DILocation(line: 1396, column: 26, scope: !3995)
!4005 = !DILocation(line: 1400, column: 9, scope: !3974)
!4006 = !DILocation(line: 1400, column: 23, scope: !3974)
!4007 = !DILocation(line: 1400, column: 29, scope: !3974)
!4008 = !DILocation(line: 1401, column: 32, scope: !3974)
!4009 = !DILocation(line: 1401, column: 9, scope: !3974)
!4010 = !DILocation(line: 1402, column: 26, scope: !4011)
!4011 = distinct !DILexicalBlock(scope: !3974, file: !3, line: 1402, column: 13)
!4012 = !DILocation(line: 1402, column: 40, scope: !4011)
!4013 = !DILocation(line: 1402, column: 14, scope: !4011)
!4014 = !DILocation(line: 1402, column: 13, scope: !3974)
!4015 = !DILocation(line: 1404, column: 13, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 1403, column: 9)
!4017 = !DILocation(line: 1406, column: 32, scope: !3974)
!4018 = !DILocation(line: 1406, column: 9, scope: !3974)
!4019 = !DILocation(line: 1407, column: 5, scope: !3974)
!4020 = !DILocation(line: 1408, column: 12, scope: !3914)
!4021 = !DILocation(line: 1408, column: 12, scope: !3961)
!4022 = !DILocation(line: 1408, column: 49, scope: !3961)
!4023 = !DILocation(line: 1408, column: 53, scope: !3953)
!4024 = !DILocation(line: 1408, column: 87, scope: !3953)
!4025 = !DILocation(line: 1407, column: 5, scope: !4026)
!4026 = !DILexicalBlockFile(scope: !3974, file: !3, discriminator: 1)
!4027 = !DILocation(line: 1410, column: 9, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 1410, column: 9)
!4029 = !DILocation(line: 1410, column: 9, scope: !4030)
!4030 = !DILexicalBlockFile(scope: !4028, file: !3, discriminator: 1)
!4031 = !DILocation(line: 1410, column: 49, scope: !4030)
!4032 = !DILocation(line: 1410, column: 52, scope: !4033)
!4033 = !DILexicalBlockFile(scope: !4028, file: !3, discriminator: 2)
!4034 = !DILocation(line: 1410, column: 86, scope: !4033)
!4035 = !DILocation(line: 1410, column: 9, scope: !3953)
!4036 = !DILocation(line: 1412, column: 9, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !4028, file: !3, line: 1411, column: 5)
!4038 = !DILocation(line: 1410, column: 89, scope: !4039)
!4039 = !DILexicalBlockFile(scope: !4028, file: !3, discriminator: 3)
!4040 = !DILocation(line: 1416, column: 5, scope: !3914)
!4041 = !DILocation(line: 1416, column: 19, scope: !3914)
!4042 = !DILocation(line: 1416, column: 24, scope: !3914)
!4043 = !DILocation(line: 1418, column: 5, scope: !3914)
!4044 = !DILocation(line: 1418, column: 11, scope: !3914)
!4045 = !DILocation(line: 1418, column: 16, scope: !3914)
!4046 = !DILocation(line: 1419, column: 19, scope: !3914)
!4047 = !DILocation(line: 1419, column: 5, scope: !3914)
!4048 = !DILocation(line: 1419, column: 11, scope: !3914)
!4049 = !DILocation(line: 1419, column: 17, scope: !3914)
!4050 = !DILocation(line: 1421, column: 5, scope: !3914)
!4051 = !DILocation(line: 1421, column: 19, scope: !3914)
!4052 = !DILocation(line: 1421, column: 25, scope: !3914)
!4053 = !DILocation(line: 1423, column: 5, scope: !3914)
!4054 = !DILocation(line: 1426, column: 9, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 1426, column: 9)
!4056 = !DILocation(line: 1426, column: 14, scope: !4055)
!4057 = !DILocation(line: 1426, column: 9, scope: !3914)
!4058 = !DILocation(line: 1428, column: 22, scope: !4059)
!4059 = distinct !DILexicalBlock(scope: !4055, file: !3, line: 1427, column: 5)
!4060 = !DILocation(line: 1428, column: 9, scope: !4059)
!4061 = !DILocation(line: 1429, column: 5, scope: !4059)
!4062 = !DILocation(line: 1431, column: 5, scope: !3914)
!4063 = !DILocation(line: 1432, column: 1, scope: !3914)
!4064 = distinct !DISubprogram(name: "parse_object", scope: !3, file: !3, line: 1497, type: !453, isLocal: true, isDefinition: true, scopeLine: 1498, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4065 = !DILocalVariable(name: "item", arg: 1, scope: !4064, file: !3, line: 1497, type: !455)
!4066 = !DILocation(line: 1497, column: 46, scope: !4064)
!4067 = !DILocalVariable(name: "input_buffer", arg: 2, scope: !4064, file: !3, line: 1497, type: !456)
!4068 = !DILocation(line: 1497, column: 73, scope: !4064)
!4069 = !DILocalVariable(name: "head", scope: !4064, file: !3, line: 1499, type: !22)
!4070 = !DILocation(line: 1499, column: 12, scope: !4064)
!4071 = !DILocalVariable(name: "current_item", scope: !4064, file: !3, line: 1500, type: !22)
!4072 = !DILocation(line: 1500, column: 12, scope: !4064)
!4073 = !DILocation(line: 1502, column: 9, scope: !4074)
!4074 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 1502, column: 9)
!4075 = !DILocation(line: 1502, column: 23, scope: !4074)
!4076 = !DILocation(line: 1502, column: 29, scope: !4074)
!4077 = !DILocation(line: 1502, column: 9, scope: !4064)
!4078 = !DILocation(line: 1504, column: 9, scope: !4079)
!4079 = distinct !DILexicalBlock(scope: !4074, file: !3, line: 1503, column: 5)
!4080 = !DILocation(line: 1506, column: 5, scope: !4064)
!4081 = !DILocation(line: 1506, column: 19, scope: !4064)
!4082 = !DILocation(line: 1506, column: 24, scope: !4064)
!4083 = !DILocation(line: 1508, column: 9, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 1508, column: 9)
!4085 = !DILocation(line: 1508, column: 9, scope: !4086)
!4086 = !DILexicalBlockFile(scope: !4084, file: !3, discriminator: 1)
!4087 = !DILocation(line: 1508, column: 49, scope: !4086)
!4088 = !DILocation(line: 1508, column: 53, scope: !4089)
!4089 = !DILexicalBlockFile(scope: !4084, file: !3, discriminator: 2)
!4090 = !DILocation(line: 1508, column: 87, scope: !4089)
!4091 = !DILocation(line: 1508, column: 9, scope: !4092)
!4092 = !DILexicalBlockFile(scope: !4064, file: !3, discriminator: 2)
!4093 = !DILocation(line: 1510, column: 9, scope: !4094)
!4094 = distinct !DILexicalBlock(scope: !4084, file: !3, line: 1509, column: 5)
!4095 = !DILocation(line: 1513, column: 5, scope: !4064)
!4096 = !DILocation(line: 1513, column: 19, scope: !4064)
!4097 = !DILocation(line: 1513, column: 25, scope: !4064)
!4098 = !DILocation(line: 1514, column: 28, scope: !4064)
!4099 = !DILocation(line: 1514, column: 5, scope: !4064)
!4100 = !DILocation(line: 1515, column: 9, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 1515, column: 9)
!4102 = !DILocation(line: 1515, column: 9, scope: !4103)
!4103 = !DILexicalBlockFile(scope: !4101, file: !3, discriminator: 1)
!4104 = !DILocation(line: 1515, column: 46, scope: !4103)
!4105 = !DILocation(line: 1515, column: 50, scope: !4106)
!4106 = !DILexicalBlockFile(scope: !4101, file: !3, discriminator: 2)
!4107 = !DILocation(line: 1515, column: 84, scope: !4106)
!4108 = !DILocation(line: 1515, column: 9, scope: !4092)
!4109 = !DILocation(line: 1517, column: 9, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4101, file: !3, line: 1516, column: 5)
!4111 = !DILocation(line: 1521, column: 9, scope: !4112)
!4112 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 1521, column: 9)
!4113 = !DILocation(line: 1521, column: 9, scope: !4114)
!4114 = !DILexicalBlockFile(scope: !4112, file: !3, discriminator: 1)
!4115 = !DILocation(line: 1521, column: 9, scope: !4116)
!4116 = !DILexicalBlockFile(scope: !4064, file: !3, discriminator: 1)
!4117 = !DILocation(line: 1523, column: 9, scope: !4118)
!4118 = distinct !DILexicalBlock(scope: !4112, file: !3, line: 1522, column: 5)
!4119 = !DILocation(line: 1523, column: 23, scope: !4118)
!4120 = !DILocation(line: 1523, column: 29, scope: !4118)
!4121 = !DILocation(line: 1524, column: 9, scope: !4118)
!4122 = !DILocation(line: 1528, column: 5, scope: !4064)
!4123 = !DILocation(line: 1528, column: 19, scope: !4064)
!4124 = !DILocation(line: 1528, column: 25, scope: !4064)
!4125 = !DILocation(line: 1530, column: 5, scope: !4064)
!4126 = distinct !{!4126, !4125, !4127}
!4127 = !DILocation(line: 1580, column: 94, scope: !4064)
!4128 = !DILocalVariable(name: "new_item", scope: !4129, file: !3, line: 1533, type: !22)
!4129 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 1531, column: 5)
!4130 = !DILocation(line: 1533, column: 16, scope: !4129)
!4131 = !DILocation(line: 1533, column: 44, scope: !4129)
!4132 = !DILocation(line: 1533, column: 58, scope: !4129)
!4133 = !DILocation(line: 1533, column: 27, scope: !4129)
!4134 = !DILocation(line: 1534, column: 13, scope: !4135)
!4135 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 1534, column: 13)
!4136 = !DILocation(line: 1534, column: 22, scope: !4135)
!4137 = !DILocation(line: 1534, column: 13, scope: !4129)
!4138 = !DILocation(line: 1536, column: 13, scope: !4139)
!4139 = distinct !DILexicalBlock(scope: !4135, file: !3, line: 1535, column: 9)
!4140 = !DILocation(line: 1540, column: 13, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 1540, column: 13)
!4142 = !DILocation(line: 1540, column: 18, scope: !4141)
!4143 = !DILocation(line: 1540, column: 13, scope: !4129)
!4144 = !DILocation(line: 1543, column: 35, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4141, file: !3, line: 1541, column: 9)
!4146 = !DILocation(line: 1543, column: 33, scope: !4145)
!4147 = !DILocation(line: 1543, column: 26, scope: !4145)
!4148 = !DILocation(line: 1544, column: 9, scope: !4145)
!4149 = !DILocation(line: 1548, column: 34, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4141, file: !3, line: 1546, column: 9)
!4151 = !DILocation(line: 1548, column: 13, scope: !4150)
!4152 = !DILocation(line: 1548, column: 27, scope: !4150)
!4153 = !DILocation(line: 1548, column: 32, scope: !4150)
!4154 = !DILocation(line: 1549, column: 30, scope: !4150)
!4155 = !DILocation(line: 1549, column: 13, scope: !4150)
!4156 = !DILocation(line: 1549, column: 23, scope: !4150)
!4157 = !DILocation(line: 1549, column: 28, scope: !4150)
!4158 = !DILocation(line: 1550, column: 28, scope: !4150)
!4159 = !DILocation(line: 1550, column: 26, scope: !4150)
!4160 = !DILocation(line: 1554, column: 9, scope: !4129)
!4161 = !DILocation(line: 1554, column: 23, scope: !4129)
!4162 = !DILocation(line: 1554, column: 29, scope: !4129)
!4163 = !DILocation(line: 1555, column: 32, scope: !4129)
!4164 = !DILocation(line: 1555, column: 9, scope: !4129)
!4165 = !DILocation(line: 1556, column: 27, scope: !4166)
!4166 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 1556, column: 13)
!4167 = !DILocation(line: 1556, column: 41, scope: !4166)
!4168 = !DILocation(line: 1556, column: 14, scope: !4166)
!4169 = !DILocation(line: 1556, column: 13, scope: !4129)
!4170 = !DILocation(line: 1558, column: 13, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4166, file: !3, line: 1557, column: 9)
!4172 = !DILocation(line: 1560, column: 32, scope: !4129)
!4173 = !DILocation(line: 1560, column: 9, scope: !4129)
!4174 = !DILocation(line: 1563, column: 32, scope: !4129)
!4175 = !DILocation(line: 1563, column: 46, scope: !4129)
!4176 = !DILocation(line: 1563, column: 9, scope: !4129)
!4177 = !DILocation(line: 1563, column: 23, scope: !4129)
!4178 = !DILocation(line: 1563, column: 30, scope: !4129)
!4179 = !DILocation(line: 1564, column: 9, scope: !4129)
!4180 = !DILocation(line: 1564, column: 23, scope: !4129)
!4181 = !DILocation(line: 1564, column: 35, scope: !4129)
!4182 = !DILocation(line: 1566, column: 13, scope: !4183)
!4183 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 1566, column: 13)
!4184 = !DILocation(line: 1566, column: 13, scope: !4185)
!4185 = !DILexicalBlockFile(scope: !4183, file: !3, discriminator: 1)
!4186 = !DILocation(line: 1566, column: 53, scope: !4185)
!4187 = !DILocation(line: 1566, column: 57, scope: !4188)
!4188 = !DILexicalBlockFile(scope: !4183, file: !3, discriminator: 2)
!4189 = !DILocation(line: 1566, column: 91, scope: !4188)
!4190 = !DILocation(line: 1566, column: 13, scope: !4191)
!4191 = !DILexicalBlockFile(scope: !4129, file: !3, discriminator: 2)
!4192 = !DILocation(line: 1568, column: 13, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4183, file: !3, line: 1567, column: 9)
!4194 = !DILocation(line: 1572, column: 9, scope: !4129)
!4195 = !DILocation(line: 1572, column: 23, scope: !4129)
!4196 = !DILocation(line: 1572, column: 29, scope: !4129)
!4197 = !DILocation(line: 1573, column: 32, scope: !4129)
!4198 = !DILocation(line: 1573, column: 9, scope: !4129)
!4199 = !DILocation(line: 1574, column: 26, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 1574, column: 13)
!4201 = !DILocation(line: 1574, column: 40, scope: !4200)
!4202 = !DILocation(line: 1574, column: 14, scope: !4200)
!4203 = !DILocation(line: 1574, column: 13, scope: !4129)
!4204 = !DILocation(line: 1576, column: 13, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !4200, file: !3, line: 1575, column: 9)
!4206 = !DILocation(line: 1578, column: 32, scope: !4129)
!4207 = !DILocation(line: 1578, column: 9, scope: !4129)
!4208 = !DILocation(line: 1579, column: 5, scope: !4129)
!4209 = !DILocation(line: 1580, column: 12, scope: !4064)
!4210 = !DILocation(line: 1580, column: 12, scope: !4116)
!4211 = !DILocation(line: 1580, column: 49, scope: !4116)
!4212 = !DILocation(line: 1580, column: 53, scope: !4092)
!4213 = !DILocation(line: 1580, column: 87, scope: !4092)
!4214 = !DILocation(line: 1579, column: 5, scope: !4215)
!4215 = !DILexicalBlockFile(scope: !4129, file: !3, discriminator: 1)
!4216 = !DILocation(line: 1582, column: 9, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 1582, column: 9)
!4218 = !DILocation(line: 1582, column: 9, scope: !4219)
!4219 = !DILexicalBlockFile(scope: !4217, file: !3, discriminator: 1)
!4220 = !DILocation(line: 1582, column: 49, scope: !4219)
!4221 = !DILocation(line: 1582, column: 53, scope: !4222)
!4222 = !DILexicalBlockFile(scope: !4217, file: !3, discriminator: 2)
!4223 = !DILocation(line: 1582, column: 87, scope: !4222)
!4224 = !DILocation(line: 1582, column: 9, scope: !4092)
!4225 = !DILocation(line: 1584, column: 9, scope: !4226)
!4226 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 1583, column: 5)
!4227 = !DILocation(line: 1582, column: 93, scope: !4228)
!4228 = !DILexicalBlockFile(scope: !4217, file: !3, discriminator: 3)
!4229 = !DILocation(line: 1588, column: 5, scope: !4064)
!4230 = !DILocation(line: 1588, column: 19, scope: !4064)
!4231 = !DILocation(line: 1588, column: 24, scope: !4064)
!4232 = !DILocation(line: 1590, column: 5, scope: !4064)
!4233 = !DILocation(line: 1590, column: 11, scope: !4064)
!4234 = !DILocation(line: 1590, column: 16, scope: !4064)
!4235 = !DILocation(line: 1591, column: 19, scope: !4064)
!4236 = !DILocation(line: 1591, column: 5, scope: !4064)
!4237 = !DILocation(line: 1591, column: 11, scope: !4064)
!4238 = !DILocation(line: 1591, column: 17, scope: !4064)
!4239 = !DILocation(line: 1593, column: 5, scope: !4064)
!4240 = !DILocation(line: 1593, column: 19, scope: !4064)
!4241 = !DILocation(line: 1593, column: 25, scope: !4064)
!4242 = !DILocation(line: 1594, column: 5, scope: !4064)
!4243 = !DILocation(line: 1597, column: 9, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 1597, column: 9)
!4245 = !DILocation(line: 1597, column: 14, scope: !4244)
!4246 = !DILocation(line: 1597, column: 9, scope: !4064)
!4247 = !DILocation(line: 1599, column: 22, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 1598, column: 5)
!4249 = !DILocation(line: 1599, column: 9, scope: !4248)
!4250 = !DILocation(line: 1600, column: 5, scope: !4248)
!4251 = !DILocation(line: 1602, column: 5, scope: !4064)
!4252 = !DILocation(line: 1603, column: 1, scope: !4064)
!4253 = distinct !DISubprogram(name: "utf16_literal_to_utf8", scope: !3, file: !3, line: 577, type: !4254, isLocal: true, isDefinition: true, scopeLine: 578, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4254 = !DISubroutineType(types: !4255)
!4255 = !{!14, !4256, !4256, !4257}
!4256 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!4257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!4258 = !DILocalVariable(name: "input_pointer", arg: 1, scope: !4253, file: !3, line: 577, type: !4256)
!4259 = !DILocation(line: 577, column: 72, scope: !4253)
!4260 = !DILocalVariable(name: "input_end", arg: 2, scope: !4253, file: !3, line: 577, type: !4256)
!4261 = !DILocation(line: 577, column: 115, scope: !4253)
!4262 = !DILocalVariable(name: "output_pointer", arg: 3, scope: !4253, file: !3, line: 577, type: !4257)
!4263 = !DILocation(line: 577, column: 142, scope: !4253)
!4264 = !DILocalVariable(name: "codepoint", scope: !4253, file: !3, line: 579, type: !21)
!4265 = !DILocation(line: 579, column: 23, scope: !4253)
!4266 = !DILocalVariable(name: "first_code", scope: !4253, file: !3, line: 580, type: !35)
!4267 = !DILocation(line: 580, column: 18, scope: !4253)
!4268 = !DILocalVariable(name: "first_sequence", scope: !4253, file: !3, line: 581, type: !12)
!4269 = !DILocation(line: 581, column: 26, scope: !4253)
!4270 = !DILocation(line: 581, column: 43, scope: !4253)
!4271 = !DILocalVariable(name: "utf8_length", scope: !4253, file: !3, line: 582, type: !14)
!4272 = !DILocation(line: 582, column: 19, scope: !4253)
!4273 = !DILocalVariable(name: "utf8_position", scope: !4253, file: !3, line: 583, type: !14)
!4274 = !DILocation(line: 583, column: 19, scope: !4253)
!4275 = !DILocalVariable(name: "sequence_length", scope: !4253, file: !3, line: 584, type: !14)
!4276 = !DILocation(line: 584, column: 19, scope: !4253)
!4277 = !DILocalVariable(name: "first_byte_mark", scope: !4253, file: !3, line: 585, type: !14)
!4278 = !DILocation(line: 585, column: 19, scope: !4253)
!4279 = !DILocation(line: 587, column: 10, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 587, column: 9)
!4281 = !DILocation(line: 587, column: 22, scope: !4280)
!4282 = !DILocation(line: 587, column: 20, scope: !4280)
!4283 = !DILocation(line: 587, column: 38, scope: !4280)
!4284 = !DILocation(line: 587, column: 9, scope: !4253)
!4285 = !DILocation(line: 590, column: 9, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 588, column: 5)
!4287 = !DILocation(line: 594, column: 29, scope: !4253)
!4288 = !DILocation(line: 594, column: 44, scope: !4253)
!4289 = !DILocation(line: 594, column: 18, scope: !4253)
!4290 = !DILocation(line: 594, column: 16, scope: !4253)
!4291 = !DILocation(line: 597, column: 11, scope: !4292)
!4292 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 597, column: 9)
!4293 = !DILocation(line: 597, column: 22, scope: !4292)
!4294 = !DILocation(line: 597, column: 33, scope: !4292)
!4295 = !DILocation(line: 597, column: 37, scope: !4296)
!4296 = !DILexicalBlockFile(scope: !4292, file: !3, discriminator: 1)
!4297 = !DILocation(line: 597, column: 48, scope: !4296)
!4298 = !DILocation(line: 597, column: 9, scope: !4299)
!4299 = !DILexicalBlockFile(scope: !4253, file: !3, discriminator: 1)
!4300 = !DILocation(line: 599, column: 9, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 598, column: 5)
!4302 = !DILocation(line: 603, column: 10, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 603, column: 9)
!4304 = !DILocation(line: 603, column: 21, scope: !4303)
!4305 = !DILocation(line: 603, column: 32, scope: !4303)
!4306 = !DILocation(line: 603, column: 36, scope: !4307)
!4307 = !DILexicalBlockFile(scope: !4303, file: !3, discriminator: 1)
!4308 = !DILocation(line: 603, column: 47, scope: !4307)
!4309 = !DILocation(line: 603, column: 9, scope: !4299)
!4310 = !DILocalVariable(name: "second_sequence", scope: !4311, file: !3, line: 605, type: !12)
!4311 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 604, column: 5)
!4312 = !DILocation(line: 605, column: 30, scope: !4311)
!4313 = !DILocation(line: 605, column: 48, scope: !4311)
!4314 = !DILocation(line: 605, column: 63, scope: !4311)
!4315 = !DILocalVariable(name: "second_code", scope: !4311, file: !3, line: 606, type: !35)
!4316 = !DILocation(line: 606, column: 22, scope: !4311)
!4317 = !DILocation(line: 607, column: 25, scope: !4311)
!4318 = !DILocation(line: 609, column: 14, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 609, column: 13)
!4320 = !DILocation(line: 609, column: 26, scope: !4319)
!4321 = !DILocation(line: 609, column: 24, scope: !4319)
!4322 = !DILocation(line: 609, column: 43, scope: !4319)
!4323 = !DILocation(line: 609, column: 13, scope: !4311)
!4324 = !DILocation(line: 612, column: 13, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 610, column: 9)
!4326 = !DILocation(line: 615, column: 14, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 615, column: 13)
!4328 = !DILocation(line: 615, column: 33, scope: !4327)
!4329 = !DILocation(line: 615, column: 42, scope: !4327)
!4330 = !DILocation(line: 615, column: 46, scope: !4331)
!4331 = !DILexicalBlockFile(scope: !4327, file: !3, discriminator: 1)
!4332 = !DILocation(line: 615, column: 65, scope: !4331)
!4333 = !DILocation(line: 615, column: 13, scope: !4334)
!4334 = !DILexicalBlockFile(scope: !4311, file: !3, discriminator: 1)
!4335 = !DILocation(line: 618, column: 13, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 616, column: 9)
!4337 = !DILocation(line: 622, column: 34, scope: !4311)
!4338 = !DILocation(line: 622, column: 50, scope: !4311)
!4339 = !DILocation(line: 622, column: 23, scope: !4311)
!4340 = !DILocation(line: 622, column: 21, scope: !4311)
!4341 = !DILocation(line: 624, column: 14, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 624, column: 13)
!4343 = !DILocation(line: 624, column: 26, scope: !4342)
!4344 = !DILocation(line: 624, column: 36, scope: !4342)
!4345 = !DILocation(line: 624, column: 40, scope: !4346)
!4346 = !DILexicalBlockFile(scope: !4342, file: !3, discriminator: 1)
!4347 = !DILocation(line: 624, column: 52, scope: !4346)
!4348 = !DILocation(line: 624, column: 13, scope: !4334)
!4349 = !DILocation(line: 627, column: 13, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 625, column: 9)
!4351 = !DILocation(line: 632, column: 34, scope: !4311)
!4352 = !DILocation(line: 632, column: 45, scope: !4311)
!4353 = !DILocation(line: 632, column: 54, scope: !4311)
!4354 = !DILocation(line: 632, column: 64, scope: !4311)
!4355 = !DILocation(line: 632, column: 76, scope: !4311)
!4356 = !DILocation(line: 632, column: 61, scope: !4311)
!4357 = !DILocation(line: 632, column: 29, scope: !4311)
!4358 = !DILocation(line: 632, column: 21, scope: !4311)
!4359 = !DILocation(line: 632, column: 19, scope: !4311)
!4360 = !DILocation(line: 633, column: 5, scope: !4311)
!4361 = !DILocation(line: 636, column: 25, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 635, column: 5)
!4363 = !DILocation(line: 637, column: 21, scope: !4362)
!4364 = !DILocation(line: 637, column: 19, scope: !4362)
!4365 = !DILocation(line: 643, column: 9, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 643, column: 9)
!4367 = !DILocation(line: 643, column: 19, scope: !4366)
!4368 = !DILocation(line: 643, column: 9, scope: !4253)
!4369 = !DILocation(line: 646, column: 21, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4366, file: !3, line: 644, column: 5)
!4371 = !DILocation(line: 647, column: 5, scope: !4370)
!4372 = !DILocation(line: 648, column: 14, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4366, file: !3, line: 648, column: 14)
!4374 = !DILocation(line: 648, column: 24, scope: !4373)
!4375 = !DILocation(line: 648, column: 14, scope: !4366)
!4376 = !DILocation(line: 651, column: 21, scope: !4377)
!4377 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 649, column: 5)
!4378 = !DILocation(line: 652, column: 25, scope: !4377)
!4379 = !DILocation(line: 653, column: 5, scope: !4377)
!4380 = !DILocation(line: 654, column: 14, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 654, column: 14)
!4382 = !DILocation(line: 654, column: 24, scope: !4381)
!4383 = !DILocation(line: 654, column: 14, scope: !4373)
!4384 = !DILocation(line: 657, column: 21, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 655, column: 5)
!4386 = !DILocation(line: 658, column: 25, scope: !4385)
!4387 = !DILocation(line: 659, column: 5, scope: !4385)
!4388 = !DILocation(line: 660, column: 14, scope: !4389)
!4389 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 660, column: 14)
!4390 = !DILocation(line: 660, column: 24, scope: !4389)
!4391 = !DILocation(line: 660, column: 14, scope: !4381)
!4392 = !DILocation(line: 663, column: 21, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 661, column: 5)
!4394 = !DILocation(line: 664, column: 25, scope: !4393)
!4395 = !DILocation(line: 665, column: 5, scope: !4393)
!4396 = !DILocation(line: 669, column: 9, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 667, column: 5)
!4398 = !DILocation(line: 673, column: 42, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 673, column: 5)
!4400 = !DILocation(line: 673, column: 54, scope: !4399)
!4401 = !DILocation(line: 673, column: 26, scope: !4399)
!4402 = !DILocation(line: 673, column: 24, scope: !4399)
!4403 = !DILocation(line: 673, column: 10, scope: !4399)
!4404 = !DILocation(line: 673, column: 60, scope: !4405)
!4405 = !DILexicalBlockFile(scope: !4406, file: !3, discriminator: 1)
!4406 = distinct !DILexicalBlock(scope: !4399, file: !3, line: 673, column: 5)
!4407 = !DILocation(line: 673, column: 74, scope: !4405)
!4408 = !DILocation(line: 673, column: 5, scope: !4409)
!4409 = !DILexicalBlockFile(scope: !4399, file: !3, discriminator: 1)
!4410 = !DILocation(line: 676, column: 61, scope: !4411)
!4411 = distinct !DILexicalBlock(scope: !4406, file: !3, line: 674, column: 5)
!4412 = !DILocation(line: 676, column: 71, scope: !4411)
!4413 = !DILocation(line: 676, column: 79, scope: !4411)
!4414 = !DILocation(line: 676, column: 44, scope: !4411)
!4415 = !DILocation(line: 676, column: 11, scope: !4411)
!4416 = !DILocation(line: 676, column: 10, scope: !4411)
!4417 = !DILocation(line: 676, column: 27, scope: !4411)
!4418 = !DILocation(line: 676, column: 9, scope: !4411)
!4419 = !DILocation(line: 676, column: 42, scope: !4411)
!4420 = !DILocation(line: 677, column: 19, scope: !4411)
!4421 = !DILocation(line: 678, column: 5, scope: !4411)
!4422 = !DILocation(line: 673, column: 92, scope: !4423)
!4423 = !DILexicalBlockFile(scope: !4406, file: !3, discriminator: 2)
!4424 = !DILocation(line: 673, column: 5, scope: !4423)
!4425 = distinct !{!4425, !4426, !4427}
!4426 = !DILocation(line: 673, column: 5, scope: !4399)
!4427 = !DILocation(line: 678, column: 5, scope: !4399)
!4428 = !DILocation(line: 680, column: 9, scope: !4429)
!4429 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 680, column: 9)
!4430 = !DILocation(line: 680, column: 21, scope: !4429)
!4431 = !DILocation(line: 680, column: 9, scope: !4253)
!4432 = !DILocation(line: 682, column: 49, scope: !4433)
!4433 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 681, column: 5)
!4434 = !DILocation(line: 682, column: 61, scope: !4433)
!4435 = !DILocation(line: 682, column: 59, scope: !4433)
!4436 = !DILocation(line: 682, column: 78, scope: !4433)
!4437 = !DILocation(line: 682, column: 32, scope: !4433)
!4438 = !DILocation(line: 682, column: 11, scope: !4433)
!4439 = !DILocation(line: 682, column: 10, scope: !4433)
!4440 = !DILocation(line: 682, column: 9, scope: !4433)
!4441 = !DILocation(line: 682, column: 30, scope: !4433)
!4442 = !DILocation(line: 683, column: 5, scope: !4433)
!4443 = !DILocation(line: 686, column: 48, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 685, column: 5)
!4445 = !DILocation(line: 686, column: 58, scope: !4444)
!4446 = !DILocation(line: 686, column: 32, scope: !4444)
!4447 = !DILocation(line: 686, column: 11, scope: !4444)
!4448 = !DILocation(line: 686, column: 10, scope: !4444)
!4449 = !DILocation(line: 686, column: 9, scope: !4444)
!4450 = !DILocation(line: 686, column: 30, scope: !4444)
!4451 = !DILocation(line: 689, column: 24, scope: !4253)
!4452 = !DILocation(line: 689, column: 6, scope: !4253)
!4453 = !DILocation(line: 689, column: 21, scope: !4253)
!4454 = !DILocation(line: 691, column: 12, scope: !4253)
!4455 = !DILocation(line: 691, column: 5, scope: !4253)
!4456 = !DILocation(line: 694, column: 5, scope: !4253)
!4457 = !DILocation(line: 695, column: 1, scope: !4253)
!4458 = distinct !DISubprogram(name: "parse_hex4", scope: !3, file: !3, line: 540, type: !4459, isLocal: true, isDefinition: true, scopeLine: 541, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4459 = !DISubroutineType(types: !4460)
!4460 = !{!35, !4256}
!4461 = !DILocalVariable(name: "input", arg: 1, scope: !4458, file: !3, line: 540, type: !4256)
!4462 = !DILocation(line: 540, column: 56, scope: !4458)
!4463 = !DILocalVariable(name: "h", scope: !4458, file: !3, line: 542, type: !35)
!4464 = !DILocation(line: 542, column: 18, scope: !4458)
!4465 = !DILocalVariable(name: "i", scope: !4458, file: !3, line: 543, type: !19)
!4466 = !DILocation(line: 543, column: 12, scope: !4458)
!4467 = !DILocation(line: 545, column: 12, scope: !4468)
!4468 = distinct !DILexicalBlock(scope: !4458, file: !3, line: 545, column: 5)
!4469 = !DILocation(line: 545, column: 10, scope: !4468)
!4470 = !DILocation(line: 545, column: 17, scope: !4471)
!4471 = !DILexicalBlockFile(scope: !4472, file: !3, discriminator: 1)
!4472 = distinct !DILexicalBlock(scope: !4468, file: !3, line: 545, column: 5)
!4473 = !DILocation(line: 545, column: 19, scope: !4471)
!4474 = !DILocation(line: 545, column: 5, scope: !4475)
!4475 = !DILexicalBlockFile(scope: !4468, file: !3, discriminator: 1)
!4476 = !DILocation(line: 548, column: 14, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 548, column: 13)
!4478 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 546, column: 5)
!4479 = !DILocation(line: 548, column: 20, scope: !4477)
!4480 = !DILocation(line: 548, column: 23, scope: !4477)
!4481 = !DILocation(line: 548, column: 31, scope: !4477)
!4482 = !DILocation(line: 548, column: 35, scope: !4483)
!4483 = !DILexicalBlockFile(scope: !4477, file: !3, discriminator: 1)
!4484 = !DILocation(line: 548, column: 41, scope: !4483)
!4485 = !DILocation(line: 548, column: 44, scope: !4483)
!4486 = !DILocation(line: 548, column: 13, scope: !4487)
!4487 = !DILexicalBlockFile(scope: !4478, file: !3, discriminator: 1)
!4488 = !DILocation(line: 550, column: 33, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 549, column: 9)
!4490 = !DILocation(line: 550, column: 39, scope: !4489)
!4491 = !DILocation(line: 550, column: 18, scope: !4489)
!4492 = !DILocation(line: 550, column: 42, scope: !4489)
!4493 = !DILocation(line: 550, column: 15, scope: !4489)
!4494 = !DILocation(line: 551, column: 9, scope: !4489)
!4495 = !DILocation(line: 552, column: 19, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 552, column: 18)
!4497 = !DILocation(line: 552, column: 25, scope: !4496)
!4498 = !DILocation(line: 552, column: 28, scope: !4496)
!4499 = !DILocation(line: 552, column: 36, scope: !4496)
!4500 = !DILocation(line: 552, column: 40, scope: !4501)
!4501 = !DILexicalBlockFile(scope: !4496, file: !3, discriminator: 1)
!4502 = !DILocation(line: 552, column: 46, scope: !4501)
!4503 = !DILocation(line: 552, column: 49, scope: !4501)
!4504 = !DILocation(line: 552, column: 18, scope: !4483)
!4505 = !DILocation(line: 554, column: 38, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 553, column: 9)
!4507 = !DILocation(line: 554, column: 44, scope: !4506)
!4508 = !DILocation(line: 554, column: 36, scope: !4506)
!4509 = !DILocation(line: 554, column: 47, scope: !4506)
!4510 = !DILocation(line: 554, column: 15, scope: !4506)
!4511 = !DILocation(line: 555, column: 9, scope: !4506)
!4512 = !DILocation(line: 556, column: 19, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 556, column: 18)
!4514 = !DILocation(line: 556, column: 25, scope: !4513)
!4515 = !DILocation(line: 556, column: 28, scope: !4513)
!4516 = !DILocation(line: 556, column: 36, scope: !4513)
!4517 = !DILocation(line: 556, column: 40, scope: !4518)
!4518 = !DILexicalBlockFile(scope: !4513, file: !3, discriminator: 1)
!4519 = !DILocation(line: 556, column: 46, scope: !4518)
!4520 = !DILocation(line: 556, column: 49, scope: !4518)
!4521 = !DILocation(line: 556, column: 18, scope: !4501)
!4522 = !DILocation(line: 558, column: 38, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 557, column: 9)
!4524 = !DILocation(line: 558, column: 44, scope: !4523)
!4525 = !DILocation(line: 558, column: 36, scope: !4523)
!4526 = !DILocation(line: 558, column: 47, scope: !4523)
!4527 = !DILocation(line: 558, column: 15, scope: !4523)
!4528 = !DILocation(line: 559, column: 9, scope: !4523)
!4529 = !DILocation(line: 562, column: 13, scope: !4530)
!4530 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 561, column: 9)
!4531 = !DILocation(line: 565, column: 13, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 565, column: 13)
!4533 = !DILocation(line: 565, column: 15, scope: !4532)
!4534 = !DILocation(line: 565, column: 13, scope: !4478)
!4535 = !DILocation(line: 568, column: 17, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 566, column: 9)
!4537 = !DILocation(line: 568, column: 19, scope: !4536)
!4538 = !DILocation(line: 568, column: 15, scope: !4536)
!4539 = !DILocation(line: 569, column: 9, scope: !4536)
!4540 = !DILocation(line: 570, column: 5, scope: !4478)
!4541 = !DILocation(line: 545, column: 25, scope: !4542)
!4542 = !DILexicalBlockFile(scope: !4472, file: !3, discriminator: 2)
!4543 = !DILocation(line: 545, column: 5, scope: !4542)
!4544 = distinct !{!4544, !4545, !4546}
!4545 = !DILocation(line: 545, column: 5, scope: !4468)
!4546 = !DILocation(line: 570, column: 5, scope: !4468)
!4547 = !DILocation(line: 572, column: 12, scope: !4458)
!4548 = !DILocation(line: 572, column: 5, scope: !4458)
!4549 = !DILocation(line: 573, column: 1, scope: !4458)
!4550 = distinct !DISubprogram(name: "get_decimal_point", scope: !3, file: !3, line: 238, type: !4551, isLocal: true, isDefinition: true, scopeLine: 239, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4551 = !DISubroutineType(types: !4552)
!4552 = !{!14}
!4553 = !DILocation(line: 244, column: 5, scope: !4550)
!4554 = distinct !DISubprogram(name: "ensure", scope: !3, file: !3, line: 373, type: !4555, isLocal: true, isDefinition: true, scopeLine: 374, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4555 = !DISubroutineType(types: !4556)
!4556 = !{!18, !888, !19}
!4557 = !DILocalVariable(name: "p", arg: 1, scope: !4554, file: !3, line: 373, type: !888)
!4558 = !DILocation(line: 373, column: 50, scope: !4554)
!4559 = !DILocalVariable(name: "needed", arg: 2, scope: !4554, file: !3, line: 373, type: !19)
!4560 = !DILocation(line: 373, column: 60, scope: !4554)
!4561 = !DILocalVariable(name: "newbuffer", scope: !4554, file: !3, line: 375, type: !18)
!4562 = !DILocation(line: 375, column: 20, scope: !4554)
!4563 = !DILocalVariable(name: "newsize", scope: !4554, file: !3, line: 376, type: !19)
!4564 = !DILocation(line: 376, column: 12, scope: !4554)
!4565 = !DILocation(line: 378, column: 10, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 378, column: 9)
!4567 = !DILocation(line: 378, column: 12, scope: !4566)
!4568 = !DILocation(line: 378, column: 21, scope: !4566)
!4569 = !DILocation(line: 378, column: 25, scope: !4570)
!4570 = !DILexicalBlockFile(scope: !4566, file: !3, discriminator: 1)
!4571 = !DILocation(line: 378, column: 28, scope: !4570)
!4572 = !DILocation(line: 378, column: 35, scope: !4570)
!4573 = !DILocation(line: 378, column: 9, scope: !4574)
!4574 = !DILexicalBlockFile(scope: !4554, file: !3, discriminator: 1)
!4575 = !DILocation(line: 380, column: 9, scope: !4576)
!4576 = distinct !DILexicalBlock(scope: !4566, file: !3, line: 379, column: 5)
!4577 = !DILocation(line: 383, column: 10, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 383, column: 9)
!4579 = !DILocation(line: 383, column: 13, scope: !4578)
!4580 = !DILocation(line: 383, column: 20, scope: !4578)
!4581 = !DILocation(line: 383, column: 25, scope: !4578)
!4582 = !DILocation(line: 383, column: 29, scope: !4583)
!4583 = !DILexicalBlockFile(scope: !4578, file: !3, discriminator: 1)
!4584 = !DILocation(line: 383, column: 32, scope: !4583)
!4585 = !DILocation(line: 383, column: 42, scope: !4583)
!4586 = !DILocation(line: 383, column: 45, scope: !4583)
!4587 = !DILocation(line: 383, column: 39, scope: !4583)
!4588 = !DILocation(line: 383, column: 9, scope: !4574)
!4589 = !DILocation(line: 386, column: 9, scope: !4590)
!4590 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 384, column: 5)
!4591 = !DILocation(line: 389, column: 9, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 389, column: 9)
!4593 = !DILocation(line: 389, column: 16, scope: !4592)
!4594 = !DILocation(line: 389, column: 9, scope: !4554)
!4595 = !DILocation(line: 392, column: 9, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 390, column: 5)
!4597 = !DILocation(line: 395, column: 15, scope: !4554)
!4598 = !DILocation(line: 395, column: 18, scope: !4554)
!4599 = !DILocation(line: 395, column: 25, scope: !4554)
!4600 = !DILocation(line: 395, column: 12, scope: !4554)
!4601 = !DILocation(line: 396, column: 9, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 396, column: 9)
!4603 = !DILocation(line: 396, column: 19, scope: !4602)
!4604 = !DILocation(line: 396, column: 22, scope: !4602)
!4605 = !DILocation(line: 396, column: 16, scope: !4602)
!4606 = !DILocation(line: 396, column: 9, scope: !4554)
!4607 = !DILocation(line: 398, column: 16, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 397, column: 5)
!4609 = !DILocation(line: 398, column: 19, scope: !4608)
!4610 = !DILocation(line: 398, column: 28, scope: !4608)
!4611 = !DILocation(line: 398, column: 31, scope: !4608)
!4612 = !DILocation(line: 398, column: 26, scope: !4608)
!4613 = !DILocation(line: 398, column: 9, scope: !4608)
!4614 = !DILocation(line: 401, column: 9, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 401, column: 9)
!4616 = !DILocation(line: 401, column: 12, scope: !4615)
!4617 = !DILocation(line: 401, column: 9, scope: !4554)
!4618 = !DILocation(line: 402, column: 9, scope: !4619)
!4619 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 401, column: 21)
!4620 = !DILocation(line: 406, column: 9, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 406, column: 9)
!4622 = !DILocation(line: 406, column: 16, scope: !4621)
!4623 = !DILocation(line: 406, column: 9, scope: !4554)
!4624 = !DILocation(line: 409, column: 13, scope: !4625)
!4625 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 409, column: 13)
!4626 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 407, column: 5)
!4627 = !DILocation(line: 409, column: 20, scope: !4625)
!4628 = !DILocation(line: 409, column: 13, scope: !4626)
!4629 = !DILocation(line: 411, column: 21, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 410, column: 9)
!4631 = !DILocation(line: 412, column: 9, scope: !4630)
!4632 = !DILocation(line: 415, column: 13, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 414, column: 9)
!4634 = !DILocation(line: 417, column: 5, scope: !4626)
!4635 = !DILocation(line: 420, column: 19, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 419, column: 5)
!4637 = !DILocation(line: 420, column: 26, scope: !4636)
!4638 = !DILocation(line: 420, column: 17, scope: !4636)
!4639 = !DILocation(line: 423, column: 9, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 423, column: 9)
!4641 = !DILocation(line: 423, column: 12, scope: !4640)
!4642 = !DILocation(line: 423, column: 18, scope: !4640)
!4643 = !DILocation(line: 423, column: 29, scope: !4640)
!4644 = !DILocation(line: 423, column: 9, scope: !4554)
!4645 = !DILocation(line: 426, column: 37, scope: !4646)
!4646 = distinct !DILexicalBlock(scope: !4640, file: !3, line: 424, column: 5)
!4647 = !DILocation(line: 426, column: 40, scope: !4646)
!4648 = !DILocation(line: 426, column: 46, scope: !4646)
!4649 = !DILocation(line: 426, column: 57, scope: !4646)
!4650 = !DILocation(line: 426, column: 60, scope: !4646)
!4651 = !DILocation(line: 426, column: 68, scope: !4646)
!4652 = !DILocation(line: 426, column: 19, scope: !4646)
!4653 = !DILocation(line: 427, column: 13, scope: !4654)
!4654 = distinct !DILexicalBlock(scope: !4646, file: !3, line: 427, column: 13)
!4655 = !DILocation(line: 427, column: 23, scope: !4654)
!4656 = !DILocation(line: 427, column: 13, scope: !4646)
!4657 = !DILocation(line: 429, column: 13, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4654, file: !3, line: 428, column: 9)
!4659 = !DILocation(line: 429, column: 16, scope: !4658)
!4660 = !DILocation(line: 429, column: 22, scope: !4658)
!4661 = !DILocation(line: 429, column: 33, scope: !4658)
!4662 = !DILocation(line: 429, column: 36, scope: !4658)
!4663 = !DILocation(line: 430, column: 13, scope: !4658)
!4664 = !DILocation(line: 430, column: 16, scope: !4658)
!4665 = !DILocation(line: 430, column: 23, scope: !4658)
!4666 = !DILocation(line: 431, column: 13, scope: !4658)
!4667 = !DILocation(line: 431, column: 16, scope: !4658)
!4668 = !DILocation(line: 431, column: 23, scope: !4658)
!4669 = !DILocation(line: 433, column: 13, scope: !4658)
!4670 = !DILocation(line: 435, column: 5, scope: !4646)
!4671 = !DILocation(line: 439, column: 37, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4640, file: !3, line: 437, column: 5)
!4673 = !DILocation(line: 439, column: 40, scope: !4672)
!4674 = !DILocation(line: 439, column: 46, scope: !4672)
!4675 = !DILocation(line: 439, column: 55, scope: !4672)
!4676 = !DILocation(line: 439, column: 19, scope: !4672)
!4677 = !DILocation(line: 440, column: 14, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4672, file: !3, line: 440, column: 13)
!4679 = !DILocation(line: 440, column: 13, scope: !4672)
!4680 = !DILocation(line: 442, column: 13, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !4678, file: !3, line: 441, column: 9)
!4682 = !DILocation(line: 442, column: 16, scope: !4681)
!4683 = !DILocation(line: 442, column: 22, scope: !4681)
!4684 = !DILocation(line: 442, column: 33, scope: !4681)
!4685 = !DILocation(line: 442, column: 36, scope: !4681)
!4686 = !DILocation(line: 443, column: 13, scope: !4681)
!4687 = !DILocation(line: 443, column: 16, scope: !4681)
!4688 = !DILocation(line: 443, column: 23, scope: !4681)
!4689 = !DILocation(line: 444, column: 13, scope: !4681)
!4690 = !DILocation(line: 444, column: 16, scope: !4681)
!4691 = !DILocation(line: 444, column: 23, scope: !4681)
!4692 = !DILocation(line: 446, column: 13, scope: !4681)
!4693 = !DILocation(line: 448, column: 13, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4672, file: !3, line: 448, column: 13)
!4695 = !DILocation(line: 448, column: 13, scope: !4672)
!4696 = !DILocation(line: 450, column: 20, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 449, column: 9)
!4698 = !DILocation(line: 450, column: 31, scope: !4697)
!4699 = !DILocation(line: 450, column: 34, scope: !4697)
!4700 = !DILocation(line: 450, column: 42, scope: !4697)
!4701 = !DILocation(line: 450, column: 45, scope: !4697)
!4702 = !DILocation(line: 450, column: 52, scope: !4697)
!4703 = !DILocation(line: 450, column: 13, scope: !4697)
!4704 = !DILocation(line: 451, column: 9, scope: !4697)
!4705 = !DILocation(line: 452, column: 9, scope: !4672)
!4706 = !DILocation(line: 452, column: 12, scope: !4672)
!4707 = !DILocation(line: 452, column: 18, scope: !4672)
!4708 = !DILocation(line: 452, column: 29, scope: !4672)
!4709 = !DILocation(line: 452, column: 32, scope: !4672)
!4710 = !DILocation(line: 454, column: 17, scope: !4554)
!4711 = !DILocation(line: 454, column: 5, scope: !4554)
!4712 = !DILocation(line: 454, column: 8, scope: !4554)
!4713 = !DILocation(line: 454, column: 15, scope: !4554)
!4714 = !DILocation(line: 455, column: 17, scope: !4554)
!4715 = !DILocation(line: 455, column: 5, scope: !4554)
!4716 = !DILocation(line: 455, column: 8, scope: !4554)
!4717 = !DILocation(line: 455, column: 15, scope: !4554)
!4718 = !DILocation(line: 457, column: 12, scope: !4554)
!4719 = !DILocation(line: 457, column: 24, scope: !4554)
!4720 = !DILocation(line: 457, column: 27, scope: !4554)
!4721 = !DILocation(line: 457, column: 22, scope: !4554)
!4722 = !DILocation(line: 457, column: 5, scope: !4554)
!4723 = !DILocation(line: 458, column: 1, scope: !4554)
!4724 = distinct !DISubprogram(name: "print_number", scope: !3, file: !3, line: 474, type: !886, isLocal: true, isDefinition: true, scopeLine: 475, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4725 = !DILocalVariable(name: "item", arg: 1, scope: !4724, file: !3, line: 474, type: !68)
!4726 = !DILocation(line: 474, column: 52, scope: !4724)
!4727 = !DILocalVariable(name: "output_buffer", arg: 2, scope: !4724, file: !3, line: 474, type: !888)
!4728 = !DILocation(line: 474, column: 78, scope: !4724)
!4729 = !DILocalVariable(name: "output_pointer", scope: !4724, file: !3, line: 476, type: !18)
!4730 = !DILocation(line: 476, column: 20, scope: !4724)
!4731 = !DILocalVariable(name: "d", scope: !4724, file: !3, line: 477, type: !10)
!4732 = !DILocation(line: 477, column: 12, scope: !4724)
!4733 = !DILocation(line: 477, column: 16, scope: !4724)
!4734 = !DILocation(line: 477, column: 22, scope: !4724)
!4735 = !DILocalVariable(name: "length", scope: !4724, file: !3, line: 478, type: !11)
!4736 = !DILocation(line: 478, column: 9, scope: !4724)
!4737 = !DILocalVariable(name: "i", scope: !4724, file: !3, line: 479, type: !19)
!4738 = !DILocation(line: 479, column: 12, scope: !4724)
!4739 = !DILocalVariable(name: "number_buffer", scope: !4724, file: !3, line: 480, type: !4740)
!4740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 208, elements: !4741)
!4741 = !{!4742}
!4742 = !DISubrange(count: 26)
!4743 = !DILocation(line: 480, column: 19, scope: !4724)
!4744 = !DILocalVariable(name: "decimal_point", scope: !4724, file: !3, line: 481, type: !14)
!4745 = !DILocation(line: 481, column: 19, scope: !4724)
!4746 = !DILocation(line: 481, column: 35, scope: !4724)
!4747 = !DILocalVariable(name: "test", scope: !4724, file: !3, line: 482, type: !10)
!4748 = !DILocation(line: 482, column: 12, scope: !4724)
!4749 = !DILocation(line: 484, column: 9, scope: !4750)
!4750 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 484, column: 9)
!4751 = !DILocation(line: 484, column: 23, scope: !4750)
!4752 = !DILocation(line: 484, column: 9, scope: !4724)
!4753 = !DILocation(line: 486, column: 9, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4750, file: !3, line: 485, column: 5)
!4755 = !DILocation(line: 490, column: 10, scope: !4756)
!4756 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 490, column: 9)
!4757 = !DILocation(line: 490, column: 12, scope: !4756)
!4758 = !DILocation(line: 490, column: 17, scope: !4756)
!4759 = !DILocation(line: 490, column: 9, scope: !4724)
!4760 = !DILocation(line: 492, column: 33, scope: !4761)
!4761 = distinct !DILexicalBlock(scope: !4756, file: !3, line: 491, column: 5)
!4762 = !DILocation(line: 492, column: 18, scope: !4761)
!4763 = !DILocation(line: 492, column: 16, scope: !4761)
!4764 = !DILocation(line: 493, column: 5, scope: !4761)
!4765 = !DILocation(line: 497, column: 33, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4756, file: !3, line: 495, column: 5)
!4767 = !DILocation(line: 497, column: 58, scope: !4766)
!4768 = !DILocation(line: 497, column: 18, scope: !4766)
!4769 = !DILocation(line: 497, column: 16, scope: !4766)
!4770 = !DILocation(line: 500, column: 28, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 500, column: 13)
!4772 = !DILocation(line: 500, column: 14, scope: !4771)
!4773 = !DILocation(line: 500, column: 57, scope: !4771)
!4774 = !DILocation(line: 500, column: 63, scope: !4771)
!4775 = !DILocation(line: 500, column: 75, scope: !4776)
!4776 = !DILexicalBlockFile(scope: !4771, file: !3, discriminator: 1)
!4777 = !DILocation(line: 500, column: 83, scope: !4776)
!4778 = !DILocation(line: 500, column: 80, scope: !4776)
!4779 = !DILocation(line: 500, column: 13, scope: !4780)
!4780 = !DILexicalBlockFile(scope: !4766, file: !3, discriminator: 1)
!4781 = !DILocation(line: 503, column: 37, scope: !4782)
!4782 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 501, column: 9)
!4783 = !DILocation(line: 503, column: 62, scope: !4782)
!4784 = !DILocation(line: 503, column: 22, scope: !4782)
!4785 = !DILocation(line: 503, column: 20, scope: !4782)
!4786 = !DILocation(line: 504, column: 9, scope: !4782)
!4787 = !DILocation(line: 508, column: 10, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 508, column: 9)
!4789 = !DILocation(line: 508, column: 17, scope: !4788)
!4790 = !DILocation(line: 508, column: 22, scope: !4788)
!4791 = !DILocation(line: 508, column: 26, scope: !4792)
!4792 = !DILexicalBlockFile(scope: !4788, file: !3, discriminator: 1)
!4793 = !DILocation(line: 508, column: 33, scope: !4792)
!4794 = !DILocation(line: 508, column: 9, scope: !4795)
!4795 = !DILexicalBlockFile(scope: !4724, file: !3, discriminator: 1)
!4796 = !DILocation(line: 510, column: 9, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4788, file: !3, line: 509, column: 5)
!4798 = !DILocation(line: 514, column: 29, scope: !4724)
!4799 = !DILocation(line: 514, column: 52, scope: !4724)
!4800 = !DILocation(line: 514, column: 44, scope: !4724)
!4801 = !DILocation(line: 514, column: 59, scope: !4724)
!4802 = !DILocation(line: 514, column: 22, scope: !4724)
!4803 = !DILocation(line: 514, column: 20, scope: !4724)
!4804 = !DILocation(line: 515, column: 9, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 515, column: 9)
!4806 = !DILocation(line: 515, column: 24, scope: !4805)
!4807 = !DILocation(line: 515, column: 9, scope: !4724)
!4808 = !DILocation(line: 517, column: 9, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4805, file: !3, line: 516, column: 5)
!4810 = !DILocation(line: 522, column: 12, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 522, column: 5)
!4812 = !DILocation(line: 522, column: 10, scope: !4811)
!4813 = !DILocation(line: 522, column: 17, scope: !4814)
!4814 = !DILexicalBlockFile(scope: !4815, file: !3, discriminator: 1)
!4815 = distinct !DILexicalBlock(scope: !4811, file: !3, line: 522, column: 5)
!4816 = !DILocation(line: 522, column: 30, scope: !4814)
!4817 = !DILocation(line: 522, column: 22, scope: !4814)
!4818 = !DILocation(line: 522, column: 19, scope: !4814)
!4819 = !DILocation(line: 522, column: 5, scope: !4820)
!4820 = !DILexicalBlockFile(scope: !4811, file: !3, discriminator: 1)
!4821 = !DILocation(line: 524, column: 27, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4823, file: !3, line: 524, column: 13)
!4823 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 523, column: 5)
!4824 = !DILocation(line: 524, column: 13, scope: !4822)
!4825 = !DILocation(line: 524, column: 33, scope: !4822)
!4826 = !DILocation(line: 524, column: 30, scope: !4822)
!4827 = !DILocation(line: 524, column: 13, scope: !4823)
!4828 = !DILocation(line: 526, column: 13, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 525, column: 9)
!4830 = !DILocation(line: 526, column: 28, scope: !4829)
!4831 = !DILocation(line: 526, column: 31, scope: !4829)
!4832 = !DILocation(line: 527, column: 13, scope: !4829)
!4833 = !DILocation(line: 530, column: 43, scope: !4823)
!4834 = !DILocation(line: 530, column: 29, scope: !4823)
!4835 = !DILocation(line: 530, column: 9, scope: !4823)
!4836 = !DILocation(line: 530, column: 24, scope: !4823)
!4837 = !DILocation(line: 530, column: 27, scope: !4823)
!4838 = !DILocation(line: 531, column: 5, scope: !4823)
!4839 = !DILocation(line: 522, column: 40, scope: !4840)
!4840 = !DILexicalBlockFile(scope: !4815, file: !3, discriminator: 2)
!4841 = !DILocation(line: 522, column: 5, scope: !4840)
!4842 = distinct !{!4842, !4843, !4844}
!4843 = !DILocation(line: 522, column: 5, scope: !4811)
!4844 = !DILocation(line: 531, column: 5, scope: !4811)
!4845 = !DILocation(line: 532, column: 5, scope: !4724)
!4846 = !DILocation(line: 532, column: 20, scope: !4724)
!4847 = !DILocation(line: 532, column: 23, scope: !4724)
!4848 = !DILocation(line: 534, column: 38, scope: !4724)
!4849 = !DILocation(line: 534, column: 30, scope: !4724)
!4850 = !DILocation(line: 534, column: 5, scope: !4724)
!4851 = !DILocation(line: 534, column: 20, scope: !4724)
!4852 = !DILocation(line: 534, column: 27, scope: !4724)
!4853 = !DILocation(line: 536, column: 5, scope: !4724)
!4854 = !DILocation(line: 537, column: 1, scope: !4724)
!4855 = distinct !DISubprogram(name: "print_string", scope: !3, file: !3, line: 949, type: !886, isLocal: true, isDefinition: true, scopeLine: 950, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4856 = !DILocalVariable(name: "item", arg: 1, scope: !4855, file: !3, line: 949, type: !68)
!4857 = !DILocation(line: 949, column: 52, scope: !4855)
!4858 = !DILocalVariable(name: "p", arg: 2, scope: !4855, file: !3, line: 949, type: !888)
!4859 = !DILocation(line: 949, column: 78, scope: !4855)
!4860 = !DILocation(line: 951, column: 45, scope: !4855)
!4861 = !DILocation(line: 951, column: 51, scope: !4855)
!4862 = !DILocation(line: 951, column: 64, scope: !4855)
!4863 = !DILocation(line: 951, column: 12, scope: !4855)
!4864 = !DILocation(line: 951, column: 5, scope: !4855)
!4865 = distinct !DISubprogram(name: "print_array", scope: !3, file: !3, line: 1435, type: !886, isLocal: true, isDefinition: true, scopeLine: 1436, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4866 = !DILocalVariable(name: "item", arg: 1, scope: !4865, file: !3, line: 1435, type: !68)
!4867 = !DILocation(line: 1435, column: 51, scope: !4865)
!4868 = !DILocalVariable(name: "output_buffer", arg: 2, scope: !4865, file: !3, line: 1435, type: !888)
!4869 = !DILocation(line: 1435, column: 77, scope: !4865)
!4870 = !DILocalVariable(name: "output_pointer", scope: !4865, file: !3, line: 1437, type: !18)
!4871 = !DILocation(line: 1437, column: 20, scope: !4865)
!4872 = !DILocalVariable(name: "length", scope: !4865, file: !3, line: 1438, type: !19)
!4873 = !DILocation(line: 1438, column: 12, scope: !4865)
!4874 = !DILocalVariable(name: "current_element", scope: !4865, file: !3, line: 1439, type: !22)
!4875 = !DILocation(line: 1439, column: 12, scope: !4865)
!4876 = !DILocation(line: 1439, column: 30, scope: !4865)
!4877 = !DILocation(line: 1439, column: 36, scope: !4865)
!4878 = !DILocation(line: 1441, column: 9, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 1441, column: 9)
!4880 = !DILocation(line: 1441, column: 23, scope: !4879)
!4881 = !DILocation(line: 1441, column: 9, scope: !4865)
!4882 = !DILocation(line: 1443, column: 9, scope: !4883)
!4883 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 1442, column: 5)
!4884 = !DILocation(line: 1448, column: 29, scope: !4865)
!4885 = !DILocation(line: 1448, column: 22, scope: !4865)
!4886 = !DILocation(line: 1448, column: 20, scope: !4865)
!4887 = !DILocation(line: 1449, column: 9, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 1449, column: 9)
!4889 = !DILocation(line: 1449, column: 24, scope: !4888)
!4890 = !DILocation(line: 1449, column: 9, scope: !4865)
!4891 = !DILocation(line: 1451, column: 9, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 1450, column: 5)
!4893 = !DILocation(line: 1454, column: 6, scope: !4865)
!4894 = !DILocation(line: 1454, column: 21, scope: !4865)
!4895 = !DILocation(line: 1455, column: 5, scope: !4865)
!4896 = !DILocation(line: 1455, column: 20, scope: !4865)
!4897 = !DILocation(line: 1455, column: 26, scope: !4865)
!4898 = !DILocation(line: 1456, column: 5, scope: !4865)
!4899 = !DILocation(line: 1456, column: 20, scope: !4865)
!4900 = !DILocation(line: 1456, column: 25, scope: !4865)
!4901 = !DILocation(line: 1458, column: 5, scope: !4865)
!4902 = !DILocation(line: 1458, column: 12, scope: !4903)
!4903 = !DILexicalBlockFile(scope: !4865, file: !3, discriminator: 1)
!4904 = !DILocation(line: 1458, column: 28, scope: !4903)
!4905 = !DILocation(line: 1458, column: 5, scope: !4903)
!4906 = !DILocation(line: 1460, column: 26, scope: !4907)
!4907 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 1460, column: 13)
!4908 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 1459, column: 5)
!4909 = !DILocation(line: 1460, column: 43, scope: !4907)
!4910 = !DILocation(line: 1460, column: 14, scope: !4907)
!4911 = !DILocation(line: 1460, column: 13, scope: !4908)
!4912 = !DILocation(line: 1462, column: 13, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4907, file: !3, line: 1461, column: 9)
!4914 = !DILocation(line: 1464, column: 23, scope: !4908)
!4915 = !DILocation(line: 1464, column: 9, scope: !4908)
!4916 = !DILocation(line: 1465, column: 13, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 1465, column: 13)
!4918 = !DILocation(line: 1465, column: 30, scope: !4917)
!4919 = !DILocation(line: 1465, column: 13, scope: !4908)
!4920 = !DILocation(line: 1467, column: 32, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4917, file: !3, line: 1466, column: 9)
!4922 = !DILocation(line: 1467, column: 47, scope: !4921)
!4923 = !DILocation(line: 1467, column: 22, scope: !4921)
!4924 = !DILocation(line: 1467, column: 20, scope: !4921)
!4925 = !DILocation(line: 1468, column: 37, scope: !4921)
!4926 = !DILocation(line: 1468, column: 52, scope: !4921)
!4927 = !DILocation(line: 1468, column: 59, scope: !4921)
!4928 = !DILocation(line: 1468, column: 30, scope: !4921)
!4929 = !DILocation(line: 1468, column: 28, scope: !4921)
!4930 = !DILocation(line: 1469, column: 17, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 1469, column: 17)
!4932 = !DILocation(line: 1469, column: 32, scope: !4931)
!4933 = !DILocation(line: 1469, column: 17, scope: !4921)
!4934 = !DILocation(line: 1471, column: 17, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4931, file: !3, line: 1470, column: 13)
!4936 = !DILocation(line: 1473, column: 28, scope: !4921)
!4937 = !DILocation(line: 1473, column: 31, scope: !4921)
!4938 = !DILocation(line: 1474, column: 16, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 1474, column: 16)
!4940 = !DILocation(line: 1474, column: 31, scope: !4939)
!4941 = !DILocation(line: 1474, column: 16, scope: !4921)
!4942 = !DILocation(line: 1476, column: 32, scope: !4943)
!4943 = distinct !DILexicalBlock(scope: !4939, file: !3, line: 1475, column: 13)
!4944 = !DILocation(line: 1476, column: 35, scope: !4943)
!4945 = !DILocation(line: 1477, column: 13, scope: !4943)
!4946 = !DILocation(line: 1478, column: 14, scope: !4921)
!4947 = !DILocation(line: 1478, column: 29, scope: !4921)
!4948 = !DILocation(line: 1479, column: 38, scope: !4921)
!4949 = !DILocation(line: 1479, column: 13, scope: !4921)
!4950 = !DILocation(line: 1479, column: 28, scope: !4921)
!4951 = !DILocation(line: 1479, column: 35, scope: !4921)
!4952 = !DILocation(line: 1480, column: 9, scope: !4921)
!4953 = !DILocation(line: 1481, column: 27, scope: !4908)
!4954 = !DILocation(line: 1481, column: 44, scope: !4908)
!4955 = !DILocation(line: 1481, column: 25, scope: !4908)
!4956 = !DILocation(line: 1458, column: 5, scope: !4957)
!4957 = !DILexicalBlockFile(scope: !4865, file: !3, discriminator: 2)
!4958 = distinct !{!4958, !4901, !4959}
!4959 = !DILocation(line: 1482, column: 5, scope: !4865)
!4960 = !DILocation(line: 1484, column: 29, scope: !4865)
!4961 = !DILocation(line: 1484, column: 22, scope: !4865)
!4962 = !DILocation(line: 1484, column: 20, scope: !4865)
!4963 = !DILocation(line: 1485, column: 9, scope: !4964)
!4964 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 1485, column: 9)
!4965 = !DILocation(line: 1485, column: 24, scope: !4964)
!4966 = !DILocation(line: 1485, column: 9, scope: !4865)
!4967 = !DILocation(line: 1487, column: 9, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4964, file: !3, line: 1486, column: 5)
!4969 = !DILocation(line: 1489, column: 20, scope: !4865)
!4970 = !DILocation(line: 1489, column: 23, scope: !4865)
!4971 = !DILocation(line: 1490, column: 6, scope: !4865)
!4972 = !DILocation(line: 1490, column: 21, scope: !4865)
!4973 = !DILocation(line: 1491, column: 5, scope: !4865)
!4974 = !DILocation(line: 1491, column: 20, scope: !4865)
!4975 = !DILocation(line: 1491, column: 25, scope: !4865)
!4976 = !DILocation(line: 1493, column: 5, scope: !4865)
!4977 = !DILocation(line: 1494, column: 1, scope: !4865)
!4978 = distinct !DISubprogram(name: "print_object", scope: !3, file: !3, line: 1606, type: !886, isLocal: true, isDefinition: true, scopeLine: 1607, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!4979 = !DILocalVariable(name: "item", arg: 1, scope: !4978, file: !3, line: 1606, type: !68)
!4980 = !DILocation(line: 1606, column: 52, scope: !4978)
!4981 = !DILocalVariable(name: "output_buffer", arg: 2, scope: !4978, file: !3, line: 1606, type: !888)
!4982 = !DILocation(line: 1606, column: 78, scope: !4978)
!4983 = !DILocalVariable(name: "output_pointer", scope: !4978, file: !3, line: 1608, type: !18)
!4984 = !DILocation(line: 1608, column: 20, scope: !4978)
!4985 = !DILocalVariable(name: "length", scope: !4978, file: !3, line: 1609, type: !19)
!4986 = !DILocation(line: 1609, column: 12, scope: !4978)
!4987 = !DILocalVariable(name: "current_item", scope: !4978, file: !3, line: 1610, type: !22)
!4988 = !DILocation(line: 1610, column: 12, scope: !4978)
!4989 = !DILocation(line: 1610, column: 27, scope: !4978)
!4990 = !DILocation(line: 1610, column: 33, scope: !4978)
!4991 = !DILocation(line: 1612, column: 9, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1612, column: 9)
!4993 = !DILocation(line: 1612, column: 23, scope: !4992)
!4994 = !DILocation(line: 1612, column: 9, scope: !4978)
!4995 = !DILocation(line: 1614, column: 9, scope: !4996)
!4996 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 1613, column: 5)
!4997 = !DILocation(line: 1618, column: 24, scope: !4978)
!4998 = !DILocation(line: 1618, column: 39, scope: !4978)
!4999 = !DILocation(line: 1618, column: 14, scope: !4978)
!5000 = !DILocation(line: 1618, column: 12, scope: !4978)
!5001 = !DILocation(line: 1619, column: 29, scope: !4978)
!5002 = !DILocation(line: 1619, column: 44, scope: !4978)
!5003 = !DILocation(line: 1619, column: 51, scope: !4978)
!5004 = !DILocation(line: 1619, column: 22, scope: !4978)
!5005 = !DILocation(line: 1619, column: 20, scope: !4978)
!5006 = !DILocation(line: 1620, column: 9, scope: !5007)
!5007 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1620, column: 9)
!5008 = !DILocation(line: 1620, column: 24, scope: !5007)
!5009 = !DILocation(line: 1620, column: 9, scope: !4978)
!5010 = !DILocation(line: 1622, column: 9, scope: !5011)
!5011 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 1621, column: 5)
!5012 = !DILocation(line: 1625, column: 20, scope: !4978)
!5013 = !DILocation(line: 1625, column: 23, scope: !4978)
!5014 = !DILocation(line: 1626, column: 5, scope: !4978)
!5015 = !DILocation(line: 1626, column: 20, scope: !4978)
!5016 = !DILocation(line: 1626, column: 25, scope: !4978)
!5017 = !DILocation(line: 1627, column: 9, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1627, column: 9)
!5019 = !DILocation(line: 1627, column: 24, scope: !5018)
!5020 = !DILocation(line: 1627, column: 9, scope: !4978)
!5021 = !DILocation(line: 1629, column: 24, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !5018, file: !3, line: 1628, column: 5)
!5023 = !DILocation(line: 1629, column: 27, scope: !5022)
!5024 = !DILocation(line: 1630, column: 5, scope: !5022)
!5025 = !DILocation(line: 1631, column: 30, scope: !4978)
!5026 = !DILocation(line: 1631, column: 5, scope: !4978)
!5027 = !DILocation(line: 1631, column: 20, scope: !4978)
!5028 = !DILocation(line: 1631, column: 27, scope: !4978)
!5029 = !DILocation(line: 1633, column: 5, scope: !4978)
!5030 = !DILocation(line: 1633, column: 12, scope: !5031)
!5031 = !DILexicalBlockFile(scope: !4978, file: !3, discriminator: 1)
!5032 = !DILocation(line: 1633, column: 5, scope: !5031)
!5033 = !DILocation(line: 1635, column: 13, scope: !5034)
!5034 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1635, column: 13)
!5035 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1634, column: 5)
!5036 = !DILocation(line: 1635, column: 28, scope: !5034)
!5037 = !DILocation(line: 1635, column: 13, scope: !5035)
!5038 = !DILocalVariable(name: "i", scope: !5039, file: !3, line: 1637, type: !19)
!5039 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1636, column: 9)
!5040 = !DILocation(line: 1637, column: 20, scope: !5039)
!5041 = !DILocation(line: 1638, column: 37, scope: !5039)
!5042 = !DILocation(line: 1638, column: 52, scope: !5039)
!5043 = !DILocation(line: 1638, column: 67, scope: !5039)
!5044 = !DILocation(line: 1638, column: 30, scope: !5039)
!5045 = !DILocation(line: 1638, column: 28, scope: !5039)
!5046 = !DILocation(line: 1639, column: 17, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 1639, column: 17)
!5048 = !DILocation(line: 1639, column: 32, scope: !5047)
!5049 = !DILocation(line: 1639, column: 17, scope: !5039)
!5050 = !DILocation(line: 1641, column: 17, scope: !5051)
!5051 = distinct !DILexicalBlock(scope: !5047, file: !3, line: 1640, column: 13)
!5052 = !DILocation(line: 1643, column: 20, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 1643, column: 13)
!5054 = !DILocation(line: 1643, column: 18, scope: !5053)
!5055 = !DILocation(line: 1643, column: 25, scope: !5056)
!5056 = !DILexicalBlockFile(scope: !5057, file: !3, discriminator: 1)
!5057 = distinct !DILexicalBlock(scope: !5053, file: !3, line: 1643, column: 13)
!5058 = !DILocation(line: 1643, column: 29, scope: !5056)
!5059 = !DILocation(line: 1643, column: 44, scope: !5056)
!5060 = !DILocation(line: 1643, column: 27, scope: !5056)
!5061 = !DILocation(line: 1643, column: 13, scope: !5062)
!5062 = !DILexicalBlockFile(scope: !5053, file: !3, discriminator: 1)
!5063 = !DILocation(line: 1645, column: 32, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 1644, column: 13)
!5065 = !DILocation(line: 1645, column: 35, scope: !5064)
!5066 = !DILocation(line: 1646, column: 13, scope: !5064)
!5067 = !DILocation(line: 1643, column: 52, scope: !5068)
!5068 = !DILexicalBlockFile(scope: !5057, file: !3, discriminator: 2)
!5069 = !DILocation(line: 1643, column: 13, scope: !5068)
!5070 = distinct !{!5070, !5071, !5072}
!5071 = !DILocation(line: 1643, column: 13, scope: !5053)
!5072 = !DILocation(line: 1646, column: 13, scope: !5053)
!5073 = !DILocation(line: 1647, column: 38, scope: !5039)
!5074 = !DILocation(line: 1647, column: 53, scope: !5039)
!5075 = !DILocation(line: 1647, column: 13, scope: !5039)
!5076 = !DILocation(line: 1647, column: 28, scope: !5039)
!5077 = !DILocation(line: 1647, column: 35, scope: !5039)
!5078 = !DILocation(line: 1648, column: 9, scope: !5039)
!5079 = !DILocation(line: 1651, column: 47, scope: !5080)
!5080 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1651, column: 13)
!5081 = !DILocation(line: 1651, column: 61, scope: !5080)
!5082 = !DILocation(line: 1651, column: 69, scope: !5080)
!5083 = !DILocation(line: 1651, column: 14, scope: !5080)
!5084 = !DILocation(line: 1651, column: 13, scope: !5035)
!5085 = !DILocation(line: 1653, column: 13, scope: !5086)
!5086 = distinct !DILexicalBlock(scope: !5080, file: !3, line: 1652, column: 9)
!5087 = !DILocation(line: 1655, column: 23, scope: !5035)
!5088 = !DILocation(line: 1655, column: 9, scope: !5035)
!5089 = !DILocation(line: 1657, column: 28, scope: !5035)
!5090 = !DILocation(line: 1657, column: 43, scope: !5035)
!5091 = !DILocation(line: 1657, column: 18, scope: !5035)
!5092 = !DILocation(line: 1657, column: 16, scope: !5035)
!5093 = !DILocation(line: 1658, column: 33, scope: !5035)
!5094 = !DILocation(line: 1658, column: 48, scope: !5035)
!5095 = !DILocation(line: 1658, column: 26, scope: !5035)
!5096 = !DILocation(line: 1658, column: 24, scope: !5035)
!5097 = !DILocation(line: 1659, column: 13, scope: !5098)
!5098 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1659, column: 13)
!5099 = !DILocation(line: 1659, column: 28, scope: !5098)
!5100 = !DILocation(line: 1659, column: 13, scope: !5035)
!5101 = !DILocation(line: 1661, column: 13, scope: !5102)
!5102 = distinct !DILexicalBlock(scope: !5098, file: !3, line: 1660, column: 9)
!5103 = !DILocation(line: 1663, column: 24, scope: !5035)
!5104 = !DILocation(line: 1663, column: 27, scope: !5035)
!5105 = !DILocation(line: 1664, column: 13, scope: !5106)
!5106 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1664, column: 13)
!5107 = !DILocation(line: 1664, column: 28, scope: !5106)
!5108 = !DILocation(line: 1664, column: 13, scope: !5035)
!5109 = !DILocation(line: 1666, column: 28, scope: !5110)
!5110 = distinct !DILexicalBlock(scope: !5106, file: !3, line: 1665, column: 9)
!5111 = !DILocation(line: 1666, column: 31, scope: !5110)
!5112 = !DILocation(line: 1667, column: 9, scope: !5110)
!5113 = !DILocation(line: 1668, column: 34, scope: !5035)
!5114 = !DILocation(line: 1668, column: 9, scope: !5035)
!5115 = !DILocation(line: 1668, column: 24, scope: !5035)
!5116 = !DILocation(line: 1668, column: 31, scope: !5035)
!5117 = !DILocation(line: 1671, column: 26, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1671, column: 13)
!5119 = !DILocation(line: 1671, column: 40, scope: !5118)
!5120 = !DILocation(line: 1671, column: 14, scope: !5118)
!5121 = !DILocation(line: 1671, column: 13, scope: !5035)
!5122 = !DILocation(line: 1673, column: 13, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5118, file: !3, line: 1672, column: 9)
!5124 = !DILocation(line: 1675, column: 23, scope: !5035)
!5125 = !DILocation(line: 1675, column: 9, scope: !5035)
!5126 = !DILocation(line: 1678, column: 28, scope: !5035)
!5127 = !DILocation(line: 1678, column: 43, scope: !5035)
!5128 = !DILocation(line: 1678, column: 19, scope: !5035)
!5129 = !DILocation(line: 1678, column: 70, scope: !5035)
!5130 = !DILocation(line: 1678, column: 84, scope: !5035)
!5131 = !DILocation(line: 1678, column: 61, scope: !5035)
!5132 = !DILocation(line: 1678, column: 59, scope: !5035)
!5133 = !DILocation(line: 1678, column: 16, scope: !5035)
!5134 = !DILocation(line: 1679, column: 33, scope: !5035)
!5135 = !DILocation(line: 1679, column: 48, scope: !5035)
!5136 = !DILocation(line: 1679, column: 55, scope: !5035)
!5137 = !DILocation(line: 1679, column: 26, scope: !5035)
!5138 = !DILocation(line: 1679, column: 24, scope: !5035)
!5139 = !DILocation(line: 1680, column: 13, scope: !5140)
!5140 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1680, column: 13)
!5141 = !DILocation(line: 1680, column: 28, scope: !5140)
!5142 = !DILocation(line: 1680, column: 13, scope: !5035)
!5143 = !DILocation(line: 1682, column: 13, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5140, file: !3, line: 1681, column: 9)
!5145 = !DILocation(line: 1684, column: 13, scope: !5146)
!5146 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1684, column: 13)
!5147 = !DILocation(line: 1684, column: 27, scope: !5146)
!5148 = !DILocation(line: 1684, column: 13, scope: !5035)
!5149 = !DILocation(line: 1686, column: 28, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 1685, column: 9)
!5151 = !DILocation(line: 1686, column: 31, scope: !5150)
!5152 = !DILocation(line: 1687, column: 9, scope: !5150)
!5153 = !DILocation(line: 1689, column: 13, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1689, column: 13)
!5155 = !DILocation(line: 1689, column: 28, scope: !5154)
!5156 = !DILocation(line: 1689, column: 13, scope: !5035)
!5157 = !DILocation(line: 1691, column: 28, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 1690, column: 9)
!5159 = !DILocation(line: 1691, column: 31, scope: !5158)
!5160 = !DILocation(line: 1692, column: 9, scope: !5158)
!5161 = !DILocation(line: 1693, column: 10, scope: !5035)
!5162 = !DILocation(line: 1693, column: 25, scope: !5035)
!5163 = !DILocation(line: 1694, column: 34, scope: !5035)
!5164 = !DILocation(line: 1694, column: 9, scope: !5035)
!5165 = !DILocation(line: 1694, column: 24, scope: !5035)
!5166 = !DILocation(line: 1694, column: 31, scope: !5035)
!5167 = !DILocation(line: 1696, column: 24, scope: !5035)
!5168 = !DILocation(line: 1696, column: 38, scope: !5035)
!5169 = !DILocation(line: 1696, column: 22, scope: !5035)
!5170 = !DILocation(line: 1633, column: 5, scope: !5171)
!5171 = !DILexicalBlockFile(scope: !4978, file: !3, discriminator: 2)
!5172 = distinct !{!5172, !5029, !5173}
!5173 = !DILocation(line: 1697, column: 5, scope: !4978)
!5174 = !DILocation(line: 1699, column: 29, scope: !4978)
!5175 = !DILocation(line: 1699, column: 44, scope: !4978)
!5176 = !DILocation(line: 1699, column: 59, scope: !4978)
!5177 = !DILocation(line: 1699, column: 69, scope: !5031)
!5178 = !DILocation(line: 1699, column: 84, scope: !5031)
!5179 = !DILocation(line: 1699, column: 90, scope: !5031)
!5180 = !DILocation(line: 1699, column: 44, scope: !5031)
!5181 = !DILocation(line: 1699, column: 44, scope: !5171)
!5182 = !DILocation(line: 1699, column: 44, scope: !5183)
!5183 = !DILexicalBlockFile(scope: !4978, file: !3, discriminator: 3)
!5184 = !DILocation(line: 1699, column: 22, scope: !5183)
!5185 = !DILocation(line: 1699, column: 20, scope: !5183)
!5186 = !DILocation(line: 1700, column: 9, scope: !5187)
!5187 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1700, column: 9)
!5188 = !DILocation(line: 1700, column: 24, scope: !5187)
!5189 = !DILocation(line: 1700, column: 9, scope: !4978)
!5190 = !DILocation(line: 1702, column: 9, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 1701, column: 5)
!5192 = !DILocation(line: 1704, column: 9, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1704, column: 9)
!5194 = !DILocation(line: 1704, column: 24, scope: !5193)
!5195 = !DILocation(line: 1704, column: 9, scope: !4978)
!5196 = !DILocalVariable(name: "i", scope: !5197, file: !3, line: 1706, type: !19)
!5197 = distinct !DILexicalBlock(scope: !5193, file: !3, line: 1705, column: 5)
!5198 = !DILocation(line: 1706, column: 16, scope: !5197)
!5199 = !DILocation(line: 1707, column: 16, scope: !5200)
!5200 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 1707, column: 9)
!5201 = !DILocation(line: 1707, column: 14, scope: !5200)
!5202 = !DILocation(line: 1707, column: 21, scope: !5203)
!5203 = !DILexicalBlockFile(scope: !5204, file: !3, discriminator: 1)
!5204 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 1707, column: 9)
!5205 = !DILocation(line: 1707, column: 26, scope: !5203)
!5206 = !DILocation(line: 1707, column: 41, scope: !5203)
!5207 = !DILocation(line: 1707, column: 47, scope: !5203)
!5208 = !DILocation(line: 1707, column: 23, scope: !5203)
!5209 = !DILocation(line: 1707, column: 9, scope: !5210)
!5210 = !DILexicalBlockFile(scope: !5200, file: !3, discriminator: 1)
!5211 = !DILocation(line: 1709, column: 28, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5204, file: !3, line: 1708, column: 9)
!5213 = !DILocation(line: 1709, column: 31, scope: !5212)
!5214 = !DILocation(line: 1710, column: 9, scope: !5212)
!5215 = !DILocation(line: 1707, column: 54, scope: !5216)
!5216 = !DILexicalBlockFile(scope: !5204, file: !3, discriminator: 2)
!5217 = !DILocation(line: 1707, column: 9, scope: !5216)
!5218 = distinct !{!5218, !5219, !5220}
!5219 = !DILocation(line: 1707, column: 9, scope: !5200)
!5220 = !DILocation(line: 1710, column: 9, scope: !5200)
!5221 = !DILocation(line: 1711, column: 5, scope: !5197)
!5222 = !DILocation(line: 1712, column: 20, scope: !4978)
!5223 = !DILocation(line: 1712, column: 23, scope: !4978)
!5224 = !DILocation(line: 1713, column: 6, scope: !4978)
!5225 = !DILocation(line: 1713, column: 21, scope: !4978)
!5226 = !DILocation(line: 1714, column: 5, scope: !4978)
!5227 = !DILocation(line: 1714, column: 20, scope: !4978)
!5228 = !DILocation(line: 1714, column: 25, scope: !4978)
!5229 = !DILocation(line: 1716, column: 5, scope: !4978)
!5230 = !DILocation(line: 1717, column: 1, scope: !4978)
!5231 = distinct !DISubprogram(name: "print_string_ptr", scope: !3, file: !3, line: 827, type: !5232, isLocal: true, isDefinition: true, scopeLine: 828, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!5232 = !DISubroutineType(types: !5233)
!5233 = !{!16, !4256, !888}
!5234 = !DILocalVariable(name: "input", arg: 1, scope: !5231, file: !3, line: 827, type: !4256)
!5235 = !DILocation(line: 827, column: 64, scope: !5231)
!5236 = !DILocalVariable(name: "output_buffer", arg: 2, scope: !5231, file: !3, line: 827, type: !888)
!5237 = !DILocation(line: 827, column: 91, scope: !5231)
!5238 = !DILocalVariable(name: "input_pointer", scope: !5231, file: !3, line: 829, type: !12)
!5239 = !DILocation(line: 829, column: 26, scope: !5231)
!5240 = !DILocalVariable(name: "output", scope: !5231, file: !3, line: 830, type: !18)
!5241 = !DILocation(line: 830, column: 20, scope: !5231)
!5242 = !DILocalVariable(name: "output_pointer", scope: !5231, file: !3, line: 831, type: !18)
!5243 = !DILocation(line: 831, column: 20, scope: !5231)
!5244 = !DILocalVariable(name: "output_length", scope: !5231, file: !3, line: 832, type: !19)
!5245 = !DILocation(line: 832, column: 12, scope: !5231)
!5246 = !DILocalVariable(name: "escape_characters", scope: !5231, file: !3, line: 834, type: !19)
!5247 = !DILocation(line: 834, column: 12, scope: !5231)
!5248 = !DILocation(line: 836, column: 9, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 836, column: 9)
!5250 = !DILocation(line: 836, column: 23, scope: !5249)
!5251 = !DILocation(line: 836, column: 9, scope: !5231)
!5252 = !DILocation(line: 838, column: 9, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5249, file: !3, line: 837, column: 5)
!5254 = !DILocation(line: 842, column: 9, scope: !5255)
!5255 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 842, column: 9)
!5256 = !DILocation(line: 842, column: 15, scope: !5255)
!5257 = !DILocation(line: 842, column: 9, scope: !5231)
!5258 = !DILocation(line: 844, column: 25, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 843, column: 5)
!5260 = !DILocation(line: 844, column: 18, scope: !5259)
!5261 = !DILocation(line: 844, column: 16, scope: !5259)
!5262 = !DILocation(line: 845, column: 13, scope: !5263)
!5263 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 845, column: 13)
!5264 = !DILocation(line: 845, column: 20, scope: !5263)
!5265 = !DILocation(line: 845, column: 13, scope: !5259)
!5266 = !DILocation(line: 847, column: 13, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5263, file: !3, line: 846, column: 9)
!5268 = !DILocation(line: 849, column: 23, scope: !5259)
!5269 = !DILocation(line: 849, column: 9, scope: !5259)
!5270 = !DILocation(line: 851, column: 9, scope: !5259)
!5271 = !DILocation(line: 855, column: 26, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 855, column: 5)
!5273 = !DILocation(line: 855, column: 24, scope: !5272)
!5274 = !DILocation(line: 855, column: 10, scope: !5272)
!5275 = !DILocation(line: 855, column: 34, scope: !5276)
!5276 = !DILexicalBlockFile(scope: !5277, file: !3, discriminator: 1)
!5277 = distinct !DILexicalBlock(scope: !5272, file: !3, line: 855, column: 5)
!5278 = !DILocation(line: 855, column: 33, scope: !5276)
!5279 = !DILocation(line: 855, column: 5, scope: !5280)
!5280 = !DILexicalBlockFile(scope: !5272, file: !3, discriminator: 1)
!5281 = !DILocation(line: 857, column: 18, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5277, file: !3, line: 856, column: 5)
!5283 = !DILocation(line: 857, column: 17, scope: !5282)
!5284 = !DILocation(line: 857, column: 9, scope: !5282)
!5285 = !DILocation(line: 867, column: 34, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5282, file: !3, line: 858, column: 9)
!5287 = !DILocation(line: 868, column: 17, scope: !5286)
!5288 = !DILocation(line: 870, column: 22, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 870, column: 21)
!5290 = !DILocation(line: 870, column: 21, scope: !5289)
!5291 = !DILocation(line: 870, column: 36, scope: !5289)
!5292 = !DILocation(line: 870, column: 21, scope: !5286)
!5293 = !DILocation(line: 873, column: 39, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 871, column: 17)
!5295 = !DILocation(line: 874, column: 17, scope: !5294)
!5296 = !DILocation(line: 875, column: 17, scope: !5286)
!5297 = !DILocation(line: 877, column: 5, scope: !5282)
!5298 = !DILocation(line: 855, column: 62, scope: !5299)
!5299 = !DILexicalBlockFile(scope: !5277, file: !3, discriminator: 2)
!5300 = !DILocation(line: 855, column: 5, scope: !5299)
!5301 = distinct !{!5301, !5302, !5303}
!5302 = !DILocation(line: 855, column: 5, scope: !5272)
!5303 = !DILocation(line: 877, column: 5, scope: !5272)
!5304 = !DILocation(line: 878, column: 30, scope: !5231)
!5305 = !DILocation(line: 878, column: 46, scope: !5231)
!5306 = !DILocation(line: 878, column: 44, scope: !5231)
!5307 = !DILocation(line: 878, column: 55, scope: !5231)
!5308 = !DILocation(line: 878, column: 53, scope: !5231)
!5309 = !DILocation(line: 878, column: 19, scope: !5231)
!5310 = !DILocation(line: 880, column: 21, scope: !5231)
!5311 = !DILocation(line: 880, column: 36, scope: !5231)
!5312 = !DILocation(line: 880, column: 50, scope: !5231)
!5313 = !DILocation(line: 880, column: 14, scope: !5231)
!5314 = !DILocation(line: 880, column: 12, scope: !5231)
!5315 = !DILocation(line: 881, column: 9, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 881, column: 9)
!5317 = !DILocation(line: 881, column: 16, scope: !5316)
!5318 = !DILocation(line: 881, column: 9, scope: !5231)
!5319 = !DILocation(line: 883, column: 9, scope: !5320)
!5320 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 882, column: 5)
!5321 = !DILocation(line: 887, column: 9, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 887, column: 9)
!5323 = !DILocation(line: 887, column: 27, scope: !5322)
!5324 = !DILocation(line: 887, column: 9, scope: !5231)
!5325 = !DILocation(line: 889, column: 9, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5322, file: !3, line: 888, column: 5)
!5327 = !DILocation(line: 889, column: 19, scope: !5326)
!5328 = !DILocation(line: 890, column: 16, scope: !5326)
!5329 = !DILocation(line: 890, column: 23, scope: !5326)
!5330 = !DILocation(line: 890, column: 28, scope: !5326)
!5331 = !DILocation(line: 890, column: 35, scope: !5326)
!5332 = !DILocation(line: 890, column: 9, scope: !5326)
!5333 = !DILocation(line: 891, column: 9, scope: !5326)
!5334 = !DILocation(line: 891, column: 16, scope: !5326)
!5335 = !DILocation(line: 891, column: 30, scope: !5326)
!5336 = !DILocation(line: 891, column: 35, scope: !5326)
!5337 = !DILocation(line: 892, column: 9, scope: !5326)
!5338 = !DILocation(line: 892, column: 16, scope: !5326)
!5339 = !DILocation(line: 892, column: 30, scope: !5326)
!5340 = !DILocation(line: 892, column: 35, scope: !5326)
!5341 = !DILocation(line: 894, column: 9, scope: !5326)
!5342 = !DILocation(line: 897, column: 5, scope: !5231)
!5343 = !DILocation(line: 897, column: 15, scope: !5231)
!5344 = !DILocation(line: 898, column: 22, scope: !5231)
!5345 = !DILocation(line: 898, column: 29, scope: !5231)
!5346 = !DILocation(line: 898, column: 20, scope: !5231)
!5347 = !DILocation(line: 900, column: 26, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 900, column: 5)
!5349 = !DILocation(line: 900, column: 24, scope: !5348)
!5350 = !DILocation(line: 900, column: 10, scope: !5348)
!5351 = !DILocation(line: 900, column: 34, scope: !5352)
!5352 = !DILexicalBlockFile(scope: !5353, file: !3, discriminator: 1)
!5353 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 900, column: 5)
!5354 = !DILocation(line: 900, column: 33, scope: !5352)
!5355 = !DILocation(line: 900, column: 48, scope: !5352)
!5356 = !DILocation(line: 900, column: 5, scope: !5357)
!5357 = !DILexicalBlockFile(scope: !5348, file: !3, discriminator: 1)
!5358 = !DILocation(line: 902, column: 15, scope: !5359)
!5359 = distinct !DILexicalBlock(scope: !5360, file: !3, line: 902, column: 13)
!5360 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 901, column: 5)
!5361 = !DILocation(line: 902, column: 14, scope: !5359)
!5362 = !DILocation(line: 902, column: 29, scope: !5359)
!5363 = !DILocation(line: 902, column: 35, scope: !5359)
!5364 = !DILocation(line: 902, column: 40, scope: !5365)
!5365 = !DILexicalBlockFile(scope: !5359, file: !3, discriminator: 1)
!5366 = !DILocation(line: 902, column: 39, scope: !5365)
!5367 = !DILocation(line: 902, column: 54, scope: !5365)
!5368 = !DILocation(line: 902, column: 63, scope: !5365)
!5369 = !DILocation(line: 902, column: 68, scope: !5370)
!5370 = !DILexicalBlockFile(scope: !5359, file: !3, discriminator: 2)
!5371 = !DILocation(line: 902, column: 67, scope: !5370)
!5372 = !DILocation(line: 902, column: 82, scope: !5370)
!5373 = !DILocation(line: 902, column: 13, scope: !5374)
!5374 = !DILexicalBlockFile(scope: !5360, file: !3, discriminator: 2)
!5375 = !DILocation(line: 905, column: 32, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 903, column: 9)
!5377 = !DILocation(line: 905, column: 31, scope: !5376)
!5378 = !DILocation(line: 905, column: 14, scope: !5376)
!5379 = !DILocation(line: 905, column: 29, scope: !5376)
!5380 = !DILocation(line: 906, column: 9, scope: !5376)
!5381 = !DILocation(line: 910, column: 28, scope: !5382)
!5382 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 908, column: 9)
!5383 = !DILocation(line: 910, column: 31, scope: !5382)
!5384 = !DILocation(line: 911, column: 22, scope: !5382)
!5385 = !DILocation(line: 911, column: 21, scope: !5382)
!5386 = !DILocation(line: 911, column: 13, scope: !5382)
!5387 = !DILocation(line: 914, column: 22, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5382, file: !3, line: 912, column: 13)
!5389 = !DILocation(line: 914, column: 37, scope: !5388)
!5390 = !DILocation(line: 915, column: 21, scope: !5388)
!5391 = !DILocation(line: 917, column: 22, scope: !5388)
!5392 = !DILocation(line: 917, column: 37, scope: !5388)
!5393 = !DILocation(line: 918, column: 21, scope: !5388)
!5394 = !DILocation(line: 920, column: 22, scope: !5388)
!5395 = !DILocation(line: 920, column: 37, scope: !5388)
!5396 = !DILocation(line: 921, column: 21, scope: !5388)
!5397 = !DILocation(line: 923, column: 22, scope: !5388)
!5398 = !DILocation(line: 923, column: 37, scope: !5388)
!5399 = !DILocation(line: 924, column: 21, scope: !5388)
!5400 = !DILocation(line: 926, column: 22, scope: !5388)
!5401 = !DILocation(line: 926, column: 37, scope: !5388)
!5402 = !DILocation(line: 927, column: 21, scope: !5388)
!5403 = !DILocation(line: 929, column: 22, scope: !5388)
!5404 = !DILocation(line: 929, column: 37, scope: !5388)
!5405 = !DILocation(line: 930, column: 21, scope: !5388)
!5406 = !DILocation(line: 932, column: 22, scope: !5388)
!5407 = !DILocation(line: 932, column: 37, scope: !5388)
!5408 = !DILocation(line: 933, column: 21, scope: !5388)
!5409 = !DILocation(line: 936, column: 36, scope: !5388)
!5410 = !DILocation(line: 936, column: 62, scope: !5388)
!5411 = !DILocation(line: 936, column: 61, scope: !5388)
!5412 = !DILocation(line: 936, column: 21, scope: !5388)
!5413 = !DILocation(line: 937, column: 36, scope: !5388)
!5414 = !DILocation(line: 938, column: 21, scope: !5388)
!5415 = !DILocation(line: 941, column: 5, scope: !5360)
!5416 = !DILocation(line: 900, column: 76, scope: !5417)
!5417 = !DILexicalBlockFile(scope: !5353, file: !3, discriminator: 2)
!5418 = !DILocation(line: 900, column: 94, scope: !5417)
!5419 = !DILocation(line: 900, column: 5, scope: !5417)
!5420 = distinct !{!5420, !5421, !5422}
!5421 = !DILocation(line: 900, column: 5, scope: !5348)
!5422 = !DILocation(line: 941, column: 5, scope: !5348)
!5423 = !DILocation(line: 942, column: 5, scope: !5231)
!5424 = !DILocation(line: 942, column: 12, scope: !5231)
!5425 = !DILocation(line: 942, column: 26, scope: !5231)
!5426 = !DILocation(line: 942, column: 31, scope: !5231)
!5427 = !DILocation(line: 943, column: 5, scope: !5231)
!5428 = !DILocation(line: 943, column: 12, scope: !5231)
!5429 = !DILocation(line: 943, column: 26, scope: !5231)
!5430 = !DILocation(line: 943, column: 31, scope: !5231)
!5431 = !DILocation(line: 945, column: 5, scope: !5231)
!5432 = !DILocation(line: 946, column: 1, scope: !5231)
!5433 = distinct !DISubprogram(name: "case_insensitive_strcmp", scope: !3, file: !3, line: 97, type: !5434, isLocal: true, isDefinition: true, scopeLine: 98, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!5434 = !DISubroutineType(types: !5435)
!5435 = !{!11, !12, !12}
!5436 = !DILocalVariable(name: "string1", arg: 1, scope: !5433, file: !3, line: 97, type: !12)
!5437 = !DILocation(line: 97, column: 57, scope: !5433)
!5438 = !DILocalVariable(name: "string2", arg: 2, scope: !5433, file: !3, line: 97, type: !12)
!5439 = !DILocation(line: 97, column: 87, scope: !5433)
!5440 = !DILocation(line: 99, column: 10, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5433, file: !3, line: 99, column: 9)
!5442 = !DILocation(line: 99, column: 18, scope: !5441)
!5443 = !DILocation(line: 99, column: 27, scope: !5441)
!5444 = !DILocation(line: 99, column: 31, scope: !5445)
!5445 = !DILexicalBlockFile(scope: !5441, file: !3, discriminator: 1)
!5446 = !DILocation(line: 99, column: 39, scope: !5445)
!5447 = !DILocation(line: 99, column: 9, scope: !5448)
!5448 = !DILexicalBlockFile(scope: !5433, file: !3, discriminator: 1)
!5449 = !DILocation(line: 101, column: 9, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5441, file: !3, line: 100, column: 5)
!5451 = !DILocation(line: 104, column: 9, scope: !5452)
!5452 = distinct !DILexicalBlock(scope: !5433, file: !3, line: 104, column: 9)
!5453 = !DILocation(line: 104, column: 20, scope: !5452)
!5454 = !DILocation(line: 104, column: 17, scope: !5452)
!5455 = !DILocation(line: 104, column: 9, scope: !5433)
!5456 = !DILocation(line: 106, column: 9, scope: !5457)
!5457 = distinct !DILexicalBlock(scope: !5452, file: !3, line: 105, column: 5)
!5458 = !DILocation(line: 109, column: 5, scope: !5433)
!5459 = !DILocation(line: 109, column: 20, scope: !5460)
!5460 = !DILexicalBlockFile(scope: !5461, file: !3, discriminator: 1)
!5461 = distinct !DILexicalBlock(scope: !5462, file: !3, line: 109, column: 5)
!5462 = distinct !DILexicalBlock(scope: !5433, file: !3, line: 109, column: 5)
!5463 = !DILocation(line: 109, column: 19, scope: !5460)
!5464 = !DILocation(line: 109, column: 11, scope: !5460)
!5465 = !DILocation(line: 109, column: 41, scope: !5460)
!5466 = !DILocation(line: 109, column: 40, scope: !5460)
!5467 = !DILocation(line: 109, column: 32, scope: !5468)
!5468 = !DILexicalBlockFile(scope: !5461, file: !3, discriminator: 3)
!5469 = !DILocation(line: 109, column: 29, scope: !5460)
!5470 = !DILocation(line: 109, column: 5, scope: !5471)
!5471 = !DILexicalBlockFile(scope: !5462, file: !3, discriminator: 1)
!5472 = !DILocation(line: 111, column: 14, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5474, file: !3, line: 111, column: 13)
!5474 = distinct !DILexicalBlock(scope: !5461, file: !3, line: 110, column: 5)
!5475 = !DILocation(line: 111, column: 13, scope: !5473)
!5476 = !DILocation(line: 111, column: 22, scope: !5473)
!5477 = !DILocation(line: 111, column: 13, scope: !5474)
!5478 = !DILocation(line: 113, column: 13, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5473, file: !3, line: 112, column: 9)
!5480 = !DILocation(line: 115, column: 5, scope: !5474)
!5481 = !DILocation(line: 109, column: 64, scope: !5482)
!5482 = !DILexicalBlockFile(scope: !5461, file: !3, discriminator: 2)
!5483 = !DILocation(line: 109, column: 75, scope: !5482)
!5484 = !DILocation(line: 109, column: 5, scope: !5482)
!5485 = distinct !{!5485, !5486, !5487}
!5486 = !DILocation(line: 109, column: 5, scope: !5462)
!5487 = !DILocation(line: 115, column: 5, scope: !5462)
!5488 = !DILocation(line: 117, column: 21, scope: !5433)
!5489 = !DILocation(line: 117, column: 20, scope: !5433)
!5490 = !DILocation(line: 117, column: 12, scope: !5433)
!5491 = !DILocation(line: 117, column: 41, scope: !5433)
!5492 = !DILocation(line: 117, column: 40, scope: !5433)
!5493 = !DILocation(line: 117, column: 32, scope: !5448)
!5494 = !DILocation(line: 117, column: 30, scope: !5433)
!5495 = !DILocation(line: 117, column: 5, scope: !5433)
!5496 = !DILocation(line: 118, column: 1, scope: !5433)
